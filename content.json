{"meta":{"title":"不怕万人阻挡，就怕自己投降","subtitle":null,"description":null,"author":"xiaoyi","url":"https://mr8649.github.io"},"pages":[],"posts":[{"title":"day13搜索过滤","slug":"day13搜索过滤","date":"2019-05-03T03:22:55.000Z","updated":"2019-05-03T03:24:42.291Z","comments":true,"path":"2019/05/03/day13搜索过滤/","link":"","permalink":"https://mr8649.github.io/2019/05/03/day13搜索过滤/","excerpt":"","text":"​ # 0.学习目标 ​ - 了解过滤功能的基本思路 ​ - 独立实现分类和品牌展示 ​ - 了解规格参数展示 ​ - 实现过滤条件筛选 ​ - 实现已选过滤项回显 ​ - 实现取消选择过滤项 ​ # 1.过滤功能分析 ​ 首先看下页面要实现的效果： ​ ​ 整个过滤部分有3块： ​ - 顶部的导航，已经选择的过滤条件展示： ​ - 商品分类面包屑，根据用户选择的商品分类变化 ​ - 其它已选择过滤参数 ​ - 过滤条件展示，又包含3部分 ​ - 商品分类展示 ​ - 品牌展示 ​ - 其它规格参数 ​ - 展开或收起的过滤条件的按钮 ​ 顶部导航要展示的内容跟用户选择的过滤条件有关。 ​ - 比如用户选择了某个商品分类，则面包屑中才会展示具体的分类 ​ - 比如用户选择了某个品牌，列表中才会有品牌信息。 ​ 所以，这部分需要依赖第二部分：过滤条件的展示和选择。因此我们先不着急去做。 ​ 展开或收起的按钮是否显示，取决于过滤条件有多少，如果很少，那么就没必要展示。所以也是跟第二部分的过滤条件有关。 ​ 这样分析来看，我们必须先做第二部分：过滤条件展示。 ​ # 2.生成分类和品牌过滤 ​ 先来看分类和品牌。在我们的数据库中已经有所有的分类和品牌信息。在这个位置，是不是把所有的分类和品牌信息都展示出来呢？ ​ 显然不是，用户搜索的条件会对商品进行过滤，而在搜索结果中，不一定包含所有的分类和品牌，直接展示出所有商品分类，让用户选择显然是不合适的。 ​ 无论是分类信息，还是品牌信息，都应该从搜索的结果商品中进行聚合得到。 ​ ## 2.1.扩展返回的结果 ​ 原来，我们返回的结果是PageResult对象，里面只有total、totalPage、items3个属性。但是现在要对商品分类和品牌进行聚合，数据显然不够用，我们需要对返回的结果进行扩展，添加分类和品牌的数据。 ​ 那么问题来了：以什么格式返回呢？ ​ 看页面： ​ ​ 分类：页面显示了分类名称，但背后肯定要保存id信息。所以至少要有id和name ​ 品牌：页面展示的有logo，有文字，当然肯定有id，基本上是品牌的完整数据 ​ 我们新建一个类，继承PageResult，然后扩展两个新的属性：分类集合和品牌集合： ​ \\1234567891011121314151617181920​ public class SearchResult extends PageResult&lt;Goods&gt;&#123;​ private List&lt;Category&gt; categories;​ private List&lt;Brand&gt; brands;​ public SearchResult(Long total, Integer totalPage, List&lt;Goods&gt; items, List&lt;Category&gt; categories, List&lt;Brand&gt; brands) &#123;​ super(total, totalPage, items);​ this.categories = categories;​ this.brands = brands;​ &#125;​ &#125;​ \\ ​ ## 2.2.聚合商品分类和品牌 ​ 我们修改搜索的业务逻辑，对分类和品牌聚合。 ​ 因为索引库中只有id，所以我们根据id聚合，然后再根据id去查询完整数据。 ​ 所以，商品微服务需要提供一个接口：根据品牌id集合，批量查询品牌。 ​ ### 2.2.1.提供查询品牌接口 ​ BrandApi ​ \\123456789101112​ @RequestMapping(\"brand\")​ public interface BrandApi &#123;​ @GetMapping(\"list\")​ List&lt;Brand&gt; queryBrandByIds(@RequestParam(\"ids\") List&lt;Long&gt; ids);​ &#125;​ \\ ​ BrandController ​ \\12345678910111213141516171819202122232425262728​ /**​ \\* 根据多个id查询品牌​ \\* @param ids​ \\* @return​ */​ @GetMapping(\"list\")​ public ResponseEntity&lt;List&lt;Brand&gt;&gt; queryBrandByIds(@RequestParam(\"ids\") List&lt;Long&gt; ids)&#123;​ List&lt;Brand&gt; list = this.brandService.queryBrandByIds(ids);​ if(list == null)&#123;​ new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(list);​ &#125;​ \\ ​ BrandService ​ \\12345678​ public List&lt;Brand&gt; queryBrandByIds(List&lt;Long&gt; ids) &#123;​ return this.brandMapper.selectByIdList(ids);​ &#125;​ \\ ​ BrandMapper ​ 继承通用mapper的 SelectByIdListMapper即可 ​ \\1234​ public interface BrandMapper extends Mapper&lt;Brand&gt;, SelectByIdListMapper&lt;Brand,Long&gt; &#123;&#125;​ \\ ​ ### 2.2.2.搜索功能改造 ​ 添加BrandClient ​ \\12345678​ @FeignClient(\"item-service\")​ public interface BrandClient extends BrandApi &#123;​ &#125;​ \\ ​ 修改SearchService： ​ \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204​ @Service​ public class SearchService &#123;​ @Autowired​ private GoodsRepository goodsRepository;​ @Autowired​ private CategoryClient categoryClient;​ @Autowired​ private BrandClient brandClient;​ private static final Logger logger = LoggerFactory.getLogger(SearchService.class);​ public PageResult&lt;Goods&gt; search(SearchRequest request) &#123;​ // 判断是否有搜索条件，如果没有，直接返回null。不允许搜索全部商品​ if (StringUtils.isBlank(request.getKey())) &#123;​ return null;​ &#125;​ // 1、构建查询条件​ NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();​ ​ // 1.1、基本查询​ queryBuilder.withQuery(QueryBuilders.matchQuery(\"all\", request.getKey()));​ // 通过sourceFilter设置返回的结果字段,我们只需要id、skus、subTitle​ queryBuilder.withSourceFilter(new FetchSourceFilter(​ new String[]&#123;\"id\", \"skus\", \"subTitle\"&#125;, null));​ // 1.2.分页排序​ searchWithPageAndSort(queryBuilder,request);​ ​ // 1.3、聚合​ String categoryAggName = \"category\"; // 商品分类聚合名称​ String brandAggName = \"brand\"; // 品牌聚合名称​ // 对商品分类进行聚合​ queryBuilder.addAggregation(AggregationBuilders.terms(categoryAggName).field(\"cid3\"));​ // 对品牌进行聚合​ queryBuilder.addAggregation(AggregationBuilders.terms(brandAggName).field(\"brandId\"));​ // 2、查询，获取结果​ AggregatedPage&lt;Goods&gt; pageInfo = (AggregatedPage&lt;Goods&gt;) this.goodsRepository.search(queryBuilder.build());​ // 3、解析查询结果​ // 3.1、分页信息​ Long total = pageInfo.getTotalElements();​ int totalPage = (total.intValue() + request.getSize() - 1) / request.getSize();​ // 3.2、商品分类的聚合结果​ List&lt;Category&gt; categories = ​ getCategoryAggResult(pageInfo.getAggregation(categoryAggName));​ // 3.3、品牌的聚合结果​ List&lt;Brand&gt; brands = getBrandAggResult(pageInfo.getAggregation(brandAggName));​ // 返回结果​ return new SearchResult(goodsPage.getTotalElements(), goodsPage.getTotalPages(), goodsPage.getContent(), categories, brands);​ &#125;​ ​ // 解析品牌聚合结果​ private List&lt;Brand&gt; getBrandAggResult(Aggregation aggregation) &#123;​ try &#123;​ LongTerms brandAgg = (LongTerms) aggregation;​ List&lt;Long&gt; bids = new ArrayList&lt;&gt;();​ for (LongTerms.Bucket bucket : brandAgg.getBuckets()) &#123;​ bids.add(bucket.getKeyAsNumber().longValue());​ &#125;​ // 根据id查询品牌​ return this.brandClient.queryBrandByIds(bids);​ &#125; catch (Exception e)&#123;​ logger.error(\"品牌聚合出现异常：\", e);​ return null;​ &#125;​ &#125;​ // 解析商品分类聚合结果​ private List&lt;Category&gt; getCategoryAggResult(Aggregation aggregation) &#123;​ try&#123;​ List&lt;Category&gt; categories = new ArrayList&lt;&gt;();​ LongTerms categoryAgg = (LongTerms) aggregation;​ List&lt;Long&gt; cids = new ArrayList&lt;&gt;();​ for (LongTerms.Bucket bucket : categoryAgg.getBuckets()) &#123;​ cids.add(bucket.getKeyAsNumber().longValue());​ &#125;​ // 根据id查询分类名称​ List&lt;String&gt; names = this.categoryClient.queryNameByIds(cids);​ for (int i = 0; i &lt; names.size(); i++) &#123;​ Category c = new Category();​ c.setId(cids.get(i));​ c.setName(names.get(i));​ categories.add(c);​ &#125;​ return categories;​ &#125; catch (Exception e)&#123;​ logger.error(\"分类聚合出现异常：\", e);​ return null;​ &#125;​ &#125;​ // 构建基本查询条件​ private void searchWithPageAndSort(NativeSearchQueryBuilder queryBuilder, SearchRequest request) &#123;​ // 准备分页参数​ int page = request.getPage();​ int size = request.getSize();​ // 1、分页​ queryBuilder.withPageable(PageRequest.of(page - 1, size));​ // 2、排序​ String sortBy = request.getSortBy();​ Boolean desc = request.getDescending();​ if (StringUtils.isNotBlank(sortBy)) &#123;​ // 如果不为空，则进行排序​ queryBuilder.withSort(SortBuilders.fieldSort(sortBy).order(desc ? SortOrder.DESC : SortOrder.ASC));​ &#125;​ &#125;​ &#125;​ \\ ​ 测试： ​ ​ ## 2.3.页面渲染数据 ​ ### 2.3.1.过滤参数数据结构 ​ 来看下页面的展示效果： ​ ​ 虽然分类、品牌内容都不太一样，但是结构相似，都是key和value的结构。 ​ 而且页面结构也极为类似： ​ ​ 所以，我们可以把所有的过滤条件放入一个数组中，然后在页面利用v-for遍历一次生成。 ​ 其基本结构是这样的： ​ \\1234567891011121314​ [​ &#123;​ k:\"过滤字段名\",​ options:[&#123;/*过滤字段值对象*/&#125;,&#123;/*过滤字段值对象*/&#125;]​ &#125;​ ]​ \\ ​ 我们先在data中定义数组：filter，等待组装过滤参数： ​ \\123456789101112131415161718192021222324​ data: &#123;​ ly,​ search:&#123;​ key: \"\",​ page: 1​ &#125;,​ goodsList:[], // 接收搜索得到的结果​ total: 0, // 总条数​ totalPage: 0, // 总页数​ filters:[] // 过滤参数集合​ &#125;,​ \\ ​ 然后在查询搜索结果的回调函数中，对过滤参数进行封装： ​ ​ 然后刷新页面，通过浏览器工具，查看封装的结果： ​ ​ ### 2.3.2.页面渲染数据 ​ 首先看页面原来的代码： ​ ​ 我们注意到，虽然页面元素是一样的，但是品牌会比其它搜索条件多出一些样式，因为品牌是以图片展示。需要进行特殊处理。数据展示是一致的，我们采用v-for处理： ​ \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556 &lt;div class=\"type-wrap\" v-for=\"(f,i) in filters\" :key=\"i\" v-if=\"f.k !== '品牌'\"&gt; &lt;div class=\"fl key\"&gt;&#123;&#123;f.k&#125;&#125;&lt;/div&gt; &lt;div class=\"fl value\"&gt;​ &lt;ul class=\"type-list\"&gt;​ &lt;li v-for=\"(option, j) in f.options\" :key=\"j\"&gt;​ &lt;a&gt;&#123;&#123;option.name&#125;&#125;&lt;/a&gt;​ &lt;/li&gt;​ &lt;/ul&gt;​ &lt;/div&gt; &lt;div class=\"fl ext\"&gt;&lt;/div&gt;​ &lt;/div&gt; &lt;div class=\"type-wrap logo\" v-else&gt; &lt;div class=\"fl key brand\"&gt;&#123;&#123;f.k&#125;&#125;&lt;/div&gt; &lt;div class=\"value logos\"&gt;​ &lt;ul class=\"logo-list\"&gt;​ &lt;li v-for=\"(option, j) in f.options\" v-if=\"option.image\"&gt;​ &lt;img :src=\"option.image\" /&gt;​ &lt;/li&gt;​ &lt;li style=\"text-align: center\" v-else&gt;​ &lt;a style=\"line-height: 30px; font-size: 12px\" href=\"#\"&gt;&#123;&#123;option.name&#125;&#125;&lt;/a&gt;​ &lt;/li&gt;​ &lt;/ul&gt;​ &lt;/div&gt; &lt;div class=\"fl ext\"&gt;​ &lt;a href=\"javascript:void(0);\" class=\"sui-btn\"&gt;多选&lt;/a&gt;​ &lt;/div&gt;​ &lt;/div&gt;​ \\ ​ 结果： ​ ​ # 3.生成规格参数过滤 ​ ## 3.1.谋而后动 ​ 有四个问题需要先思考清楚： ​ - 什么时候显示规格参数过滤？ ​ - 如何知道哪些规格需要过滤？ ​ - 要过滤的参数，其可选值是如何获取的？ ​ - 规格过滤的可选值，其数据格式怎样的？ ​ > 什么情况下显示有关规格参数的过滤？ ​ 如果用户尚未选择商品分类，或者聚合得到的分类数大于1，那么就没必要进行规格参数的聚合。因为不同分类的商品，其规格是不同的。 ​ 因此，我们在后台需要对聚合得到的商品分类数量进行判断，如果等于1，我们才继续进行规格参数的聚合。 ​ > 如何知道哪些规格需要过滤？ ​ 我们不能把数据库中的所有规格参数都拿来过滤。因为并不是所有的规格参数都可以用来过滤，参数的值是不确定的。 ​ 值的庆幸的是，我们在设计规格参数时，已经标记了某些规格可搜索，某些不可搜索。 ​ 因此，一旦商品分类确定，我们就可以根据商品分类查询到其对应的规格，从而知道哪些规格要进行搜索。 ​ > 要过滤的参数，其可选值是如何获取的？ ​ 虽然数据库中有所有的规格参数，但是不能把一切数据都用来供用户选择。 ​ 与商品分类和品牌一样，应该是从用户搜索得到的结果中聚合，得到与结果品牌的规格参数可选值。 ​ > 规格过滤的可选值，其数据格式怎样的？ ​ 我们直接看页面效果： ​ ​ 我们之前存储时已经将数据分段，恰好符合这里的需求 ​ ## 3.3.实战 ​ 接下来，我们就用代码实现刚才的思路。 ​ 总结一下，应该是以下几步： ​ - 1）用户搜索得到商品，并聚合出商品分类 ​ - 2）判断分类数量是否等于1，如果是则进行规格参数聚合 ​ - 3）先根据分类，查找可以用来搜索的规格 ​ - 4）对规格参数进行聚合 ​ - 5）将规格参数聚合结果整理后返回 ​ ### 3.3.1.扩展返回结果 ​ 返回结果中需要增加新数据，用来保存规格参数过滤条件。这里与前面的品牌和分类过滤的json结构类似： ​ \\1234567891011121314​ [​ &#123;​ \"k\":\"规格参数名\",​ \"options\":[\"规格参数值\",\"规格参数值\"]​ &#125;​ ]​ \\ ​ 因此，在java中我们用List&lt;Map&lt;String, String&gt;&gt;来表示。 ​ \\12345678910111213141516171819202122232425262728​ public class SearchResult extends PageResult&lt;Goods&gt;&#123;​ private List&lt;Category&gt; categories;// 分类过滤条件​ private List&lt;Brand&gt; brands; // 品牌过滤条件​ private List&lt;Map&lt;String,String&gt;&gt; specs; // 规格参数过滤条件​ public SearchResult(Long total, Integer totalPage, List&lt;Goods&gt; items,​ List&lt;Category&gt; categories, List&lt;Brand&gt; brands,​ List&lt;Map&lt;String,String&gt;&gt; specs) &#123;​ super(total, totalPage, items);​ this.categories = categories;​ this.brands = brands;​ this.specs = specs;​ &#125;​ &#125;​ \\ ​ ### 3.3.2.判断是否需要聚合 ​ 首先，在聚合得到商品分类后，判断分类的个数，如果是1个则进行规格聚合： ​ ​ 我们将聚合的代码抽取到了一个getSpecs方法中。 ​ ### 3.3.3.获取需要聚合的规格参数 ​ 然后，我们需要根据商品分类，查询所有可用于搜索的规格参数： ​ 要注意的是，这里我们需要根据id查询规格，而规格参数接口需要从商品微服务提供 ​ ### 3.3.4.聚合规格参数 ​ 因为规格参数保存时不做分词，因此其名称会自动带上一个.keyword后缀： ​ ​ ### 3.3.5.解析聚合结果 ​ ​ ### 3.3.6.最终的完整代码 ​ \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286​ @Service​ public class SearchService &#123;​ @Autowired​ private CategoryClient categoryClient;​ @Autowired​ private GoodsClient goodsClient;​ @Autowired​ private SpecificationClient specificationClient;​ @Autowired​ private GoodsRepository goodsRepository;​ @Autowired​ private BrandClient brandClient;​ @Autowired​ private ElasticsearchTemplate elasticsearchTemplate;​ private ObjectMapper mapper = new ObjectMapper();​ private static final Logger logger = LoggerFactory.getLogger(SearchService.class);​ public SearchResult search(SearchRequest request) &#123;​ String key = request.getKey();​ // 判断是否有搜索条件，如果没有，直接返回null。不允许搜索全部商品​ if (StringUtils.isBlank(key)) &#123;​ return null;​ &#125;​ // 构建查询条件​ NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();​ MatchQueryBuilder basicQuery = QueryBuilders.matchQuery(\"all\", key).operator(Operator.AND);​ queryBuilder.withQuery(basicQuery);​ // 通过sourceFilter设置返回的结果字段,我们只需要id、skus、subTitle​ queryBuilder.withSourceFilter(new FetchSourceFilter(new String[]&#123;\"id\", \"skus\", \"subTitle\"&#125;, null));​ // 分页​ searchWithPageAndSort(queryBuilder, request);​ // 聚合​ queryBuilder.addAggregation(AggregationBuilders.terms(\"brands\").field(\"cid3\"));​ queryBuilder.addAggregation(AggregationBuilders.terms(\"category\").field(\"brandId\"));​ // 执行查询获取结果集​ AggregatedPage&lt;Goods&gt; goodsPage = (AggregatedPage&lt;Goods&gt;) this.goodsRepository.search(queryBuilder.build());​ // 获取聚合结果集​ // 商品分类的聚合结果​ List&lt;Category&gt; categories =​ getCategoryAggResult(goodsPage.getAggregation(\"brands\"));​ // 品牌的聚合结果​ List&lt;Brand&gt; brands = getBrandAggResult(goodsPage.getAggregation(\"category\"));​ // 根据商品分类判断是否需要聚合​ List&lt;Map&lt;String, Object&gt;&gt; specs = new ArrayList&lt;&gt;();​ if (categories.size() == 1) &#123;​ // 如果商品分类只有一个才进行聚合，并根据分类与基本查询条件聚合​ specs = getSpec(categories.get(0).getId(), basicQuery);​ &#125;​ return new SearchResult(goodsPage.getTotalElements(), goodsPage.getTotalPages(), goodsPage.getContent(), categories, brands, specs);​ &#125;​ /**​ \\* 聚合出规格参数​ *​ \\* @param cid​ \\* @param query​ \\* @return​ */​ private List&lt;Map&lt;String, Object&gt;&gt; getSpec(Long cid, QueryBuilder query) &#123;​ try &#123;​ // 不管是全局参数还是sku参数，只要是搜索参数，都根据分类id查询出来​ List&lt;SpecParam&gt; params = this.specificationClient.querySpecParam(null, cid, true, null);​ List&lt;Map&lt;String, Object&gt;&gt; specs = new ArrayList&lt;&gt;();​ NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();​ queryBuilder.withQuery(query);​ // 聚合规格参数​ params.forEach(p -&gt; &#123;​ String key = p.getName();​ queryBuilder.addAggregation(AggregationBuilders.terms(key).field(\"specs.\" + key + \".keyword\"));​ &#125;);​ // 查询​ Map&lt;String, Aggregation&gt; aggs = this.elasticsearchTemplate.query(queryBuilder.build(),​ SearchResponse::getAggregations).asMap();​ // 解析聚合结果​ params.forEach(param -&gt; &#123;​ Map&lt;String, Object&gt; spec = new HashMap&lt;&gt;();​ String key = param.getName();​ spec.put(\"k\", key);​ StringTerms terms = (StringTerms) aggs.get(key);​ spec.put(\"options\", terms.getBuckets().stream().map(StringTerms.Bucket::getKeyAsString));​ specs.add(spec);​ &#125;);​ return specs;​ &#125; catch (​ Exception e)​ &#123;​ logger.error(\"规格聚合出现异常：\", e);​ return null;​ &#125;​ &#125;​ // 构建基本查询条件​ private void searchWithPageAndSort(NativeSearchQueryBuilder queryBuilder, SearchRequest request) &#123;​ // 准备分页参数​ int page = request.getPage();​ int size = request.getSize();​ // 1、分页​ queryBuilder.withPageable(PageRequest.of(page - 1, size));​ // 2、排序​ String sortBy = request.getSortBy();​ Boolean desc = request.getDescending();​ if (StringUtils.isNotBlank(sortBy)) &#123;​ // 如果不为空，则进行排序​ queryBuilder.withSort(SortBuilders.fieldSort(sortBy).order(desc ? SortOrder.DESC : SortOrder.ASC));​ &#125;​ &#125;​ // 解析品牌聚合结果​ private List&lt;Brand&gt; getBrandAggResult(Aggregation aggregation) &#123;​ try &#123;​ LongTerms brandAgg = (LongTerms) aggregation;​ List&lt;Long&gt; bids = new ArrayList&lt;&gt;();​ for (LongTerms.Bucket bucket : brandAgg.getBuckets()) &#123;​ bids.add(bucket.getKeyAsNumber().longValue());​ &#125;​ // 根据id查询品牌​ return this.brandClient.queryBrandByIds(bids);​ &#125; catch (Exception e) &#123;​ logger.error(\"品牌聚合出现异常：\", e);​ return null;​ &#125;​ &#125;​ // 解析商品分类聚合结果​ private List&lt;Category&gt; getCategoryAggResult(Aggregation aggregation) &#123;​ try &#123;​ List&lt;Category&gt; categories = new ArrayList&lt;&gt;();​ LongTerms categoryAgg = (LongTerms) aggregation;​ List&lt;Long&gt; cids = new ArrayList&lt;&gt;();​ for (LongTerms.Bucket bucket : categoryAgg.getBuckets()) &#123;​ cids.add(bucket.getKeyAsNumber().longValue());​ &#125;​ // 根据id查询分类名称​ List&lt;String&gt; names = this.categoryClient.queryNameByIds(cids);​ for (int i = 0; i &lt; names.size(); i++) &#123;​ Category c = new Category();​ c.setId(cids.get(i));​ c.setName(names.get(i));​ categories.add(c);​ &#125;​ return categories;​ &#125; catch (Exception e) &#123;​ logger.error(\"分类聚合出现异常：\", e);​ return null;​ &#125;​ &#125;​ &#125;​ \\ ​ ### 3.3.7.测试结果 ​ ​ ## 3.4.页面渲染 ​ ### 3.4.1.渲染规格过滤条件 ​ 首先把后台传递过来的specs添加到filters数组： ​ 要注意：分类、品牌的option选项是对象，里面有name属性，而specs中的option是简单的字符串，所以需要进行封装，变为相同的结构： ​ ​ 最后的结果： ​ ​ ### 3.4.2.展示或收起过滤条件 ​ 是不是感觉显示的太多了，我们可以通过按钮点击来展开和隐藏部分内容： ​ ​ 我们在data中定义变量，记录展开或隐藏的状态： ​ ​ 然后在按钮绑定点击事件，以改变show的取值： ​ ​ 在展示规格时，对show进行判断： ​ ​ OK！ ​ # 4.过滤条件的筛选 ​ 当我们点击页面的过滤项，要做哪些事情？ ​ - 把过滤条件保存在search对象中（watch监控到search变化后就会发送到后台） ​ - 在页面顶部展示已选择的过滤项 ​ - 把商品分类展示到顶部面包屑 ​ ## 4.1.保存过滤项 ​ ### 4.1.1.定义属性 ​ 我们把已选择的过滤项保存在search中： ​ ​ 要注意，在created构造函数中会对search进行初始化，所以要在构造函数中对filter进行初始化： ​ ​ search.filter是一个对象，结构： ​ \\12345678​ &#123;​ \"过滤项名\":\"过滤项值\"​ &#125;​ \\ ​ ### 4.1.2.绑定点击事件 ​ 给所有的过滤项绑定点击事件： ​ ​ 要注意，点击事件传2个参数： ​ - k：过滤项的key ​ - option：当前过滤项对象 ​ 在点击事件中，保存过滤项到selectedFilter： ​ \\1234567891011121314151617181920​ selectFilter(k, o)&#123;​ const obj = &#123;&#125;;​ Object.assign(obj, this.search);​ if(k === '分类' || k === '品牌')&#123;​ o = o.id;​ &#125;​ obj.filter[k] = o.name;​ this.search = obj;​ &#125;​ \\ ​ 另外，这里search对象中嵌套了filter对象，请求参数格式化时需要进行特殊处理，修改common.js中的一段代码： ​ ​ 我们刷新页面，点击后通过浏览器功能查看search.filter的属性变化： ​ ​ 并且，此时浏览器地址也发生了变化： ​ \\1234​ http://www.leyou.com/search.html?key=%E6%89%8B%E6%9C%BA&amp;page=1&amp;filter.%E5%93%81%E7%89%8C=2032&amp;filter.CPU%E5%93%81%E7%89%8C=%E6%B5%B7%E6%80%9D%EF%BC%88Hisilicon%EF%BC%89&amp;filter.CPU%E6%A0%B8%E6%95%B0=%E5%8D%81%E6%A0%B8​ \\ ​ 网络请求也正常发出： ​ ​ ## 4.2.后台添加过滤条件 ​ 既然请求已经发送到了后台，那接下来我们就在后台去添加这些条件： ​ ### 4.2.1.拓展请求对象 ​ 我们需要在请求类：SearchRequest中添加属性，接收过滤属性。过滤属性都是键值对格式，但是key不确定，所以用一个map来接收即可。 ​ ​ ### 4.2.2.添加过滤条件 ​ 目前，我们的基本查询是这样的： ​ ​ 现在，我们要把页面传递的过滤条件也进入进去。 ​ 因此不能在使用普通的查询，而是要用到BooleanQuery，基本结构是这样的： ​ \\123456789101112131415161718192021222324​ GET /heima/_search​ &#123;​ \"query\":&#123;​ \"bool\":&#123;​ \"must\":&#123; \"match\": &#123; \"title\": \"小米手机\",operator:\"and\"&#125;&#125;,​ \"filter\":&#123;​ \"range\":&#123;\"price\":&#123;\"gt\":2000.00,\"lt\":3800.00&#125;&#125;​ &#125;​ &#125;​ &#125;​ &#125;​ \\ ​ 所以，我们对原来的基本查询进行改造： ​ ​ 因为比较复杂，我们将其封装到一个方法中： ​ \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748​ // 构建基本查询条件​ private QueryBuilder buildBasicQueryWithFilter(SearchRequest request) &#123;​ BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();​ // 基本查询条件​ queryBuilder.must(QueryBuilders.matchQuery(\"all\", request.getKey()).operator(Operator.AND));​ // 过滤条件构建器​ BoolQueryBuilder filterQueryBuilder = QueryBuilders.boolQuery();​ // 整理过滤条件​ Map&lt;String, String&gt; filter = request.getFilter();​ for (Map.Entry&lt;String, String&gt; entry : filter.entrySet()) &#123;​ String key = entry.getKey();​ String value = entry.getValue();​ // 商品分类和品牌要特殊处理​ if (key != \"cid3\" &amp;&amp; key != \"brandId\") &#123;​ key = \"specs.\" + key + \".keyword\";​ &#125;​ // 字符串类型，进行term查询​ filterQueryBuilder.must(QueryBuilders.termQuery(key, value));​ &#125;​ // 添加过滤条件​ queryBuilder.filter(filterQueryBuilder);​ return queryBuilder;​ &#125;​ \\ ​ 其它不变。 ​ ## 4.3.页面测试 ​ 我们先不点击过滤条件，直接搜索手机： ​ ​ 总共184条 ​ 接下来，我们点击一个过滤条件： ​ ​ 得到的结果： ​ ​ # 5.页面展示选择的过滤项(作业) ​ ## 5.1.商品分类面包屑 ​ 当用户选择一个商品分类以后，我们应该在过滤模块的上方展示一个面包屑，把三级商品分类都显示出来。 ​ ​ 用户选择的商品分类就存放在search.filter中，但是里面只有第三级分类的id：cid3 ​ 我们需要根据它查询出所有三级分类的id及名称 ​ ### 5.1.1.提供查询分类接口 ​ 我们在商品微服务中提供一个根据三级分类id查询1~3级分类集合的方法： ​ > Controller ​ \\12345678910111213141516171819202122232425262728​ /**​ \\* 根据3级分类id，查询1~3级的分类​ \\* @param id​ \\* @return​ */​ @GetMapping(\"all/level\")​ public ResponseEntity&lt;List&lt;Category&gt;&gt; queryAllByCid3(@RequestParam(\"id\") Long id)&#123;​ List&lt;Category&gt; list = this.categoryService.queryAllByCid3(id);​ if (list == null || list.size() &lt; 1) &#123;​ return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(list);​ &#125;​ \\ ​ > Service ​ \\1234567891011121314​ public List&lt;Category&gt; queryAllByCid3(Long id) &#123;​ Category c3 = this.categoryMapper.selectByPrimaryKey(id);​ Category c2 = this.categoryMapper.selectByPrimaryKey(c3.getParentId());​ Category c1 = this.categoryMapper.selectByPrimaryKey(c2.getParentId());​ return Arrays.asList(c1,c2,c3);​ &#125;​ \\ ​ 测试： ​ ​ ### 5.1.2.页面展示面包屑 ​ 后台提供了接口，下面的问题是，我们在哪里去查询接口？ ​ 大家首先想到的肯定是当用户点击以后。 ​ 但是我们思考一下：用户点击以后，就会重新发起请求，页面刷新，那么你渲染的结果就没了。 ​ 因此，应该是在页面重新加载完毕后，此时因为过滤条件中加入了商品分类的条件，所以查询的结果中只有1个分类。 ​ 我们判断商品分类是否只有1个，如果是，则查询三级商品分类，添加到面包屑即可。 ​ ​ 渲染： ​ ​ 刷新页面： ​ ​ ## 5.2.其它过滤项 ​ 接下来，我们需要在页面展示用户已选择的过滤项，如图： ​ ​ 我们知道，所有已选择过滤项都保存在search.filter中，因此在页面遍历并展示即可。 ​ 但这里有个问题，filter中数据的格式： ​ ​ 基本有四类数据： ​ - 商品分类：这个不需要展示，分类展示在面包屑位置 ​ - 品牌：这个要展示，但是其key和值不合适，我们不能显示一个id在页面。需要找到其name值 ​ - 数值类型规格：这个展示的时候，需要把单位查询出来 ​ - 非数值类型规格：这个直接展示其值即可 ​ 因此，我们在页面上这样处理： ​ \\12345678910111213141516​ &lt;!--已选择过滤项--&gt;​ &lt;ul class=\"tags-choose\"&gt;​ &lt;li class=\"tag\" v-for=\"(v,k) in search.filter\" v-if=\"k !== 'cid3'\" :key=\"k\"&gt;​ &#123;&#123;k === 'brandId' ? '品牌' : k&#125;&#125;:&lt;span style=\"color: red\"&gt;&#123;&#123;getFilterValue(k,v)&#125;&#125;&lt;/span&gt;&lt;/span&gt;​ &lt;i class=\"sui-icon icon-tb-close\"&gt;&lt;/i&gt;​ &lt;/li&gt;​ &lt;/ul&gt;​ \\ ​ - 判断如果 k === &#39;cid3&#39;说明是商品分类，直接忽略 ​ - 判断k === &#39;brandId&#39;说明是品牌，页面显示品牌，其它规格则直接显示k的值 ​ - 值的处理比较复杂，我们用一个方法getFilterValue(k,v)来处理，调用时把k和v都传递 ​ 方法内部： ​ \\12345678910111213141516171819202122232425262728​ getFilterValue(k,v)&#123;​ // 如果没有过滤参数，我们跳过展示​ if(!this.filters || this.filters.length === 0)&#123;​ return null;​ &#125;​ let filter = null;​ // 判断是否是品牌​ if(k === 'brandId')&#123;​ // 返回品牌名称​ return this.filters.find(f =&gt; f.k === 'brandId').options[0].name;​ &#125;​ return v;​ &#125;​ \\ ​ 然后刷新页面，即可看到效果： ​ ​ ## 5.3.隐藏已经选择的过滤项 ​ 现在，我们已经实现了已选择过滤项的展示，但是你会发现一个问题： ​ 已经选择的过滤项，在过滤列表中依然存在： ​ ​ 这些已经选择的过滤项，应该从列表中移除。 ​ 怎么做呢？ ​ 你必须先知道用户选择了什么。用户选择的项保存在search.filter中： ​ ​ 我们可以编写一个计算属性，把filters中的 已经被选择的key过滤掉： ​ \\1234567891011121314151617181920212223242526​ computed:&#123;​ remainFilters()&#123;​ const keys = Object.keys(this.search.filter);​ if(this.search.filter.cid3)&#123;​ keys.push(\"cid3\")​ &#125;​ if(this.search.filter.brandId)&#123;​ keys.push(\"brandId\")​ &#125;​ return this.filters.filter(f =&gt; !keys.includes(f.k));​ &#125;​ &#125;​ \\ ​ 然后页面不再直接遍历filters，而是遍历remainFilters ​ ​ 刷新页面： ​ ​ 最后发现，还剩下一堆没选过的。但是都只有一个可选项，此时再过滤没有任何意义，应该隐藏，所以，在刚才的过滤条件中，还应该添加一条：如果只剩下一个可选项，不显示 ​ ​ ​ # 6.取消过滤项（作业） ​ 我们能够看到，每个过滤项后面都有一个小叉，当点击后，应该取消对应条件的过滤。 ​ 思路非常简单： ​ - 给小叉绑定点击事件 ​ - 点击后把过滤项从search.filter中移除，页面会自动刷新，OK ​ > 绑定点击事件： ​ ​ 绑定点击事件时，把k传递过去，方便删除 ​ > 删除过滤项 ​ \\12345678​ removeFilter(k)&#123;​ this.search.filter[k] = null;​ &#125;​ \\ ​ # 7.优化 ​ 搜索系统需要优化的点： ​ - 查询规格参数部分可以添加缓存 ​ - 聚合计算interval变化频率极低，所以可以设计为定时任务计算（周期为天），然后缓存起来。 ​ - elasticsearch本身有查询缓存，可以不进行优化 ​ - 商品图片应该采用缩略图，减少流量，提高页面加载速度 ​ - 图片采用延迟加载 ​ - 图片还可以采用CDN服务器 ​ - sku信息应该在页面异步加载，而不是放到索引库","categories":[],"tags":[],"keywords":[]},{"title":"elasticsearch基础学习二","slug":"elasticsearch基础学习二","date":"2019-05-03T03:15:39.000Z","updated":"2019-05-03T03:19:10.033Z","comments":true,"path":"2019/05/03/elasticsearch基础学习二/","link":"","permalink":"https://mr8649.github.io/2019/05/03/elasticsearch基础学习二/","excerpt":"","text":"# 0.学习目标 - 独立编写数据导入功能 - 独立实现基本搜索 - 独立实现页面分页 - 独立实现结果排序 # 1.索引库数据导入 昨天我们学习了Elasticsearch的基本应用。今天就学以致用，搭建搜索微服务，实现搜索功能。 ## 1.1.创建搜索服务 创建module： Pom文件： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"​ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"​ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;​ &lt;parent&gt;​ &lt;artifactId&gt;leyou&lt;/artifactId&gt;​ &lt;groupId&gt;com.leyou.parent&lt;/groupId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;/parent&gt;​ &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;​ &lt;groupId&gt;com.leyou.search&lt;/groupId&gt;​ &lt;artifactId&gt;leyou-search&lt;/artifactId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;dependencies&gt;​ &lt;!-- web --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;!-- elasticsearch --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;!-- eureka --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;!-- feign --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;/dependencies&gt;&lt;/project&gt;\\ application.yml： \\12345678910111213141516171819202122232425262728293031323334353637383940server: port: 8083spring: application:​ name: search-service data:​ elasticsearch:​ cluster-name: elasticsearch​ cluster-nodes: 192.168.56.101:9300eureka: client:​ service-url:​ defaultZone: http://127.0.0.1:10086/eureka instance:​ lease-renewal-interval-in-seconds: 5 # 每隔5秒发送一次心跳​ lease-expiration-duration-in-seconds: 10 # 10秒不发送就过期​ prefer-ip-address: true​ ip-address: 127.0.0.1​ instance-id: $&#123;spring.application.name&#125;:$&#123;server.port&#125;\\ 启动类： \\123456789101112131415161718@SpringBootApplication@EnableDiscoveryClient@EnableFeignClientspublic class LySearchService &#123;​ public static void main(String[] args) &#123;​ SpringApplication.run(LySearchService.class, args);​ &#125;&#125;\\ ## 1.2.索引库数据格式分析 接下来，我们需要商品数据导入索引库，便于用户搜索。 那么问题来了，我们有SPU和SKU，到底如何保存到索引库？ ### 1.2.1.以结果为导向 大家来看下搜索结果页： 可以看到，每一个搜索结果都有至少1个商品，当我们选择大图下方的小图，商品会跟着变化。 因此，搜索的结果是SPU，即多个SKU的集合。 既然搜索的结果是SPU，那么我们索引库中存储的应该也是SPU，但是却需要包含SKU的信息。 ### 1.2.2.需要什么数据 再来看看页面中有什么数据： 直观能看到的：图片、价格、标题、副标题 暗藏的数据：spu的id，sku的id 另外，页面还有过滤条件： 这些过滤条件也都需要存储到索引库中，包括： 商品分类、品牌、可用来搜索的规格参数等 综上所述，我们需要的数据格式有： spuId、SkuId、商品分类id、品牌id、图片、价格、商品的创建时间、sku信息集、可搜索的规格参数 ### 1.2.3.最终的数据结构 我们创建一个类，封装要保存到索引库的数据，并设置映射属性： \\1234567891011121314151617181920212223242526272829303132333435363738@Document(indexName = \"goods\", type = \"docs\", shards = 1, replicas = 0)public class Goods &#123;​ @Id​ private Long id; // spuId​ @Field(type = FieldType.Text, analyzer = \"ik_max_word\")​ private String all; // 所有需要被搜索的信息，包含标题，分类，甚至品牌​ @Field(type = FieldType.Keyword, index = false)​ private String subTitle;// 卖点​ private Long brandId;// 品牌id​ private Long cid1;// 1级分类id​ private Long cid2;// 2级分类id​ private Long cid3;// 3级分类id​ private Date createTime;// 创建时间​ private List&lt;Long&gt; price;// 价格​ @Field(type = FieldType.Keyword, index = false)​ private String skus;// sku信息的json结构​ private Map&lt;String, Object&gt; specs;// 可搜索的规格参数，key是参数名，值是参数值&#125;\\ 一些特殊字段解释： - all：用来进行全文检索的字段，里面包含标题、商品分类信息 - price：价格数组，是所有sku的价格集合。方便根据价格进行筛选过滤 - skus：用于页面展示的sku信息，不索引，不搜索。包含skuId、image、price、title字段 - specs：所有规格参数的集合。key是参数名，值是参数值。 例如：我们在specs中存储 内存：4G,6G，颜色为红色，转为json就是： \\1234567891011121314 &#123;​ \"specs\":&#123;​ \"内存\":[4G,6G],​ \"颜色\":\"红色\"​ &#125; &#125; \\ 当存储到索引库时，elasticsearch会处理为两个字段： - specs.内存：[4G,6G] - specs.颜色：红色 另外， 对于字符串类型，还会额外存储一个字段，这个字段不会分词，用作聚合。 - specs.颜色.keyword：红色 ## 1.3.商品微服务提供接口 索引库中的数据来自于数据库，我们不能直接去查询商品的数据库，因为真实开发中，每个微服务都是相互独立的，包括数据库也是一样。所以我们只能调用商品微服务提供的接口服务。 先思考我们需要的数据： - SPU信息 - SKU信息 - SPU的详情 - 商品分类名称（拼接all字段） 再思考我们需要哪些服务： - 第一：分批查询spu的服务，已经写过。 - 第二：根据spuId查询sku的服务，已经写过 - 第三：根据spuId查询SpuDetail的服务，已经写过 - 第四：根据商品分类id，查询商品分类名称，没写过 - 第五：根据商品品牌id，查询商品的品牌，没写过 因此我们需要额外提供一个查询商品分类名称的接口。 ### 1.3.1.商品分类名称查询 controller： \\12345678910111213141516171819202122232425262728/** \\* 根据商品分类id查询名称 \\* @param ids 要查询的分类id集合 \\* @return 多个名称的集合 */@GetMapping(\"names\")public ResponseEntity&lt;List&lt;String&gt;&gt; queryNameByIds(@RequestParam(\"ids\") List&lt;Long&gt; ids)&#123;​ List&lt;String &gt; list = this.categoryService.queryNameByIds(ids);​ if (list == null || list.size() &lt; 1) &#123;​ return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(list);&#125;\\ 测试： ### 1.3.2.编写FeignClient #### 1.3.2.1.问题展现 操作leyou-search工程 现在，我们要在搜索微服务调用商品微服务的接口。 第一步要引入商品微服务依赖：leyou-item-interface。 \\1234567891011121314&lt;!--商品微服务--&gt;&lt;dependency&gt;​ &lt;groupId&gt;com.leyou.service&lt;/groupId&gt;​ &lt;artifactId&gt;ly-item-interface&lt;/artifactId&gt;​ &lt;version&gt;$&#123;leyou.latest.version&#125;&lt;/version&gt;&lt;/dependency&gt;\\ 第二步，编写FeignClient \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566@FeignClient(value = \"item-service\")@RequestMapping(\"/goods\")public interface GoodsClient &#123;​ /**​ \\* 分页查询商品​ \\* @param page​ \\* @param rows​ \\* @param saleable​ \\* @param key​ \\* @return​ */​ @GetMapping(\"/spu/page\")​ ResponseEntity&lt;PageResult&lt;SpuBo&gt;&gt; querySpuByPage(​ @RequestParam(value = \"page\", defaultValue = \"1\") Integer page,​ @RequestParam(value = \"rows\", defaultValue = \"5\") Integer rows,​ @RequestParam(value = \"saleable\", defaultValue = \"true\") Boolean saleable,​ @RequestParam(value = \"key\", required = false) String key);​ /**​ \\* 根据spu商品id查询详情​ \\* @param id​ \\* @return​ */​ @GetMapping(\"/spu/detail/&#123;id&#125;\")​ ResponseEntity&lt;SpuDetail&gt; querySpuDetailById(@PathVariable(\"id\") Long id);​ /**​ \\* 根据spu的id查询sku​ \\* @param id​ \\* @return​ */​ @GetMapping(\"sku/list\")​ ResponseEntity&lt;List&lt;Sku&gt;&gt; querySkuBySpuId(@RequestParam(\"id\") Long id);&#125;\\ 以上的这些代码直接从商品微服务中拷贝而来，完全一致。差别就是没有方法的具体实现。大家觉得这样有没有问题？ 而FeignClient代码遵循SpringMVC的风格，因此与商品微服务的Controller完全一致。这样就存在一定的问题： - 代码冗余。尽管不用写实现，只是写接口，但服务调用方要写与服务controller一致的代码，有几个消费者就要写几次。 - 增加开发成本。调用方还得清楚知道接口的路径，才能编写正确的FeignClient。 #### 1.3.2.2.解决方案 因此，一种比较友好的实践是这样的： - 我们的服务提供方不仅提供实体类，还要提供api接口声明 - 调用方不用字自己编写接口方法声明，直接继承提供方给的Api接口即可， 第一步：服务的提供方在leyou-item-interface中提供API接口，并编写接口声明： 商品分类服务接口： \\123456789101112@RequestMapping(\"category\")public interface CategoryApi &#123;​ @GetMapping(\"names\")​ ResponseEntity&lt;List&lt;String&gt;&gt; queryNameByIds(@RequestParam(\"ids\") List&lt;Long&gt; ids);&#125;\\ 商品服务接口，返回值不再使用ResponseEntity： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364@RequestMapping(\"/goods\")public interface GoodsApi &#123;​ /**​ \\* 分页查询商品​ \\* @param page​ \\* @param rows​ \\* @param saleable​ \\* @param key​ \\* @return​ */​ @GetMapping(\"/spu/page\")​ PageResult&lt;SpuBo&gt; querySpuByPage(​ @RequestParam(value = \"page\", defaultValue = \"1\") Integer page,​ @RequestParam(value = \"rows\", defaultValue = \"5\") Integer rows,​ @RequestParam(value = \"saleable\", defaultValue = \"true\") Boolean saleable,​ @RequestParam(value = \"key\", required = false) String key);​ /**​ \\* 根据spu商品id查询详情​ \\* @param id​ \\* @return​ */​ @GetMapping(\"/spu/detail/&#123;id&#125;\")​ SpuDetail querySpuDetailById(@PathVariable(\"id\") Long id);​ /**​ \\* 根据spu的id查询sku​ \\* @param id​ \\* @return​ */​ @GetMapping(\"sku/list\")​ List&lt;Sku&gt; querySkuBySpuId(@RequestParam(\"id\") Long id);&#125;\\ 需要引入springMVC及leyou-common的依赖： \\12345678910111213141516171819202122&lt;dependency&gt;​ &lt;groupId&gt;org.springframework&lt;/groupId&gt;​ &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;​ &lt;version&gt;5.0.6.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;​ &lt;groupId&gt;com.leyou.common&lt;/groupId&gt;​ &lt;artifactId&gt;leyou-common&lt;/artifactId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt;\\ 第二步：在调用方leyou-search中编写FeignClient，但不要写方法声明了，直接继承leyou-item-interface提供的api接口： 商品的FeignClient： \\12345678@FeignClient(value = \"item-service\")public interface GoodsClient extends GoodsApi &#123;&#125;\\ 商品分类的FeignClient： \\12345678@FeignClient(value = \"item-service\")public interface CategoryClient extends CategoryApi &#123;&#125;\\ 是不是简单多了？ 项目结构： #### 1.3.2.3.测试 在leyou-search中引入springtest依赖： \\123456789101112&lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;​ &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;\\ 创建测试类： 在接口上按快捷键：Ctrl + Shift + T 测试代码： \\123456789101112131415161718192021222324@RunWith(SpringRunner.class)@SpringBootTest(classes = LeyouSearchApplication.class)public class CategoryClientTest &#123;​ @Autowired​ private CategoryClient categoryClient;​ @Test​ public void testQueryCategories() &#123;​ List&lt;String&gt; names = this.categoryClient.queryNameByIds(Arrays.asList(1L, 2L, 3L));​ names.forEach(System.out::println);​ &#125;&#125;\\ 结果： ## 1.4.导入数据 导入数据只做一次,以后的更新删除等操作通过消息队列来操作索引库 ### 1.4.1.创建GoodsRepository java代码： \\123456public interface GoodsRepository extends ElasticsearchRepository&lt;Goods, Long&gt; &#123;&#125;\\ ### 1.4.2.创建索引 我们新建一个测试类，在里面进行数据的操作： \\1234567891011121314151617181920212223242526272829303132@RunWith(SpringRunner.class)@SpringBootTest(classes = LeyouSearchApplication.class)public class ElasticsearchTest &#123;​ @Autowired​ private GoodsRepository goodsRepository;​ @Autowired​ private ElasticsearchTemplate elasticsearchTemplate;​ @Test​ public void createIndex()&#123;​ // 创建索引​ this.elasticsearchTemplate.createIndex(Goods.class);​ // 配置映射​ this.elasticsearchTemplate.putMapping(Goods.class);​ &#125;&#125;\\ 通过kibana查看： ### 1.4.3.导入数据 导入数据其实就是查询数据，然后把查询到的Spu转变为Goods来保存，因此我们先编写一个SearchService，然后在里面定义一个方法， 把Spu转为Goods \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136@Servicepublic class SearchService &#123;​ @Autowired​ private CategoryClient categoryClient;​ @Autowired​ private GoodsClient goodsClient;​ @Autowired​ private SpecificationClient specificationClient;​ private ObjectMapper mapper = new ObjectMapper();​ public Goods buildGoods(Spu spu) throws IOException &#123;​ Goods goods = new Goods();​ // 查询商品分类名称​ List&lt;String&gt; names = this.categoryClient.queryNameByIds(Arrays.asList(spu.getCid1(), spu.getCid2(), spu.getCid3()));​ // 查询sku​ List&lt;Sku&gt; skus = this.goodsClient.querySkuBySpuId(spu.getId());​ // 查询详情​ SpuDetail spuDetail = this.goodsClient.querySpuDetailById(spu.getId());​ // 查询规格参数​ List&lt;SpecParam&gt; params = this.specificationClient.querySpecParam(null, spu.getCid3(), true, null);​ // 处理sku，仅封装id、价格、标题、图片，并获得价格集合​ List&lt;Long&gt; prices = new ArrayList&lt;&gt;();​ List&lt;Map&lt;String, Object&gt;&gt; skuList = new ArrayList&lt;&gt;();​ skus.forEach(sku -&gt; &#123;​ prices.add(sku.getPrice());​ Map&lt;String, Object&gt; skuMap = new HashMap&lt;&gt;();​ skuMap.put(\"id\", sku.getId());​ skuMap.put(\"title\", sku.getTitle());​ skuMap.put(\"price\", sku.getPrice());​ skuMap.put(\"image\", StringUtils.isBlank(sku.getImages()) ? \"\" : StringUtils.split(sku.getImages(), \",\")[0]);​ skuList.add(skuMap);​ &#125;);​ // 处理规格参数​ Map&lt;String, Object&gt; genericSpecs = mapper.readValue(spuDetail.getGenericSpec(), new TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;​ &#125;);​ Map&lt;String, Object&gt; specialSpecs = mapper.readValue(spuDetail.getSpecialSpec(), new TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;​ &#125;);​ // 获取可搜索的规格参数​ Map&lt;String, Object&gt; searchSpec = new HashMap&lt;&gt;();​ // 过滤规格模板，把所有可搜索的信息保存到Map中​ Map&lt;String, Object&gt; specMap = new HashMap&lt;&gt;();​ params.forEach(p -&gt; &#123;​ if (p.getSearching()) &#123;​ if (p.getGeneric()) &#123;​ String value = genericSpecs.get(p.getId().toString()).toString();​ if(p.getNumeric())&#123;​ value = chooseSegment(value, p);​ &#125;​ specMap.put(p.getName(), StringUtils.isBlank(value) ? \"其它\" : value);​ &#125; else &#123;​ specMap.put(p.getName(), specialSpecs.get(p.getId().toString()));​ &#125;​ &#125;​ &#125;);​ goods.setId(spu.getId());​ goods.setSubTitle(spu.getSubTitle());​ goods.setBrandId(spu.getBrandId());​ goods.setCid1(spu.getCid1());​ goods.setCid2(spu.getCid2());​ goods.setCid3(spu.getCid3());​ goods.setCreateTime(spu.getCreateTime());​ goods.setAll(spu.getTitle() + \" \" + StringUtils.join(names, \" \"));​ goods.setPrice(prices);​ goods.setSkus(mapper.writeValueAsString(skuList));​ goods.setSpecs(specMap);​ return goods;​ &#125; &#125;\\ 因为过滤参数中有一类比较特殊，就是数值区间： 所以我们在存入时要进行处理： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354private String chooseSegment(String value, SpecParam p) &#123;​ double val = NumberUtils.toDouble(value);​ String result = \"其它\";​ // 保存数值段​ for (String segment : p.getSegments().split(\",\")) &#123;​ String[] segs = segment.split(\"-\");​ // 获取数值范围​ double begin = NumberUtils.toDouble(segs[0]);​ double end = Double.MAX_VALUE;​ if(segs.length == 2)&#123;​ end = NumberUtils.toDouble(segs[1]);​ &#125;​ // 判断是否在范围内​ if(val &gt;= begin &amp;&amp; val &lt; end)&#123;​ if(segs.length == 1)&#123;​ result = segs[0] + p.getUnit() + \"以上\";​ &#125;else if(begin == 0)&#123;​ result = segs[1] + p.getUnit() + \"以下\";​ &#125;else&#123;​ result = segment + p.getUnit();​ &#125;​ break;​ &#125;​ &#125;​ return result;&#125;\\ 然后编写一个测试类，循环查询Spu，然后调用IndexService中的方法，把SPU变为Goods，然后写入索引库： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960@Testpublic void loadData()&#123;​ // 创建索引​ this.elasticsearchTemplate.createIndex(Goods.class);​ // 配置映射​ this.elasticsearchTemplate.putMapping(Goods.class);​ int page = 1;​ int rows = 100;​ int size = 0;​ do &#123;​ // 查询分页数据​ PageResult&lt;SpuBo&gt; result = this.goodsClient.querySpuByPage(page, rows, true, null);​ List&lt;SpuBo&gt; spus = result.getItems();​ size = spus.size();​ // 创建Goods集合​ List&lt;Goods&gt; goodsList = new ArrayList&lt;&gt;();​ // 遍历spu​ for (SpuBo spu : spus) &#123;​ try &#123;​ Goods goods = this.searchService.buildGoods(spu);​ goodsList.add(goods);​ &#125; catch (Exception e) &#123;​ break;​ &#125;​ &#125;​ this.goodsRepository.saveAll(goodsList);​ page++;​ &#125; while (size == 100);&#125;\\ 通过kibana查询， 可以看到数据成功导入： # 2.实现基本搜索 ## 2.1.页面分析 ### 2.1.1.页面跳转 在首页的顶部，有一个输入框： 当我们输入任何文本，点击搜索，就会跳转到搜索页search.html了： 并且将搜索关键字以请求参数携带过来： 我们打开search.html，在最下面会有提前定义好的Vue实例： \\123456789101112131415161718192021222324&lt;script type=\"text/javascript\"&gt;​ var vm = new Vue(&#123;​ el: \"#searchApp\",​ data: &#123;​ &#125;,​ components:&#123;​ // 加载页面顶部组件​ lyTop: () =&gt; import(\"./js/pages/top.js\")​ &#125;​ &#125;);&lt;/script&gt;\\ 这个Vue实例中，通过import导入的方式，加载了另外一个js：top.js并作为一个局部组件。top其实是页面顶部导航组件，我们暂时不管 ### 2.1.2.发起异步请求 要想在页面加载后，就展示出搜索结果。我们应该在页面加载时，获取地址栏请求参数，并发起异步请求，查询后台数据，然后在页面渲染。 我们在data中定义一个对象，记录请求的参数： \\123456789101112data: &#123;​ search:&#123;​ key:\"\", // 搜索页面的关键字​ &#125;&#125;\\ 我们通过钩子函数created，在页面加载时获取请求参数，并记录下来。 \\12345678910111213141516171819202122232425262728created()&#123;​ // 判断是否有请求参数​ if(!location.search)&#123;​ return;​ &#125;​ // 将请求参数转为对象​ const search = ly.parse(location.search.substring(1));​ // 记录在data的search对象中​ this.search = search;​ ​ // 发起请求，根据条件搜索​ this.loadData();&#125;\\ 然后发起请求，搜索数据。 \\123456789101112131415161718methods: &#123;​ loadData()&#123;​ // ly.http.post(\"/search/page\", ly.stringify(this.search)).then(resp=&gt;&#123;​ ly.http.post(\"/search/page\", this.search).then(resp=&gt;&#123;​ console.log(resp);​ &#125;);​ &#125;&#125;\\ - 我们这里使用ly是common.js中定义的工具对象。 - 这里使用的是post请求，这样可以携带更多参数，并且以json格式发送 在leyou-gateway中，添加允许信任域名： 并添加网关映射： 刷新页面试试： 因为后台没有提供接口，所以无法访问。没关系，接下来我们实现后台接口 ## 2.2.后台提供搜索接口 ### 2.2.1.controller 首先分析几个问题： - 请求方式：Post - 请求路径：/search/page，不过前面的/search应该是网关的映射路径，因此真实映射路径page，代表分页查询 - 请求参数：json格式，目前只有一个属性：key-搜索关键字，但是搜索结果页一定是带有分页查询的，所以将来肯定会有page属性，因此我们可以用一个对象来接收请求的json数据： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152 public class SearchRequest &#123;​ private String key;// 搜索条件​ private Integer page;// 当前页​ private static final Integer DEFAULT_SIZE = 20;// 每页大小，不从页面接收，而是固定大小​ private static final Integer DEFAULT_PAGE = 1;// 默认页​ public String getKey() &#123;​ return key;​ &#125;​ public void setKey(String key) &#123;​ this.key = key;​ &#125;​ public Integer getPage() &#123;​ if(page == null)&#123;​ return DEFAULT_PAGE;​ &#125;​ // 获取页码时做一些校验，不能小于1​ return Math.max(DEFAULT_PAGE, page);​ &#125;​ public void setPage(Integer page) &#123;​ this.page = page;​ &#125;​ public Integer getSize() &#123;​ return DEFAULT_SIZE;​ &#125; &#125; \\ - 返回结果：作为分页结果，一般都两个属性：当前页数据、总条数信息，我们可以使用之前定义的PageResult类 代码： \\123456789101112131415161718192021222324252627282930313233343536373839404142@RestController@RequestMappingpublic class SearchController &#123;​ @Autowired​ private SearchService searchService;​ /**​ \\* 搜索商品​ *​ \\* @param request​ \\* @return​ */​ @PostMapping(\"page\")​ public ResponseEntity&lt;PageResult&lt;Goods&gt;&gt; search(@RequestBody SearchRequest request) &#123;​ PageResult&lt;Goods&gt; result = this.searchService.search(request);​ if (result == null) &#123;​ return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(result);​ &#125;&#125;\\ ### 2.2.2.service \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364@Servicepublic class SearchService &#123;​ @Autowired​ private GoodsRepository goodsRepository;​ public PageResult&lt;Goods&gt; search(SearchRequest request) &#123;​ String key = request.getKey();​ // 判断是否有搜索条件，如果没有，直接返回null。不允许搜索全部商品​ if (StringUtils.isBlank(key)) &#123;​ return null;​ &#125;​ // 构建查询条件​ NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();​ ​ // 1、对key进行全文检索查询​ queryBuilder.withQuery(QueryBuilders.matchQuery(\"all\", key).operator(Operator.AND));​ ​ // 2、通过sourceFilter设置返回的结果字段,我们只需要id、skus、subTitle​ queryBuilder.withSourceFilter(new FetchSourceFilter(​ new String[]&#123;\"id\",\"skus\",\"subTitle\"&#125;, null));​ ​ // 3、分页​ // 准备分页参数​ int page = request.getPage();​ int size = request.getSize();​ queryBuilder.withPageable(PageRequest.of(page - 1, size));​ // 4、查询，获取结果​ Page&lt;Goods&gt; pageInfo = this.goodsRepository.search(queryBuilder.build());​ // 封装结果并返回​ return new PageResult&lt;&gt;(goodsPage.getTotalElements(), goodsPage.getTotalPages(), goodsPage.getContent());​ &#125;&#125;\\ 注意点：我们要设置SourceFilter，来选择要返回的结果，否则返回一堆没用的数据，影响查询效率。 ### 2.2.3.测试 刷新页面测试： 数据是查到了，但是因为我们只查询部分字段，所以结果json 数据中有很多null，这很不优雅。 解决办法很简单，在leyou-search的application.yml中添加一行配置，json处理时忽略空值： \\12345678spring: jackson:​ default-property-inclusion: non_null # 配置json处理时忽略空值\\ 结果： ## 2.3.页面渲染 页面已经拿到了结果，接下来就要渲染样式了。 ### 2.3.1.保存搜索结果 首先，在data中定义属性，保存搜索的结果： 在loadData的异步查询中，将结果赋值给goodsList： ### 2.3.2.循环展示商品 在search.html的中部，有一个div，用来展示所有搜索到的商品： 可以看到，div中有一个无序列表ul，内部的每一个li就是一个商品spu了。 我们删除多余的，只保留一个li，然后利用vue的循环来展示搜索到的结果： ### 2.3.3.多sku展示 #### 2.3.3.1.分析 接下来展示具体的商品信息，来看图： 这里我们可以发现，一个商品位置，是多个sku的信息集合。当用户鼠标选择某个sku，对应的图片、价格、标题会随之改变！ 我们先来实现sku的选择，才能去展示不同sku的数据。 可以看到，在列表中默认第一个是被选中的，那我们就需要做两件事情： - 在搜索到数据时，先默认把第一个sku作为被选中的，记录下来 - 记录当前被选中的是哪一个sku，记录在哪里比较合适呢？显然是遍历到的goods对象自己内部，因为每一个goods都会有自己的sku信息。 #### 2.3.3.2.初始化sku 查询出的结果集skus是一个json类型的字符串，不是js对象 我们在查询成功的回调函数中，对goods进行遍历，把skus转化成对象，并添加一个selected属性保存被选中的sku： #### 2.3.3.3.多sku图片列表 接下来，我们看看多个sku的图片列表位置： 看到又是一个无序列表，这里我们也一样删掉多余的，保留一个li，需要注意选中的项有一个样式类：selected 我们的代码： \\12345678910111213141516&lt;!--多sku图片列表--&gt;&lt;ul class=&quot;skus&quot;&gt;​ &lt;li :class=&quot;&#123;selected: sku.id == goods.selected.id&#125;&quot; v-for=&quot;sku in goods.skus&quot; :key=&quot;sku.id&quot;​ @mouseEnter=&quot;goods.selected=sku&quot;&gt;​ &lt;img :src=&quot;sku.image&quot;&gt;​ &lt;/li&gt;&lt;/ul&gt;\\ 注意： - class样式通过 goods.selected的id是否与当前sku的id一致来判断 - 绑定了鼠标事件，鼠标进入后把当前sku赋值到goods.selected ### 2.3.4.展示sku其它属性 现在，我们已经可以通过goods.selected获取用户选中的sku，那么我们就可以在页面展示了： 刷新页面： 看起来很完美是吧！ 但其实有一些瑕疵 ### 2.3.5.几个问题 #### 2.3.5.1.价格显示的是分 首先价格显示就不正确，我们数据库中存放的是以分为单位，所以这里要格式化。 好在我们之前common.js中定义了工具类，可以帮我们转换。 改造： 结果报错： 为啥？ 因为在Vue范围内使用任何变量，都会默认去Vue实例中寻找，我们使用ly，但是Vue实例中没有这个变量。所以解决办法就是把ly记录到Vue实例： 然后刷新页面： #### 2.3.5.2.标题过长 标题内容太长了，已经无法完全显示，怎么办？ 截取一下： 最好在加个悬停展示所有内容的效果 #### 2.3.5.3.sku点击不切换 还有一个错误比较隐蔽，不容易被发现。我们点击sku 的图片列表，发现没有任何变化。 这不科学啊，为什么？ 通过控制台观察，发现数据其实是变化了，但是Vue却没有重新渲染视图。 这是因为Vue的自动渲染是基于对象的属性变化的。比如页面使用GoodsList进行渲染，如果GoodsList变化，或者其内部的任何子对象变化，都会Vue感知，从而从新渲染页面。 然而，这一切有一个前提，那就是当你第一次渲染时，对象中有哪些属性，Vue就只监视这些属性，后来添加的属性发生改变，是不会被监视到的。 而我们的goods对象中，本身是没有selected属性的，是我们后来才添加进去的： 这段代码稍微改造一下，即可： 也就是说，我们先把selected属性初始化完毕，然后才把整个对象赋值给goodsList，这样，goodsList已初始化时就有selected属性，以后就会被正常监控了。 # 3.页面分页效果 刚才的查询中，我们默认了查询的页码和每页大小，因此所有的分页功能都无法使用，接下来我们一起看看分页功能条该如何制作。 这里要分两步， - 第一步：如何生成分页条 - 第二步：点击分页按钮，我们做什么 ## 3.1.如何生成分页条 先看下页面关于分页部分的代码： 可以看到所有的分页栏内容都是写死的。 ### 3.1.1.需要的数据 分页数据应该是根据总页数、当前页、总条数等信息来计算得出。 - 当前页：肯定是由页面来决定的，点击按钮会切换到对应的页 - 总页数：需要后台传递给我们 - 总条数：需要后台传递给我们 我们首先在data中记录下这几个值：page-当前页，total-总条数，totalPage-总页数 \\12345678910111213141516171819202122data: &#123;​ ly,​ search:&#123;​ key: \"\",​ page: 1​ &#125;,​ goodsList:[], // 接收搜索得到的结果​ total: 0, // 总条数​ totalPage: 0 // 总页数&#125;\\ 因为page是搜索条件之一，所以记录在search对象中。 要注意：我们在created钩子函数中，会读取url路径的参数，然后赋值给search。如果是第一次请求页面，page是不存在的。因此为了避免page被覆盖，我们应该这么做： 不过，这个时候我们自己的search对象中的值就可有可无了 ### 3.1.2.后台提供数据 后台返回的结果中，要包含total和totalPage，我们改造下刚才的接口： 在我们返回的PageResult对象中，其实是有totalPage字段的： 我们在返回时，把这个值填上： 页面测试一下： OK ### 3.1.3.页面计算分页条 首先，把后台提供的数据保存在data中： 然后看下我们要实现的效果： 这里最复杂的是中间的1~5的分页按钮，它需要动态变化。 思路分析： - 最多有5个按钮，因此我们可以用v-for循环从1到5即可 - 但是分页条不一定是从1开始： - 如果当前页值小于等于3的时候，分页条位置从1开始到5结束 - 如果总页数小于等于5的时候，分页条位置从1开始到5结束 - 如果当前页码大于3，应该从page-3开始 - 但是如果当前页码大于totalPage-3，应该从totalPage-5开始 所以，我们的页面这样来做： a标签中的分页数字通过index函数来计算，需要把i传递过去： \\123456789101112131415161718192021222324index(i)&#123;​ if(this.search.page &lt;= 3 || this.totalPage &lt;= 5)&#123;​ // 如果当前页小于等于3或者总页数小于等于5​ return i;​ &#125; else if(this.search.page &gt; 3) &#123;​ // 如果当前页大于3​ return this.search.page - 3 + i;​ &#125; else &#123;​ return this.totalPage - 5 + i;​ &#125;&#125;\\ 需要注意的是，如果总页数不足5页，我们就不应该遍历1~5，而是1~总页数，稍作改进： 分页条的其它部分就比较简单了： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;div class=&quot;sui-pagination pagination-large&quot;&gt;​ &lt;ul style=&quot;width: 550px&quot;&gt;​ &lt;li :class=&quot;&#123;prev:true,disabled:search.page === 1&#125;&quot;&gt;​ &lt;a href=&quot;#&quot;&gt;«上一页&lt;/a&gt;​ &lt;/li&gt;​ &lt;li :class=&quot;&#123;active: index(i) === search.page&#125;&quot; v-for=&quot;i in Math.min(5,totalPage)&quot; :key=&quot;i&quot;&gt;​ &lt;a href=&quot;#&quot;&gt;&#123;&#123;index(i)&#125;&#125;&lt;/a&gt;​ &lt;/li&gt;​ &lt;li class=&quot;dotted&quot; v-show=&quot;totalPage &gt; 5&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/li&gt;​ &lt;li :class=&quot;&#123;next:true,disabled:search.page === totalPage&#125;&quot;&gt;​ &lt;a href=&quot;#&quot;&gt;下一页»&lt;/a&gt;​ &lt;/li&gt;​ &lt;/ul&gt; &lt;div&gt;​ &lt;span&gt;共&#123;&#123;totalPage&#125;&#125;页&amp;nbsp;&lt;/span&gt;​ &lt;span&gt;​ 到第​ &lt;input type=&quot;text&quot; class=&quot;page-num&quot; :value=&quot;search.page&quot;&gt;​ 页 &lt;button class=&quot;page-confirm&quot; onclick=&quot;alert(1)&quot;&gt;确定&lt;/button&gt;​ &lt;/span&gt;​ &lt;/div&gt;&lt;/div&gt;\\ ## 3.2.点击分页做什么 点击分页按钮后，自然是要修改page的值 所以，我们在上一页、下一页按钮添加点击事件，对page进行修改，在数字按钮上绑定点击事件，点击直接修改page： \\12345678910111213141516171819202122​ prevPage()&#123;​ if(this.search.page &gt; 1)&#123;​ this.search.page--​ &#125;​ &#125;,​ nextPage()&#123;​ if(this.search.page &lt; this.totalPage)&#123;​ this.search.page++​ &#125;​ &#125;\\ 当page发生变化，我们应该去后台重新查询数据。 不过，如果我们直接发起ajax请求，那么浏览器的地址栏中是不会有变化的，没有记录下分页信息。如果用户刷新页面，那么就会回到第一页。 这样不太友好，我们应该把搜索条件记录在地址栏的查询参数中。 因此，我们监听search的变化，然后把search的过滤字段拼接在url路径后： \\1234567891011121314151617181920watch:&#123;​ search:&#123;​ deep:true,​ handler(val)&#123;​ // 把search对象变成请求参数，拼接在url路径​ window.location.href = \"http://www.leyou.com/search.html?\" + ly.stringify(val);​ &#125;​ &#125;&#125;,\\ 刷新页面测试，然后就出现重大bug：页面无限刷新！为什么？ 因为Vue实例初始化的钩子函数中，我们读取请求参数，赋值给search的时候，也触发了watch监视！也就是说，每次页面创建完成，都会触发watch，然后就会去修改window.location路径，然后页面被刷新，再次触发created钩子，又触发watch，周而复始，无限循环。 所以，我们需要在watch中进行监控，如果发现是第一次初始化，则不继续向下执行。 那么问题是，如何判断是不是第一次？ 第一次初始化时，search中的key值肯定是空的，所以，我们这么做： \\12345678910111213141516171819202122232425262728watch:&#123;​ search:&#123;​ deep:true,​ handler(val,old)&#123;​ if(!old || !old.key)&#123;​ // 如果旧的search值为空，或者search中的key为空，证明是第一次​ return;​ &#125;​ // 把search对象变成请求参数，拼接在url路径​ window.location.href = \"http://www.leyou.com/search.html?\" + ly.stringify(val);​ &#125;​ &#125;&#125;\\ 再次刷新，OK了！ ## 3.3.页面顶部分页条 在页面商品列表的顶部，也有一个分页条： 我们把这一部分，也加上点击事件： # 4.排序(作业) ## 4.1.页面搜索排序条件 在搜索商品列表的顶部，有这么一部分内容： 这是用来做排序的，默认按照综合排序。点击新品，应该按照商品创建时间排序，点击价格应该按照价格排序。因为我们没有统计销量和评价，这里咱们以新品和价格为例，进行讲解，做法是想通的。 排序需要知道两个内容： - 排序的字段 - 排序的方式 因此，我们首先在search中记录这两个信息，因为created钩子函数会对search进行覆盖，因此我们在钩子函数中对这两个信息进行初始化即可： 然后，在页面上给按钮绑定点击事件，修改sortBy和descending的值： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!--排序字段--&gt;&lt;ul class=&quot;sui-nav&quot;&gt;​ &lt;li :class=&quot;&#123;active:!search.sortBy&#125;&quot; @click=&quot;search.sortBy=&apos;&apos;&quot;&gt;​ &lt;a href=&quot;#&quot;&gt;综合&lt;/a&gt;​ &lt;/li&gt;​ &lt;li&gt;​ &lt;a href=&quot;#&quot;&gt;销量&lt;/a&gt;​ &lt;/li&gt;​ &lt;li @click=&quot;search.sortBy=&apos;createTime&apos;&quot; :class=&quot;&#123;active: search.sortBy===&apos;createTime&apos;&#125;&quot;&gt;​ &lt;a href=&quot;#&quot;&gt;新品&lt;/a&gt;​ &lt;/li&gt;​ &lt;li&gt;​ &lt;a href=&quot;#&quot;&gt;评价&lt;/a&gt;​ &lt;/li&gt;​ &lt;li @click=&quot;search.sortBy=&apos;price&apos;; search.descending = !search.descending&quot;​ :class=&quot;&#123;active: search.sortBy===&apos;price&apos;&#125;&quot;&gt;​ &lt;a href=&quot;#&quot;&gt;​ 价格​ &lt;v-icon v-show=&quot;search.descending&quot;&gt;arrow_drop_down&lt;/v-icon&gt;​ &lt;v-icon v-show=&quot;!search.descending&quot;&gt;arrow_drop_up&lt;/v-icon&gt;​ &lt;/a&gt;​ &lt;/li&gt;&lt;/ul&gt;\\ 可以看到，页面请求参数中已经有了排序字段了： ## 4.2.后台添加排序逻辑 接下来，后台需要接收请求参数中的排序信息，然后在搜索中加入排序的逻辑。 现在，我们的请求参数对象SearchRequest中，只有page、key两个字段。需要进行扩展： 然后在搜索业务逻辑中，添加排序条件： 注意，因为我们存储在索引库中的的价格是一个数组，因此在按照价格排序时，会进行智能处理： - 如果是价格降序，则会把数组中的最大值拿来排序 - 如果是价格升序，则会把数组中的最小值拿来排序","categories":[],"tags":[],"keywords":[]},{"title":"day11elasticsearch基础学习一","slug":"day11elasticsearch基础学习一","date":"2019-05-03T03:11:18.000Z","updated":"2019-05-03T03:13:46.095Z","comments":true,"path":"2019/05/03/day11elasticsearch基础学习一/","link":"","permalink":"https://mr8649.github.io/2019/05/03/day11elasticsearch基础学习一/","excerpt":"","text":"# 0.学习目标 - 独立安装Elasticsearch - 会使用Rest的API操作索引 - 会使用Rest的API查询数据 - 会使用Rest的API聚合数据 - 掌握Spring Data Elasticsearch使用 # 1.Elasticsearch介绍和安装 用户访问我们的首页，一般都会直接搜索来寻找自己想要购买的商品。 而商品的数量非常多，而且分类繁杂。如果能正确的显示出用户想要的商品，并进行合理的过滤，尽快促成交易，是搜索系统要研究的核心。 面对这样复杂的搜索业务和数据量，使用传统数据库搜索就显得力不从心，一般我们都会使用全文检索技术，比如之前大家学习过的Solr。 不过今天，我们要讲的是另一个全文检索技术：Elasticsearch。 ## 1.1.简介 ### 1.1.1.Elastic Elastic官网：https://www.elastic.co/cn/ Elastic有一条完整的产品线及解决方案：Elasticsearch、Kibana、Logstash等，前面说的三个就是大家常说的ELK技术栈。 ### 1.1.2.Elasticsearch Elasticsearch官网：https://www.elastic.co/cn/products/elasticsearch 如上所述，Elasticsearch具备以下特点： - 分布式，无需人工搭建集群（solr就需要人为配置，使用Zookeeper作为注册中心） - Restful风格，一切API都遵循Rest原则，容易上手 - 近实时搜索，数据更新在Elasticsearch中几乎是完全同步的。 ### 1.1.3.版本 目前Elasticsearch最新的版本是6.3.1，我们就使用6.3.0 需要虚拟机JDK1.8及以上 ## 1.2.安装和配置 为了模拟真实场景，我们将在linux下安装Elasticsearch。 ### 1.2.1.新建一个用户leyou 出于安全考虑，elasticsearch默认不允许以root账号运行。 创建用户： \\1234useradd leyou\\ 设置密码： \\1234passwd leyou\\ 切换用户： \\1234su - leyou\\ ### 1.2.2.上传安装包,并解压 我们将安装包上传到：/home/leyou目录 解压缩： \\1234tar -zxvf elasticsearch-6.2.4.tar.gz\\ 我们把目录重命名： \\1234mv elasticsearch-6.2.4/ elasticsearch\\ 进入，查看目录结构： ### 1.2.3.修改配置 我们进入config目录：cd config 需要修改的配置文件有两个： \\1. jvm.options Elasticsearch基于Lucene的，而Lucene底层是java实现，因此我们需要配置jvm参数。 编辑jvm.options： \\1234vim jvm.options\\ 默认配置如下： \\123456-Xms1g-Xmx1g\\ 内存占用太多了，我们调小一些： \\123456-Xms512m-Xmx512m\\ \\1. elasticsearch.yml \\1234vim elasticsearch.yml\\ - 修改数据和日志目录： \\123456path.data: /home/leyou/elasticsearch/data # 数据目录位置path.logs: /home/leyou/elasticsearch/logs # 日志目录位置\\ 我们把data和logs目录修改指向了elasticsearch的安装目录。但是这两个目录并不存在，因此我们需要创建出来。 进入elasticsearch的根目录，然后创建： \\123456mkdir datamkdir logs\\ - 修改绑定的ip： \\1234network.host: 0.0.0.0 # 绑定到0.0.0.0，允许任何ip来访问\\ 默认只允许本机访问，修改为0.0.0.0后则可以远程访问 目前我们是做的单机安装，如果要做集群，只需要在这个配置文件中添加其它节点信息即可。 > elasticsearch.yml的其它可配置信息： | 属性名 | 说明 | | ———————————- | —————————————- | | cluster.name | 配置elasticsearch的集群名称，默认是elasticsearch。建议修改成一个有意义的名称。 | | node.name | 节点名，es会默认随机指定一个名字，建议指定一个有意义的名称，方便管理 | | path.conf | 设置配置文件的存储路径，tar或zip包安装默认在es根目录下的config文件夹，rpm安装默认在/etc/ elasticsearch | | path.data | 设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开 | | path.logs | 设置日志文件的存储路径，默认是es根目录下的logs文件夹 | | path.plugins | 设置插件的存放路径，默认是es根目录下的plugins文件夹 | | bootstrap.memory_lock | 设置为true可以锁住ES使用的内存，避免内存进行swap | | network.host | 设置bind_host和publish_host，设置为0.0.0.0允许外网访问 | | http.port | 设置对外服务的http端口，默认为9200。 | | transport.tcp.port | 集群结点之间通信端口 | | discovery.zen.ping.timeout | 设置ES自动发现节点连接超时的时间，默认为3秒，如果网络延迟高可设置大些 | | discovery.zen.minimum_master_nodes | 主结点数量的最少值 ,此值的公式为：(master_eligible_nodes / 2) + 1 ，比如：有3个符合要求的主结点，那么这里要设置为2 | | | | ## 1.3.运行 进入elasticsearch/bin目录，可以看到下面的执行文件： 然后输入命令： \\1234./elasticsearch\\ 发现报错了，启动失败： ### 1.3.1.错误1：内核过低 我们使用的是centos6，其linux内核版本为2.6。而Elasticsearch的插件要求至少3.5以上版本。不过没关系，我们禁用这个插件即可。 修改elasticsearch.yml文件，在最下面添加如下配置： \\1234bootstrap.system_call_filter: false\\ 然后重启 ### 1.3.2.错误2：文件权限不足 再次启动，又出错了： \\1234[1]: max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]\\ 我们用的是leyou用户，而不是root，所以文件权限不足。 首先用root用户登录。 然后修改配置文件: \\1234vim /etc/security/limits.conf\\ 添加下面的内容： \\12345678910\\* soft nofile 65536\\* hard nofile 131072\\* soft nproc 4096\\* hard nproc 4096\\ ### 1.3.3.错误3：线程数不够 刚才报错中，还有一行： \\1234[1]: max number of threads [1024] for user [leyou] is too low, increase to at least [4096]\\ 这是线程数不够。 继续修改配置： \\1234vim /etc/security/limits.d/90-nproc.conf \\ 修改下面的内容： \\1234\\* soft nproc 1024\\ 改为： \\1234\\* soft nproc 4096\\ ### 1.3.4.错误4：进程虚拟内存 \\1234[3]: max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]\\ vm.max_map_count：限制一个进程可以拥有的VMA(虚拟内存区域)的数量，继续修改配置文件， ： \\1234vim /etc/sysctl.conf \\ 添加下面内容： \\1234vm.max_map_count=655360\\ 然后执行命令： \\1234sysctl -p\\ ### 1.3.5.重启终端窗口 所有错误修改完毕，一定要重启你的 Xshell终端，否则配置无效。 ### 1.3.6.启动 再次启动，终于成功了！ 可以看到绑定了两个端口: - 9300：集群节点间通讯接口 - 9200：客户端访问接口 我们在浏览器中访问：http://192.168.56.101:9200 ## 1.4.安装kibana ### 1.4.1.什么是Kibana？ Kibana是一个基于Node.js的Elasticsearch索引库数据统计工具，可以利用Elasticsearch的聚合功能，生成各种图表，如柱形图，线状图，饼图等。 而且还提供了操作Elasticsearch索引数据的控制台，并且提供了一定的API提示，非常有利于我们学习Elasticsearch的语法。 ### 1.4.2.安装 因为Kibana依赖于node，我们的虚拟机没有安装node，而window中安装过。所以我们选择在window下使用kibana。 最新版本与elasticsearch保持一致，也是6.3.0 解压到特定目录即可 ### 1.4.3.配置运行 > 配置 进入安装目录下的config目录，修改kibana.yml文件： 修改elasticsearch服务器的地址： \\1234elasticsearch.url: &quot;http://192.168.56.101:9200&quot;\\ > 运行 进入安装目录下的bin目录： 双击运行： 发现kibana的监听端口是5601 我们访问：http://127.0.0.1:5601 ### 1.4.4.控制台 选择左侧的DevTools菜单，即可进入控制台页面： 在页面右侧，我们就可以输入请求，访问Elasticsearch了。 ## 1.5.安装ik分词器 Lucene的IK分词器早在2012年已经没有维护了，现在我们要使用的是在其基础上维护升级的版本，并且开发为ElasticSearch的集成插件了，与Elasticsearch一起维护升级，版本也保持一致，最新版本：6.3.0 ### 1.5.1.安装 上传课前资料中的zip包，解压到Elasticsearch目录的plugins目录中： 使用unzip命令解压： \\1234unzip elasticsearch-analysis-ik-6.3.0.zip -d ik-analyzer\\ 然后重启elasticsearch： ### 1.5.2.测试 大家先不管语法，我们先测试一波。 在kibana控制台输入下面的请求： \\123456789101112POST _analyze&#123; &quot;analyzer&quot;: &quot;ik_max_word&quot;, &quot;text&quot;: &quot;我是中国人&quot;&#125;\\ 运行得到结果： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&#123; &quot;tokens&quot;: [​ &#123;​ &quot;token&quot;: &quot;我&quot;,​ &quot;start_offset&quot;: 0,​ &quot;end_offset&quot;: 1,​ &quot;type&quot;: &quot;CN_CHAR&quot;,​ &quot;position&quot;: 0​ &#125;,​ &#123;​ &quot;token&quot;: &quot;是&quot;,​ &quot;start_offset&quot;: 1,​ &quot;end_offset&quot;: 2,​ &quot;type&quot;: &quot;CN_CHAR&quot;,​ &quot;position&quot;: 1​ &#125;,​ &#123;​ &quot;token&quot;: &quot;中国人&quot;,​ &quot;start_offset&quot;: 2,​ &quot;end_offset&quot;: 5,​ &quot;type&quot;: &quot;CN_WORD&quot;,​ &quot;position&quot;: 2​ &#125;,​ &#123;​ &quot;token&quot;: &quot;中国&quot;,​ &quot;start_offset&quot;: 2,​ &quot;end_offset&quot;: 4,​ &quot;type&quot;: &quot;CN_WORD&quot;,​ &quot;position&quot;: 3​ &#125;,​ &#123;​ &quot;token&quot;: &quot;国人&quot;,​ &quot;start_offset&quot;: 3,​ &quot;end_offset&quot;: 5,​ &quot;type&quot;: &quot;CN_WORD&quot;,​ &quot;position&quot;: 4​ &#125; ]&#125;\\ ## 1.7.API Elasticsearch提供了Rest风格的API，即http请求接口，而且也提供了各种语言的客户端API ### 1.7.1.Rest风格API 文档地址：https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html ### 1.7.2.客户端API Elasticsearch支持的客户端非常多：https://www.elastic.co/guide/en/elasticsearch/client/index.html 点击Java Rest Client后，你会发现又有两个： Low Level Rest Client是低级别封装，提供一些基础功能，但更灵活 High Level Rest Client，是在Low Level Rest Client基础上进行的高级别封装，功能更丰富和完善，而且API会变的简单 ### 1.7.3.如何学习 建议先学习Rest风格API，了解发起请求的底层实现，请求体格式等。 # 2.操作索引 ## 2.1.基本概念 Elasticsearch也是基于Lucene的全文检索库，本质也是存储数据，很多概念与MySQL类似的。 对比关系： 索引（indices）——————————–Databases 数据库 类型（type）—————————–Table 数据表 ​ 文档（Document）—————-Row 行 ​ 字段（Field）——————-Columns 列 详细说明： | 概念 | 说明 | | ————– | —————————————- | | 索引库（indices) | indices是index的复数，代表许多的索引， | | 类型（type） | 类型是模拟mysql中的table概念，一个索引库下可以有不同类型的索引，比如商品索引，订单索引，其数据格式不同。不过这会导致索引库混乱，因此未来版本中会移除这个概念 | | 文档（document） | 存入索引库原始的数据。比如每一条商品信息，就是一个文档 | | 字段（field） | 文档中的属性 | | 映射配置（mappings） | 字段的数据类型、属性、是否索引、是否存储等特性 | 是不是与Lucene和solr中的概念类似。 另外，在SolrCloud中，有一些集群相关的概念，在Elasticsearch也有类似的： - 索引集（Indices，index的复数）：逻辑上的完整索引 - 分片（shard）：数据拆分后的各个部分 - 副本（replica）：每个分片的复制 要注意的是：Elasticsearch本身就是分布式的，因此即便你只有一个节点，Elasticsearch默认也会对你的数据进行分片和副本操作，当你向集群添加新数据时，数据也会在新加入的节点中进行平衡。 ## 2.2.创建索引 ### 2.2.1.语法 Elasticsearch采用Rest风格API，因此其API就是一次http请求，你可以用任何工具发起http请求 创建索引的请求格式： - 请求方式：PUT - 请求路径：/索引库名 - 请求参数：json格式： \\1234567891011121314 &#123;​ \"settings\": &#123;​ \"number_of_shards\": 3,​ \"number_of_replicas\": 2​ &#125; &#125; \\ - settings：索引库的设置 ​ - number_of_shards：分片数量 ​ - number_of_replicas：副本数量 ### 2.2.2.测试 我们先用RestClient来试试 响应： 可以看到索引创建成功了。 ### 2.2.3.使用kibana创建 kibana的控制台，可以对http请求进行简化，示例： 相当于是省去了elasticsearch的服务器地址 而且还有语法提示，非常舒服。 ## 2.3.查看索引设置 > 语法 Get请求可以帮我们查看索引信息，格式： \\1234GET /索引库名\\ 或者，我们可以使用*来查询所有索引库配置： ## 2.4.删除索引 删除索引使用DELETE请求 > 语法 \\1234DELETE /索引库名\\ > 示例 再次查看heima2： 当然，我们也可以用HEAD请求，查看索引是否存在： ## 2.5.映射配置 索引有了，接下来肯定是添加数据。但是，在添加数据之前必须定义映射。 什么是映射？ 映射是定义文档的过程，文档包含哪些字段，这些字段是否保存，是否索引，是否分词等 只有配置清楚，Elasticsearch才会帮我们进行索引库的创建（不一定） ### 2.5.1.创建映射字段 > 语法 请求方式依然是PUT \\123456789101112131415161718192021222324PUT /索引库名/_mapping/类型名称&#123; &quot;properties&quot;: &#123;​ &quot;字段名&quot;: &#123;​ &quot;type&quot;: &quot;类型&quot;,​ &quot;index&quot;: true，​ &quot;store&quot;: true，​ &quot;analyzer&quot;: &quot;分词器&quot;​ &#125; &#125;&#125;\\ - 类型名称：就是前面将的type的概念，类似于数据库中的不同表 字段名：任意填写 ，可以指定许多属性，例如： - type：类型，可以是text、long、short、date、integer、object等 - index：是否索引，默认为true - store：是否存储，默认为false - analyzer：分词器，这里的ik_max_word即使用ik分词器 > 示例 发起请求： \\12345678910111213141516171819202122232425262728293031323334PUT heima/_mapping/goods&#123; \"properties\": &#123;​ \"title\": &#123;​ \"type\": \"text\",​ \"analyzer\": \"ik_max_word\"​ &#125;,​ \"images\": &#123;​ \"type\": \"keyword\",​ \"index\": \"false\"​ &#125;,​ \"price\": &#123;​ \"type\": \"float\"​ &#125; &#125;&#125;\\ 响应结果： \\12345678&#123; &quot;acknowledged&quot;: true&#125;\\ ### 2.5.2.查看映射关系 > 语法： \\1234GET /索引库名/_mapping\\ > 示例： \\1234GET /heima/_mapping\\ > 响应： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344&#123; \"heima\": &#123;​ \"mappings\": &#123;​ \"goods\": &#123;​ \"properties\": &#123;​ \"images\": &#123;​ \"type\": \"keyword\",​ \"index\": false​ &#125;,​ \"price\": &#123;​ \"type\": \"float\"​ &#125;,​ \"title\": &#123;​ \"type\": \"text\",​ \"analyzer\": \"ik_max_word\"​ &#125;​ &#125;​ &#125;​ &#125; &#125;&#125;\\ ### 2.5.3.字段属性详解 #### 2.5.3.1.type Elasticsearch中支持的数据类型非常丰富： 我们说几个关键的： - String类型，又分两种： - text：可分词，不可参与聚合 - keyword：不可分词，数据会作为完整字段进行匹配，可以参与聚合 - Numerical：数值类型，分两类 - 基本数据类型：long、interger、short、byte、double、float、half_float - 浮点数的高精度类型：scaled_float ​ - 需要指定一个精度因子，比如10或100。elasticsearch会把真实值乘以这个因子后存储，取出时再还原。 - Date：日期类型 elasticsearch可以对日期格式化为字符串存储，但是建议我们存储为毫秒值，存储为long，节省空间。 #### 2.5.3.2.index index影响字段的索引情况。 - true：字段会被索引，则可以用来进行搜索。默认值就是true - false：字段不会被索引，不能用来搜索 index的默认值就是true，也就是说你不进行任何配置，所有字段都会被索引。 但是有些字段是我们不希望被索引的，比如商品的图片信息，就需要手动设置index为false。 #### 2.5.3.3.store 是否将数据进行额外存储。 在学习lucene和solr时，我们知道如果一个字段的store设置为false，那么在文档列表中就不会有这个字段的值，用户的搜索结果中不会显示出来。 但是在Elasticsearch中，即便store设置为false，也可以搜索到结果。 原因是Elasticsearch在创建文档索引时，会将文档中的原始数据备份，保存到一个叫做_source的属性中。而且我们可以通过过滤_source来选择哪些要显示，哪些不显示。 而如果设置store为true，就会在_source以外额外存储一份数据，多余，因此一般我们都会将store设置为false，事实上，store的默认值就是false。 #### 2.5.3.4.boost 激励因子，这个与lucene中一样 其它的不再一一讲解，用的不多，大家参考官方文档： ## 2.6.新增数据 ### 2.6.1.随机生成id 通过POST请求，可以向一个已经存在的索引库中添加数据。 > 语法： \\12345678910POST /索引库名/类型名&#123;​ &quot;key&quot;:&quot;value&quot;&#125;\\ > 示例： \\1234567891011121314POST /heima/goods/&#123;​ \"title\":\"小米手机\",​ \"images\":\"http://image.leyou.com/12479122.jpg\",​ \"price\":2699.00&#125;\\ 响应： \\123456789101112131415161718192021222324252627282930&#123; \"_index\": \"heima\", \"_type\": \"goods\", \"_id\": \"r9c1KGMBIhaxtY5rlRKv\", \"_version\": 1, \"result\": \"created\", \"_shards\": &#123;​ \"total\": 3,​ \"successful\": 1,​ \"failed\": 0 &#125;, \"_seq_no\": 0, \"_primary_term\": 2&#125;\\ 通过kibana查看数据： \\1234567891011121314get _search&#123;​ \"query\":&#123;​ \"match_all\":&#123;&#125;​ &#125;&#125;\\ \\1234567891011121314151617181920212223242526&#123; \"_index\": \"heima\", \"_type\": \"goods\", \"_id\": \"r9c1KGMBIhaxtY5rlRKv\", \"_version\": 1, \"_score\": 1, \"_source\": &#123;​ \"title\": \"小米手机\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 2699 &#125;&#125;\\ - _source：源文档信息，所有的数据都在里面。 - _id：这条文档的唯一标示，与文档自己的id字段没有关联 ### 2.6.2.自定义id 如果我们想要自己新增的时候指定id，可以这么做： \\12345678910POST /索引库名/类型/id值&#123;​ ...&#125;\\ 示例： \\1234567891011121314POST /heima/goods/2&#123;​ \"title\":\"大米手机\",​ \"images\":\"http://image.leyou.com/12479122.jpg\",​ \"price\":2899.00&#125;\\ 得到的数据： \\123456789101112131415161718192021222324&#123; \"_index\": \"heima\", \"_type\": \"goods\", \"_id\": \"2\", \"_score\": 1, \"_source\": &#123;​ \"title\": \"大米手机\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 2899 &#125;&#125;\\ ### 2.6.3.智能判断 在学习Solr时我们发现，我们在新增数据时，只能使用提前配置好映射属性的字段，否则就会报错。 不过在Elasticsearch中并没有这样的规定。 事实上Elasticsearch非常智能，你不需要给索引库设置任何mapping映射，它也可以根据你输入的数据来判断类型，动态添加数据映射。 测试一下： \\123456789101112131415161718POST /heima/goods/3&#123;​ \"title\":\"超米手机\",​ \"images\":\"http://image.leyou.com/12479122.jpg\",​ \"price\":2899.00,​ \"stock\": 200,​ \"saleable\":true&#125;\\ 我们额外添加了stock库存，和saleable是否上架两个字段。 来看结果： \\123456789101112131415161718192021222324252627282930&#123; \"_index\": \"heima\", \"_type\": \"goods\", \"_id\": \"3\", \"_version\": 1, \"_score\": 1, \"_source\": &#123;​ \"title\": \"超米手机\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 2899,​ \"stock\": 200,​ \"saleable\": true &#125;&#125;\\ 在看下索引库的映射关系: \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&#123; \"heima\": &#123;​ \"mappings\": &#123;​ \"goods\": &#123;​ \"properties\": &#123;​ \"images\": &#123;​ \"type\": \"keyword\",​ \"index\": false​ &#125;,​ \"price\": &#123;​ \"type\": \"float\"​ &#125;,​ \"saleable\": &#123;​ \"type\": \"boolean\"​ &#125;,​ \"stock\": &#123;​ \"type\": \"long\"​ &#125;,​ \"title\": &#123;​ \"type\": \"text\",​ \"analyzer\": \"ik_max_word\"​ &#125;​ &#125;​ &#125;​ &#125; &#125;&#125;\\ stock和saleable都被成功映射了。 ## 2.7.修改数据 把刚才新增的请求方式改为PUT，就是修改了。不过修改必须指定id， - id对应文档存在，则修改 - id对应文档不存在，则新增 比如，我们把id为3的数据进行修改： \\123456789101112131415161718PUT /heima/goods/3&#123;​ \"title\":\"超大米手机\",​ \"images\":\"http://image.leyou.com/12479122.jpg\",​ \"price\":3899.00,​ \"stock\": 100,​ \"saleable\":true&#125;\\ 结果： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&#123; \"took\": 17, \"timed_out\": false, \"_shards\": &#123;​ \"total\": 9,​ \"successful\": 9,​ \"skipped\": 0,​ \"failed\": 0 &#125;, \"hits\": &#123;​ \"total\": 1,​ \"max_score\": 1,​ \"hits\": [​ &#123;​ \"_index\": \"heima\",​ \"_type\": \"goods\",​ \"_id\": \"3\",​ \"_score\": 1,​ \"_source\": &#123;​ \"title\": \"超大米手机\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 3899,​ \"stock\": 100,​ \"saleable\": true​ &#125;​ &#125;​ ] &#125;&#125;\\ ## 2.8.删除数据 删除使用DELETE请求，同样，需要根据id进行删除： > 语法 \\1234DELETE /索引库名/类型名/id值\\ > 示例： # 3.查询 我们从4块来讲查询： - 基本查询 - _source过滤 - 结果过滤 - 高级查询 - 排序 ## 3.1.基本查询： > 基本语法 \\123456789101112131415161718GET /索引库名/_search&#123;​ \"query\":&#123;​ \"查询类型\":&#123;​ \"查询条件\":\"查询条件值\"​ &#125;​ &#125;&#125;\\ 这里的query代表一个查询对象，里面可以有不同的查询属性 - 查询类型： - 例如：match_all， match，term ， range 等等 - 查询条件：查询条件会根据类型的不同，写法也有差异，后面详细讲解 ### 3.1.1 查询所有（match_all) > 示例： \\1234567891011121314GET /heima/_search&#123;​ \"query\":&#123;​ \"match_all\": &#123;&#125;​ &#125;&#125;\\ - query：代表查询对象 - match_all：代表查询所有 > 结果： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&#123; \"took\": 2, \"timed_out\": false, \"_shards\": &#123;​ \"total\": 3,​ \"successful\": 3,​ \"skipped\": 0,​ \"failed\": 0 &#125;, \"hits\": &#123;​ \"total\": 2,​ \"max_score\": 1,​ \"hits\": [​ &#123;​ \"_index\": \"heima\",​ \"_type\": \"goods\",​ \"_id\": \"2\",​ \"_score\": 1,​ \"_source\": &#123;​ \"title\": \"大米手机\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 2899​ &#125;​ &#125;,​ &#123;​ \"_index\": \"heima\",​ \"_type\": \"goods\",​ \"_id\": \"r9c1KGMBIhaxtY5rlRKv\",​ \"_score\": 1,​ \"_source\": &#123;​ \"title\": \"小米手机\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 2699​ &#125;​ &#125;​ ] &#125;&#125;\\ - took：查询花费时间，单位是毫秒 - time_out：是否超时 - _shards：分片信息 - hits：搜索结果总览对象 - total：搜索到的总条数 - max_score：所有结果中文档得分的最高分 - hits：搜索结果的文档对象数组，每个元素是一条搜索到的文档信息 ​ - _index：索引库 ​ - _type：文档类型 ​ - _id：文档id ​ - _score：文档得分 ​ - _source：文档的源数据 ### 3.1.2 匹配查询（match） 我们先加入一条数据，便于测试： \\1234567891011121314PUT /heima/goods/3&#123;​ \"title\":\"小米电视4A\",​ \"images\":\"http://image.leyou.com/12479122.jpg\",​ \"price\":3899.00&#125;\\ 现在，索引库中有2部手机，1台电视： - or关系 match类型查询，会把查询条件进行分词，然后进行查询,多个词条之间是or的关系 \\123456789101112131415161718GET /heima/_search&#123;​ \"query\":&#123;​ \"match\":&#123;​ \"title\":\"小米电视\"​ &#125;​ &#125;&#125;\\ 结果： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758\"hits\": &#123;​ \"total\": 2,​ \"max_score\": 0.6931472,​ \"hits\": [​ &#123;​ \"_index\": \"heima\",​ \"_type\": \"goods\",​ \"_id\": \"tmUBomQB_mwm6wH_EC1-\",​ \"_score\": 0.6931472,​ \"_source\": &#123;​ \"title\": \"小米手机\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 2699​ &#125;​ &#125;,​ &#123;​ \"_index\": \"heima\",​ \"_type\": \"goods\",​ \"_id\": \"3\",​ \"_score\": 0.5753642,​ \"_source\": &#123;​ \"title\": \"小米电视4A\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 3899​ &#125;​ &#125;​ ]&#125;\\ 在上面的案例中，不仅会查询到电视，而且与小米相关的都会查询到，多个词之间是or的关系。 - and关系 某些情况下，我们需要更精确查找，我们希望这个关系变成and，可以这样做： \\123456789101112131415161718192021222324GET /heima/_search&#123;​ \"query\":&#123;​ \"match\": &#123;​ \"title\": &#123;​ \"query\": \"小米电视\",​ \"operator\": \"and\"​ &#125;​ &#125;​ &#125;&#125;\\ 结果： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&#123; \"took\": 2, \"timed_out\": false, \"_shards\": &#123;​ \"total\": 3,​ \"successful\": 3,​ \"skipped\": 0,​ \"failed\": 0 &#125;, \"hits\": &#123;​ \"total\": 1,​ \"max_score\": 0.5753642,​ \"hits\": [​ &#123;​ \"_index\": \"heima\",​ \"_type\": \"goods\",​ \"_id\": \"3\",​ \"_score\": 0.5753642,​ \"_source\": &#123;​ \"title\": \"小米电视4A\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 3899​ &#125;​ &#125;​ ] &#125;&#125;\\ 本例中，只有同时包含小米和电视的词条才会被搜索到。 - or和and之间？ 在 or 与 and 间二选一有点过于非黑即白。 如果用户给定的条件分词后有 5 个查询词项，想查找只包含其中 4 个词的文档，该如何处理？将 operator 操作符参数设置成 and 只会将此文档排除。 有时候这正是我们期望的，但在全文搜索的大多数应用场景下，我们既想包含那些可能相关的文档，同时又排除那些不太相关的。换句话说，我们想要处于中间某种结果。 match 查询支持 minimum_should_match 最小匹配参数， 这让我们可以指定必须匹配的词项数用来表示一个文档是否相关。我们可以将其设置为某个具体数字，更常用的做法是将其设置为一个百分数，因为我们无法控制用户搜索时输入的单词数量： \\123456789101112131415161718192021222324GET /heima/_search&#123;​ \"query\":&#123;​ \"match\":&#123;​ \"title\":&#123;​ \"query\":\"小米曲面电视\",​ \"minimum_should_match\": \"75%\"​ &#125;​ &#125;​ &#125;&#125;\\ 本例中，搜索语句可以分为3个词，如果使用and关系，需要同时满足3个词才会被搜索到。这里我们采用最小品牌数：75%，那么也就是说只要匹配到总词条数量的75%即可，这里3*75% 约等于2。所以只要包含2个词条就算满足条件了。 结果： ### 3.1.3 多字段查询（multi_match） multi_match与match类似，不同的是它可以在多个字段中查询 \\1234567891011121314151617181920GET /heima/_search&#123;​ \"query\":&#123;​ \"multi_match\": &#123;​ \"query\": \"小米\",​ \"fields\": [ \"title\", \"subTitle\" ]​ &#125; &#125;&#125;\\ 本例中，我们会在title字段和subtitle字段中查询小米这个词 ### 3.1.4 词条匹配(term) term 查询被用于精确值 匹配，这些精确值可能是数字、时间、布尔或者那些未分词的字符串 \\123456789101112131415161718GET /heima/_search&#123;​ \"query\":&#123;​ \"term\":&#123;​ \"price\":2699.00​ &#125;​ &#125;&#125;\\ 结果： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&#123; \"took\": 2, \"timed_out\": false, \"_shards\": &#123;​ \"total\": 3,​ \"successful\": 3,​ \"skipped\": 0,​ \"failed\": 0 &#125;, \"hits\": &#123;​ \"total\": 1,​ \"max_score\": 1,​ \"hits\": [​ &#123;​ \"_index\": \"heima\",​ \"_type\": \"goods\",​ \"_id\": \"r9c1KGMBIhaxtY5rlRKv\",​ \"_score\": 1,​ \"_source\": &#123;​ \"title\": \"小米手机\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 2699​ &#125;​ &#125;​ ] &#125;&#125;\\ ### 3.1.5 多词条精确匹配(terms) terms 查询和 term 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件： \\123456789101112131415161718GET /heima/_search&#123;​ \"query\":&#123;​ \"terms\":&#123;​ \"price\":[2699.00,2899.00,3899.00]​ &#125;​ &#125;&#125;\\ 结果： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100&#123; \"took\": 4, \"timed_out\": false, \"_shards\": &#123;​ \"total\": 3,​ \"successful\": 3,​ \"skipped\": 0,​ \"failed\": 0 &#125;, \"hits\": &#123;​ \"total\": 3,​ \"max_score\": 1,​ \"hits\": [​ &#123;​ \"_index\": \"heima\",​ \"_type\": \"goods\",​ \"_id\": \"2\",​ \"_score\": 1,​ \"_source\": &#123;​ \"title\": \"大米手机\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 2899​ &#125;​ &#125;,​ &#123;​ \"_index\": \"heima\",​ \"_type\": \"goods\",​ \"_id\": \"r9c1KGMBIhaxtY5rlRKv\",​ \"_score\": 1,​ \"_source\": &#123;​ \"title\": \"小米手机\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 2699​ &#125;​ &#125;,​ &#123;​ \"_index\": \"heima\",​ \"_type\": \"goods\",​ \"_id\": \"3\",​ \"_score\": 1,​ \"_source\": &#123;​ \"title\": \"小米电视4A\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 3899​ &#125;​ &#125;​ ] &#125;&#125;\\ ## 3.2.结果过滤 默认情况下，elasticsearch在搜索的结果中，会把文档中保存在_source的所有字段都返回。 如果我们只想获取其中的部分字段，我们可以添加_source的过滤 ### 3.2.1.直接指定字段 示例： \\1234567891011121314151617181920GET /heima/_search&#123; \"_source\": [\"title\",\"price\"], \"query\": &#123;​ \"term\": &#123;​ \"price\": 2699​ &#125; &#125;&#125;\\ 返回的结果： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&#123; \"took\": 12, \"timed_out\": false, \"_shards\": &#123;​ \"total\": 3,​ \"successful\": 3,​ \"skipped\": 0,​ \"failed\": 0 &#125;, \"hits\": &#123;​ \"total\": 1,​ \"max_score\": 1,​ \"hits\": [​ &#123;​ \"_index\": \"heima\",​ \"_type\": \"goods\",​ \"_id\": \"r9c1KGMBIhaxtY5rlRKv\",​ \"_score\": 1,​ \"_source\": &#123;​ \"price\": 2699,​ \"title\": \"小米手机\"​ &#125;​ &#125;​ ] &#125;&#125;\\ ### 3.2.2.指定includes和excludes 我们也可以通过： - includes：来指定想要显示的字段 - excludes：来指定不想要显示的字段 二者都是可选的。 示例： \\123456789101112131415161718192021222324GET /heima/_search&#123; \"_source\": &#123;​ \"includes\":[\"title\",\"price\"] &#125;, \"query\": &#123;​ \"term\": &#123;​ \"price\": 2699​ &#125; &#125;&#125;\\ 与下面的结果将是一样的： \\123456789101112131415161718192021222324GET /heima/_search&#123; \"_source\": &#123;​ \"excludes\": [\"images\"] &#125;, \"query\": &#123;​ \"term\": &#123;​ \"price\": 2699​ &#125; &#125;&#125;\\ ## 3.3 高级查询 ### 3.3.1 布尔组合（bool) bool把各种其它查询通过must（与）、must_not（非）、should（或）的方式进行组合 \\12345678910111213141516171819202122GET /heima/_search&#123;​ \"query\":&#123;​ \"bool\":&#123;​ \"must\": &#123; \"match\": &#123; \"title\": \"大米\" &#125;&#125;,​ \"must_not\": &#123; \"match\": &#123; \"title\": \"电视\" &#125;&#125;,​ \"should\": &#123; \"match\": &#123; \"title\": \"手机\" &#125;&#125;​ &#125;​ &#125;&#125;\\ 结果： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&#123; \"took\": 10, \"timed_out\": false, \"_shards\": &#123;​ \"total\": 3,​ \"successful\": 3,​ \"skipped\": 0,​ \"failed\": 0 &#125;, \"hits\": &#123;​ \"total\": 1,​ \"max_score\": 0.5753642,​ \"hits\": [​ &#123;​ \"_index\": \"heima\",​ \"_type\": \"goods\",​ \"_id\": \"2\",​ \"_score\": 0.5753642,​ \"_source\": &#123;​ \"title\": \"大米手机\",​ \"images\": \"http://image.leyou.com/12479122.jpg\",​ \"price\": 2899​ &#125;​ &#125;​ ] &#125;&#125;\\ ### 3.3.2 范围查询(range) range 查询找出那些落在指定区间内的数字或者时间 \\123456789101112131415161718192021222324GET /heima/_search&#123;​ \"query\":&#123;​ \"range\": &#123;​ \"price\": &#123;​ \"gte\": 1000.0,​ \"lt\": 2800.00​ &#125;​ &#125;​ &#125;&#125;\\ range查询允许以下字符： | 操作符 | 说明 | | :–: | :–: | | gt | 大于 | | gte | 大于等于 | | lt | 小于 | | lte | 小于等于 | ### 3.3.3 模糊查询(fuzzy) 我们新增一个商品： \\1234567891011121314POST /heima/goods/4&#123;​ \"title\":\"apple手机\",​ \"images\":\"http://image.leyou.com/12479122.jpg\",​ \"price\":6899.00&#125;\\ fuzzy 查询是 term 查询的模糊等价。它允许用户搜索词条与实际词条的拼写出现偏差，但是偏差的编辑距离不得超过2： \\123456789101112131415161718GET /heima/_search&#123; \"query\": &#123;​ \"fuzzy\": &#123;​ \"title\": \"appla\"​ &#125; &#125;&#125;\\ 上面的查询，也能查询到apple手机 我们可以通过fuzziness来指定允许的编辑距离： \\123456789101112131415161718192021222324GET /heima/_search&#123; \"query\": &#123;​ \"fuzzy\": &#123;​ \"title\": &#123;​ \"value\":\"appla\",​ \"fuzziness\":1​ &#125;​ &#125; &#125;&#125;\\ ## 3.4 过滤(filter) > 条件查询中进行过滤 所有的查询都会影响到文档的评分及排名。如果我们需要在查询结果中进行过滤，并且不希望过滤条件影响评分，那么就不要把过滤条件作为查询条件来用。而是使用filter方式： \\123456789101112131415161718192021222324GET /heima/_search&#123;​ \"query\":&#123;​ \"bool\":&#123;​ \"must\":&#123; \"match\": &#123; \"title\": \"小米手机\" &#125;&#125;,​ \"filter\":&#123;​ \"range\":&#123;\"price\":&#123;\"gt\":2000.00,\"lt\":3800.00&#125;&#125;​ &#125;​ &#125;​ &#125;&#125;\\ 注意：filter中还可以再次进行bool组合条件过滤。 > 无查询条件，直接过滤 如果一次查询只有过滤，没有查询条件，不希望进行评分，我们可以使用constant_score取代只有 filter 语句的 bool 查询。在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助。 \\1234567891011121314151617181920GET /heima/_search&#123;​ \"query\":&#123;​ \"constant_score\": &#123;​ \"filter\": &#123;​ \"range\":&#123;\"price\":&#123;\"gt\":2000.00,\"lt\":3000.00&#125;&#125;​ &#125;​ &#125;&#125;\\ ## 3.5 排序 ### 3.4.1 单字段排序 sort 可以让我们按照不同的字段进行排序，并且通过order指定排序的方式 \\1234567891011121314151617181920212223242526272829303132GET /heima/_search&#123; \"query\": &#123;​ \"match\": &#123;​ \"title\": \"小米手机\"​ &#125; &#125;, \"sort\": [​ &#123;​ \"price\": &#123;​ \"order\": \"desc\"​ &#125;​ &#125; ]&#125;\\ ### 3.4.2 多字段排序 假定我们想要结合使用 price和 _score（得分） 进行查询，并且匹配的结果首先按照价格排序，然后按照相关性得分排序： \\1234567891011121314151617181920212223242526272829303132GET /goods/_search&#123;​ \"query\":&#123;​ \"bool\":&#123;​ \"must\":&#123; \"match\": &#123; \"title\": \"小米手机\" &#125;&#125;,​ \"filter\":&#123;​ \"range\":&#123;\"price\":&#123;\"gt\":200000,\"lt\":300000&#125;&#125;​ &#125;​ &#125;​ &#125;,​ \"sort\": [​ &#123; \"price\": &#123; \"order\": \"desc\" &#125;&#125;,​ &#123; \"_score\": &#123; \"order\": \"desc\" &#125;&#125;​ ]&#125;\\ # 4. 聚合aggregations 聚合可以让我们极其方便的实现对数据的统计、分析。例如： - 什么品牌的手机最受欢迎？ - 这些手机的平均价格、最高价格、最低价格？ - 这些手机每月的销售情况如何？ 实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现实时搜索效果。 ## 4.1 基本概念 Elasticsearch中的聚合，包含多种类型，最常用的两种，一个叫桶，一个叫度量： > 桶（bucket） 桶的作用，是按照某种方式对数据进行分组，每一组数据在ES中称为一个桶，例如我们根据国籍对人划分，可以得到中国桶、英国桶，日本桶……或者我们按照年龄段对人进行划分：0~10,10~20,20~30,30~40等。 Elasticsearch中提供的划分桶的方式有很多： - Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组 - Histogram Aggregation：根据数值阶梯分组，与日期类似 - Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组 - Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组 - …… 综上所述，我们发现bucket aggregations 只负责对数据进行分组，并不进行计算，因此往往bucket中往往会嵌套另一种聚合：metrics aggregations即度量 > 度量（metrics） 分组完成以后，我们一般会对组中的数据进行聚合运算，例如求平均值、最大、最小、求和等，这些在ES中称为度量 比较常用的一些度量聚合方式： - Avg Aggregation：求平均值 - Max Aggregation：求最大值 - Min Aggregation：求最小值 - Percentiles Aggregation：求百分比 - Stats Aggregation：同时返回avg、max、min、sum、count等 - Sum Aggregation：求和 - Top hits Aggregation：求前几 - Value Count Aggregation：求总数 - …… 为了测试聚合，我们先批量导入一些数据 创建索引： \\12345678910111213141516171819202122232425262728293031323334353637383940PUT /cars&#123; \"settings\": &#123;​ \"number_of_shards\": 1,​ \"number_of_replicas\": 0 &#125;, \"mappings\": &#123;​ \"transactions\": &#123;​ \"properties\": &#123;​ \"color\": &#123;​ \"type\": \"keyword\"​ &#125;,​ \"make\": &#123;​ \"type\": \"keyword\"​ &#125;​ &#125;​ &#125; &#125;&#125;\\ 注意：在ES中，需要进行聚合、排序、过滤的字段其处理方式比较特殊，因此不能被分词。这里我们将color和make这两个文字类型的字段设置为keyword类型，这个类型不会被分词，将来就可以参与聚合 导入数据 \\123456789101112131415161718192021222324252627282930313233343536POST /cars/transactions/_bulk&#123; \"index\": &#123;&#125;&#125;&#123; \"price\" : 10000, \"color\" : \"red\", \"make\" : \"honda\", \"sold\" : \"2014-10-28\" &#125;&#123; \"index\": &#123;&#125;&#125;&#123; \"price\" : 20000, \"color\" : \"red\", \"make\" : \"honda\", \"sold\" : \"2014-11-05\" &#125;&#123; \"index\": &#123;&#125;&#125;&#123; \"price\" : 30000, \"color\" : \"green\", \"make\" : \"ford\", \"sold\" : \"2014-05-18\" &#125;&#123; \"index\": &#123;&#125;&#125;&#123; \"price\" : 15000, \"color\" : \"blue\", \"make\" : \"toyota\", \"sold\" : \"2014-07-02\" &#125;&#123; \"index\": &#123;&#125;&#125;&#123; \"price\" : 12000, \"color\" : \"green\", \"make\" : \"toyota\", \"sold\" : \"2014-08-19\" &#125;&#123; \"index\": &#123;&#125;&#125;&#123; \"price\" : 20000, \"color\" : \"red\", \"make\" : \"honda\", \"sold\" : \"2014-11-05\" &#125;&#123; \"index\": &#123;&#125;&#125;&#123; \"price\" : 80000, \"color\" : \"red\", \"make\" : \"bmw\", \"sold\" : \"2014-01-01\" &#125;&#123; \"index\": &#123;&#125;&#125;&#123; \"price\" : 25000, \"color\" : \"blue\", \"make\" : \"ford\", \"sold\" : \"2014-02-12\" &#125;\\ ## 4.2 聚合为桶 首先，我们按照 汽车的颜色color来划分桶 \\123456789101112131415161718192021222324GET /cars/_search&#123;​ \"size\" : 0,​ \"aggs\" : &#123; ​ \"popular_colors\" : &#123; ​ \"terms\" : &#123; ​ \"field\" : \"color\"​ &#125;​ &#125;​ &#125;&#125;\\ - size： 查询条数，这里设置为0，因为我们不关心搜索到的数据，只关心聚合结果，提高效率 - aggs：声明这是一个聚合查询，是aggregations的缩写 - popular_colors：给这次聚合起一个名字，任意。 ​ - terms：划分桶的方式，这里是根据词条划分 ​ - field：划分桶的字段 结果： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&#123; \"took\": 1, \"timed_out\": false, \"_shards\": &#123;​ \"total\": 1,​ \"successful\": 1,​ \"skipped\": 0,​ \"failed\": 0 &#125;, \"hits\": &#123;​ \"total\": 8,​ \"max_score\": 0,​ \"hits\": [] &#125;, \"aggregations\": &#123;​ \"popular_colors\": &#123;​ \"doc_count_error_upper_bound\": 0,​ \"sum_other_doc_count\": 0,​ \"buckets\": [​ &#123;​ \"key\": \"red\",​ \"doc_count\": 4​ &#125;,​ &#123;​ \"key\": \"blue\",​ \"doc_count\": 2​ &#125;,​ &#123;​ \"key\": \"green\",​ \"doc_count\": 2​ &#125;​ ]​ &#125; &#125;&#125;\\ - hits：查询结果为空，因为我们设置了size为0 - aggregations：聚合的结果 - popular_colors：我们定义的聚合名称 - buckets：查找到的桶，每个不同的color字段值都会形成一个桶 - key：这个桶对应的color字段的值 - doc_count：这个桶中的文档数量 通过聚合的结果我们发现，目前红色的小车比较畅销！ ## 4.3 桶内度量 前面的例子告诉我们每个桶里面的文档数量，这很有用。 但通常，我们的应用需要提供更复杂的文档度量。 例如，每种颜色汽车的平均价格是多少？ 因此，我们需要告诉Elasticsearch使用哪个字段，使用何种度量方式进行运算，这些信息要嵌套在桶内，度量的运算会基于桶内的文档进行 现在，我们为刚刚的聚合结果添加 求价格平均值的度量： \\1234567891011121314151617181920212223242526272829303132333435363738GET /cars/_search&#123;​ \"size\" : 0,​ \"aggs\" : &#123; ​ \"popular_colors\" : &#123; ​ \"terms\" : &#123; ​ \"field\" : \"color\"​ &#125;,​ \"aggs\":&#123;​ \"avg_price\": &#123; ​ \"avg\": &#123;​ \"field\": \"price\" ​ &#125;​ &#125;​ &#125;​ &#125;​ &#125;&#125;\\ - aggs：我们在上一个aggs(popular_colors)中添加新的aggs。可见度量也是一个聚合,度量是在桶内的聚合 - avg_price：聚合的名称 - avg：度量的类型，这里是求平均值 - field：度量运算的字段 结果： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364... \"aggregations\": &#123;​ \"popular_colors\": &#123;​ \"doc_count_error_upper_bound\": 0,​ \"sum_other_doc_count\": 0,​ \"buckets\": [​ &#123;​ \"key\": \"red\",​ \"doc_count\": 4,​ \"avg_price\": &#123;​ \"value\": 32500​ &#125;​ &#125;,​ &#123;​ \"key\": \"blue\",​ \"doc_count\": 2,​ \"avg_price\": &#123;​ \"value\": 20000​ &#125;​ &#125;,​ &#123;​ \"key\": \"green\",​ \"doc_count\": 2,​ \"avg_price\": &#123;​ \"value\": 21000​ &#125;​ &#125;​ ]​ &#125; &#125;...\\ 可以看到每个桶中都有自己的avg_price字段，这是度量聚合的结果 ## 4.4 桶内嵌套桶 刚刚的案例中，我们在桶内嵌套度量运算。事实上桶不仅可以嵌套运算， 还可以再嵌套其它桶。也就是说在每个分组中，再分更多组。 比如：我们想统计每种颜色的汽车中，分别属于哪个制造商，按照make字段再进行分桶 \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748GET /cars/_search&#123;​ \"size\" : 0,​ \"aggs\" : &#123; ​ \"popular_colors\" : &#123; ​ \"terms\" : &#123; ​ \"field\" : \"color\"​ &#125;,​ \"aggs\":&#123;​ \"avg_price\": &#123; ​ \"avg\": &#123;​ \"field\": \"price\" ​ &#125;​ &#125;,​ \"maker\":&#123;​ \"terms\":&#123;​ \"field\":\"make\"​ &#125;​ &#125;​ &#125;​ &#125;​ &#125;&#125;\\ - 原来的color桶和avg计算我们不变 - maker：在嵌套的aggs下新添一个桶，叫做maker - terms：桶的划分类型依然是词条 - filed：这里根据make字段进行划分 部分结果： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150...&#123;\"aggregations\": &#123;​ \"popular_colors\": &#123;​ \"doc_count_error_upper_bound\": 0,​ \"sum_other_doc_count\": 0,​ \"buckets\": [​ &#123;​ \"key\": \"red\",​ \"doc_count\": 4,​ \"maker\": &#123;​ \"doc_count_error_upper_bound\": 0,​ \"sum_other_doc_count\": 0,​ \"buckets\": [​ &#123;​ \"key\": \"honda\",​ \"doc_count\": 3​ &#125;,​ &#123;​ \"key\": \"bmw\",​ \"doc_count\": 1​ &#125;​ ]​ &#125;,​ \"avg_price\": &#123;​ \"value\": 32500​ &#125;​ &#125;,​ &#123;​ \"key\": \"blue\",​ \"doc_count\": 2,​ \"maker\": &#123;​ \"doc_count_error_upper_bound\": 0,​ \"sum_other_doc_count\": 0,​ \"buckets\": [​ &#123;​ \"key\": \"ford\",​ \"doc_count\": 1​ &#125;,​ &#123;​ \"key\": \"toyota\",​ \"doc_count\": 1​ &#125;​ ]​ &#125;,​ \"avg_price\": &#123;​ \"value\": 20000​ &#125;​ &#125;,​ &#123;​ \"key\": \"green\",​ \"doc_count\": 2,​ \"maker\": &#123;​ \"doc_count_error_upper_bound\": 0,​ \"sum_other_doc_count\": 0,​ \"buckets\": [​ &#123;​ \"key\": \"ford\",​ \"doc_count\": 1​ &#125;,​ &#123;​ \"key\": \"toyota\",​ \"doc_count\": 1​ &#125;​ ]​ &#125;,​ \"avg_price\": &#123;​ \"value\": 21000​ &#125;​ &#125;​ ]​ &#125; &#125;&#125;...\\ - 我们可以看到，新的聚合maker被嵌套在原来每一个color的桶中。 - 每个颜色下面都根据 make字段进行了分组 - 我们能读取到的信息： - 红色车共有4辆 - 红色车的平均售价是 $32，500 美元。 - 其中3辆是 Honda 本田制造，1辆是 BMW 宝马制造。 ## 4.5.划分桶的其它方式 前面讲了，划分桶的方式有很多，例如： - Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组 - Histogram Aggregation：根据数值阶梯分组，与日期类似 - Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组 - Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组 刚刚的案例中，我们采用的是Terms Aggregation，即根据词条划分桶。 接下来，我们再学习几个比较实用的： ### 4.5.1.阶梯分桶Histogram > 原理： histogram是把数值类型的字段，按照一定的阶梯大小进行分组。你需要指定一个阶梯值（interval）来划分阶梯大小。 举例： 比如你有价格字段，如果你设定interval的值为200，那么阶梯就会是这样的： 0，200，400，600，… 上面列出的是每个阶梯的key，也是区间的启点。 如果一件商品的价格是450，会落入哪个阶梯区间呢？计算公式如下： \\1234bucket_key = Math.floor((value - offset) / interval) * interval + offset\\ value：就是当前数据的值，本例中是450 offset：起始偏移量，默认为0 interval：阶梯间隔，比如200 因此你得到的key = Math.floor((450 - 0) / 200) * 200 + 0 = 400 > 操作一下： 比如，我们对汽车的价格进行分组，指定间隔interval为5000： \\1234567891011121314151617181920212223242526GET /cars/_search&#123; \"size\":0, \"aggs\":&#123;​ \"price\":&#123;​ \"histogram\": &#123;​ \"field\": \"price\",​ \"interval\": 5000​ &#125;​ &#125; &#125;&#125;\\ 结果： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164&#123; \"took\": 21, \"timed_out\": false, \"_shards\": &#123;​ \"total\": 5,​ \"successful\": 5,​ \"skipped\": 0,​ \"failed\": 0 &#125;, \"hits\": &#123;​ \"total\": 8,​ \"max_score\": 0,​ \"hits\": [] &#125;, \"aggregations\": &#123;​ \"price\": &#123;​ \"buckets\": [​ &#123;​ \"key\": 10000,​ \"doc_count\": 2​ &#125;,​ &#123;​ \"key\": 15000,​ \"doc_count\": 1​ &#125;,​ &#123;​ \"key\": 20000,​ \"doc_count\": 2​ &#125;,​ &#123;​ \"key\": 25000,​ \"doc_count\": 1​ &#125;,​ &#123;​ \"key\": 30000,​ \"doc_count\": 1​ &#125;,​ &#123;​ \"key\": 35000,​ \"doc_count\": 0​ &#125;,​ &#123;​ \"key\": 40000,​ \"doc_count\": 0​ &#125;,​ &#123;​ \"key\": 45000,​ \"doc_count\": 0​ &#125;,​ &#123;​ \"key\": 50000,​ \"doc_count\": 0​ &#125;,​ &#123;​ \"key\": 55000,​ \"doc_count\": 0​ &#125;,​ &#123;​ \"key\": 60000,​ \"doc_count\": 0​ &#125;,​ &#123;​ \"key\": 65000,​ \"doc_count\": 0​ &#125;,​ &#123;​ \"key\": 70000,​ \"doc_count\": 0​ &#125;,​ &#123;​ \"key\": 75000,​ \"doc_count\": 0​ &#125;,​ &#123;​ \"key\": 80000,​ \"doc_count\": 1​ &#125;​ ]​ &#125; &#125;&#125;\\ 你会发现，中间有大量的文档数量为0 的桶，看起来很丑。 我们可以增加一个参数min_doc_count为1，来约束最少文档数量为1，这样文档数量为0的桶会被过滤 示例： \\12345678910111213141516171819202122232425262728GET /cars/_search&#123; \"size\":0, \"aggs\":&#123;​ \"price\":&#123;​ \"histogram\": &#123;​ \"field\": \"price\",​ \"interval\": 5000,​ \"min_doc_count\": 1​ &#125;​ &#125; &#125;&#125;\\ 结果： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&#123; \"took\": 15, \"timed_out\": false, \"_shards\": &#123;​ \"total\": 5,​ \"successful\": 5,​ \"skipped\": 0,​ \"failed\": 0 &#125;, \"hits\": &#123;​ \"total\": 8,​ \"max_score\": 0,​ \"hits\": [] &#125;, \"aggregations\": &#123;​ \"price\": &#123;​ \"buckets\": [​ &#123;​ \"key\": 10000,​ \"doc_count\": 2​ &#125;,​ &#123;​ \"key\": 15000,​ \"doc_count\": 1​ &#125;,​ &#123;​ \"key\": 20000,​ \"doc_count\": 2​ &#125;,​ &#123;​ \"key\": 25000,​ \"doc_count\": 1​ &#125;,​ &#123;​ \"key\": 30000,​ \"doc_count\": 1​ &#125;,​ &#123;​ \"key\": 80000,​ \"doc_count\": 1​ &#125;​ ]​ &#125; &#125;&#125;\\ 完美，！ 如果你用kibana将结果变为柱形图，会更好看： ### 4.5.2.范围分桶range 范围分桶与阶梯分桶类似，也是把数字按照阶段进行分组，只不过range方式需要你自己指定每一组的起始和结束大小。 # 5.Spring Data Elasticsearch Elasticsearch提供的Java客户端有一些不太方便的地方： - 很多地方需要拼接Json字符串，在java中拼接字符串有多恐怖你应该懂的 - 需要自己把对象序列化为json存储 - 查询到结果也需要自己反序列化为对象 因此，我们这里就不讲解原生的Elasticsearch客户端API了。 而是学习Spring提供的套件：Spring Data Elasticsearch。 ## 5.1.简介 Spring Data Elasticsearch是Spring Data项目下的一个子模块。 查看 Spring Data的官网：http://projects.spring.io/spring-data/ > Spring Data的使命是为数据访问提供熟悉且一致的基于Spring的编程模型，同时仍保留底层数据存储的特殊特性。 > > 它使得使用数据访问技术，关系数据库和非关系数据库，map-reduce框架和基于云的数据服务变得容易。这是一个总括项目，其中包含许多特定于给定数据库的子项目。这些令人兴奋的技术项目背后，是由许多公司和开发人员合作开发的。 Spring Data 的使命是给各种数据访问提供统一的编程接口，不管是关系型数据库（如MySQL），还是非关系数据库（如Redis），或者类似Elasticsearch这样的索引数据库。从而简化开发人员的代码，提高开发效率。 包含很多不同数据操作的模块： Spring Data Elasticsearch的页面：https://projects.spring.io/spring-data-elasticsearch/ 特征： - 支持Spring的基于@Configuration的java配置方式，或者XML配置方式 - 提供了用于操作ES的便捷工具类ElasticsearchTemplate。包括实现文档到POJO之间的自动智能映射。 - 利用Spring的数据转换服务实现的功能丰富的对象映射 - 基于注解的元数据映射方式，而且可扩展以支持更多不同的数据格式 - 根据持久层接口自动生成对应实现方法，无需人工编写基本操作代码（类似mybatis，根据接口自动得到实现）。当然，也支持人工定制查询 ## 5.2.创建Demo工程 我们新建一个demo，学习Elasticsearch pom依赖： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.leyou.demo&lt;/groupId&gt; &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;elasticsearch&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;​ &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;​ &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt;​ &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;​ &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;​ &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;​ &lt;scope&gt;test&lt;/scope&gt;​ &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt;​ &lt;plugins&gt;​ &lt;plugin&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;​ &lt;/plugin&gt;​ &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt;\\ application.yml文件配置： \\123456789101112spring: data:​ elasticsearch:​ cluster-name: elasticsearch​ cluster-nodes: 192.168.56.101:9300\\ ## 5.3.实体类及注解 首先我们准备好实体类： \\123456789101112131415161718public class Item &#123;​ Long id;​ String title; //标题​ String category;// 分类​ String brand; // 品牌​ Double price; // 价格​ String images; // 图片地址&#125;\\ > 映射 Spring Data通过注解来声明字段的映射属性，有下面的三个注解： - @Document 作用在类，标记实体类为文档对象，一般有两个属性 - indexName：对应索引库名称 - type：对应在索引库中的类型 - shards：分片数量，默认5 - replicas：副本数量，默认1 - @Id 作用在成员变量，标记一个字段作为id主键 - @Field 作用在成员变量，标记为文档的字段，并指定字段映射属性： - type：字段类型，取值是枚举：FieldType - index：是否索引，布尔类型，默认是true - store：是否存储，布尔类型，默认是false - analyzer：分词器名称 示例： \\123456789101112131415161718192021222324252627282930313233343536373839404142@Document(indexName = \"item\",type = \"docs\", shards = 1, replicas = 0)public class Item &#123;​ @Id​ private Long id;​ ​ @Field(type = FieldType.Text, analyzer = \"ik_max_word\")​ private String title; //标题​ ​ @Field(type = FieldType.Keyword)​ private String category;// 分类​ ​ @Field(type = FieldType.Keyword)​ private String brand; // 品牌​ ​ @Field(type = FieldType.Double)​ private Double price; // 价格​ ​ @Field(index = false, type = FieldType.Keyword)​ private String images; // 图片地址&#125;\\ ## 5.4.Template索引操作 ### 5.4.1.创建索引和映射 > 创建索引 ElasticsearchTemplate中提供了创建索引的API： 可以根据类的信息自动生成，也可以手动指定indexName和Settings > 映射 映射相关的API： 可以根据类的字节码信息（注解配置）来生成映射，或者手动编写映射 我们这里采用类的字节码信息创建索引并映射： \\12345678910111213141516171819202122232425262728@RunWith(SpringRunner.class)@SpringBootTest(classes = ItcastElasticsearchApplication.class)public class IndexTest &#123;​ @Autowired​ private ElasticsearchTemplate elasticsearchTemplate;​ @Test​ public void testCreate()&#123;​ // 创建索引，会根据Item类的@Document注解信息来创建​ elasticsearchTemplate.createIndex(Item.class);​ // 配置映射，会根据Item类中的id、Field等字段来自动完成映射​ elasticsearchTemplate.putMapping(Item.class);​ &#125;&#125;\\ 结果： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192GET /item&#123; \"item\": &#123;​ \"aliases\": &#123;&#125;,​ \"mappings\": &#123;​ \"docs\": &#123;​ \"properties\": &#123;​ \"brand\": &#123;​ \"type\": \"keyword\"​ &#125;,​ \"category\": &#123;​ \"type\": \"keyword\"​ &#125;,​ \"images\": &#123;​ \"type\": \"keyword\",​ \"index\": false​ &#125;,​ \"price\": &#123;​ \"type\": \"double\"​ &#125;,​ \"title\": &#123;​ \"type\": \"text\",​ \"analyzer\": \"ik_max_word\"​ &#125;​ &#125;​ &#125;​ &#125;,​ \"settings\": &#123;​ \"index\": &#123;​ \"refresh_interval\": \"1s\",​ \"number_of_shards\": \"1\",​ \"provided_name\": \"item\",​ \"creation_date\": \"1525405022589\",​ \"store\": &#123;​ \"type\": \"fs\"​ &#125;,​ \"number_of_replicas\": \"0\",​ \"uuid\": \"4sE9SAw3Sqq1aAPz5F6OEg\",​ \"version\": &#123;​ \"created\": \"6020499\"​ &#125;​ &#125;​ &#125; &#125;&#125;\\ ### 5.3.2.删除索引 删除索引的API： 可以根据类名或索引名删除。 示例： \\12345678910@Testpublic void deleteIndex() &#123;​ esTemplate.deleteIndex(\"heima\");&#125;\\ 结果： ## 5.4.Repository文档操作 Spring Data 的强大之处，就在于你不用写任何DAO处理，自动根据方法名或类的信息进行CRUD操作。只要你定义一个接口，然后继承Repository提供的一些子接口，就能具备各种基本的CRUD功能。 我们只需要定义接口，然后继承它就OK了。 \\123456public interface ItemRepository extends ElasticsearchRepository&lt;Item,Long&gt; &#123;&#125;\\ 来看下Repository的继承关系： 我们看到有一个ElasticsearchRepository接口： ### 5.4.1.新增文档 \\123456789101112131415161718@Autowiredprivate ItemRepository itemRepository;@Testpublic void index() &#123;​ Item item = new Item(1L, \"小米手机7\", \" 手机\",​ \"小米\", 3499.00, \"http://image.leyou.com/13123.jpg\");​ itemRepository.save(item);&#125;\\ 去页面查询看看： \\1234GET /item/_search\\ 结果： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&#123; \"took\": 14, \"timed_out\": false, \"_shards\": &#123;​ \"total\": 1,​ \"successful\": 1,​ \"skipped\": 0,​ \"failed\": 0 &#125;, \"hits\": &#123;​ \"total\": 1,​ \"max_score\": 1,​ \"hits\": [​ &#123;​ \"_index\": \"item\",​ \"_type\": \"docs\",​ \"_id\": \"1\",​ \"_score\": 1,​ \"_source\": &#123;​ \"id\": 1,​ \"title\": \"小米手机7\",​ \"category\": \" 手机\",​ \"brand\": \"小米\",​ \"price\": 3499,​ \"images\": \"http://image.leyou.com/13123.jpg\"​ &#125;​ &#125;​ ] &#125;&#125;\\ ### 5.4.2.批量新增 代码： \\123456789101112131415161718@Testpublic void indexList() &#123;​ List&lt;Item&gt; list = new ArrayList&lt;&gt;();​ list.add(new Item(2L, \"坚果手机R1\", \" 手机\", \"锤子\", 3699.00, \"http://image.leyou.com/123.jpg\"));​ list.add(new Item(3L, \"华为META10\", \" 手机\", \"华为\", 4499.00, \"http://image.leyou.com/3.jpg\"));​ // 接收对象集合，实现批量新增​ itemRepository.saveAll(list);&#125;\\ 再次去页面查询： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118&#123; \"took\": 5, \"timed_out\": false, \"_shards\": &#123;​ \"total\": 1,​ \"successful\": 1,​ \"skipped\": 0,​ \"failed\": 0 &#125;, \"hits\": &#123;​ \"total\": 3,​ \"max_score\": 1,​ \"hits\": [​ &#123;​ \"_index\": \"item\",​ \"_type\": \"docs\",​ \"_id\": \"2\",​ \"_score\": 1,​ \"_source\": &#123;​ \"id\": 2,​ \"title\": \"坚果手机R1\",​ \"category\": \" 手机\",​ \"brand\": \"锤子\",​ \"price\": 3699,​ \"images\": \"http://image.leyou.com/13123.jpg\"​ &#125;​ &#125;,​ &#123;​ \"_index\": \"item\",​ \"_type\": \"docs\",​ \"_id\": \"3\",​ \"_score\": 1,​ \"_source\": &#123;​ \"id\": 3,​ \"title\": \"华为META10\",​ \"category\": \" 手机\",​ \"brand\": \"华为\",​ \"price\": 4499,​ \"images\": \"http://image.leyou.com/13123.jpg\"​ &#125;​ &#125;,​ &#123;​ \"_index\": \"item\",​ \"_type\": \"docs\",​ \"_id\": \"1\",​ \"_score\": 1,​ \"_source\": &#123;​ \"id\": 1,​ \"title\": \"小米手机7\",​ \"category\": \" 手机\",​ \"brand\": \"小米\",​ \"price\": 3499,​ \"images\": \"http://image.leyou.com/13123.jpg\"​ &#125;​ &#125;​ ] &#125;&#125;\\ ### 5.4.3.修改文档 修改和新增是同一个接口，区分的依据就是id，这一点跟我们在页面发起PUT请求是类似的。 ### 5.4.4.基本查询 ElasticsearchRepository提供了一些基本的查询方法： 我们来试试查询所有： \\1234567891011121314@Testpublic void testFind()&#123;​ // 查询全部，并安装价格降序排序​ Iterable&lt;Item&gt; items = this.itemRepository.findAll(Sort.by(Sort.Direction.DESC, \"price\"));​ items.forEach(item-&gt; System.out.println(item));&#125;\\ 结果： ### 5.4.5.自定义方法 Spring Data 的另一个强大功能，是根据方法名称自动实现功能。 比如：你的方法名叫做：findByTitle，那么它就知道你是根据title查询，然后自动帮你完成，无需写实现类。 当然，方法名称要符合一定的约定： | Keyword | Sample | Elasticsearch Query String | | ——————— | —————————————- | —————————————- | | And | findByNameAndPrice | {&quot;bool&quot; : {&quot;must&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;price&quot; : &quot;?&quot;}} ]}} | | Or | findByNameOrPrice | {&quot;bool&quot; : {&quot;should&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;price&quot; : &quot;?&quot;}} ]}} | | Is | findByName | {&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}} | | Not | findByNameNot | {&quot;bool&quot; : {&quot;must_not&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}} | | Between | findByPriceBetween | {&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}} | | LessThanEqual | findByPriceLessThan | {&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}} | | GreaterThanEqual | findByPriceGreaterThan | {&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}} | | Before | findByPriceBefore | {&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}} | | After | findByPriceAfter | {&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}} | | Like | findByNameLike | {&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true}}}}} | | StartingWith | findByNameStartingWith | {&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true}}}}} | | EndingWith | findByNameEndingWith | {&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;*?&quot;,&quot;analyze_wildcard&quot; : true}}}}} | | Contains/Containing | findByNameContaining | {&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;**?**&quot;,&quot;analyze_wildcard&quot; : true}}}}} | | In | findByNameIn(Collection&lt;String&gt;names) | {&quot;bool&quot; : {&quot;must&quot; : {&quot;bool&quot; : {&quot;should&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}} ]}}}} | | NotIn | findByNameNotIn(Collection&lt;String&gt;names) | {&quot;bool&quot; : {&quot;must_not&quot; : {&quot;bool&quot; : {&quot;should&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}}} | | Near | findByStoreNear | Not Supported Yet ! | | True | findByAvailableTrue | {&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : true}}}} | | False | findByAvailableFalse | {&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : false}}}} | | OrderBy | findByAvailableTrueOrderByNameDesc | {&quot;sort&quot; : [{ &quot;name&quot; : {&quot;order&quot; : &quot;desc&quot;} }],&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : true}}}} | 例如，我们来按照价格区间查询，定义这样的一个方法： \\1234567891011121314151617181920public interface ItemRepository extends ElasticsearchRepository&lt;Item,Long&gt; &#123;​ /**​ \\* 根据价格区间查询​ \\* @param price1​ \\* @param price2​ \\* @return​ */​ List&lt;Item&gt; findByPriceBetween(double price1, double price2);&#125;\\ 然后添加一些测试数据： \\123456789101112131415161718192021222324@Testpublic void indexList() &#123;​ List&lt;Item&gt; list = new ArrayList&lt;&gt;();​ list.add(new Item(1L, \"小米手机7\", \"手机\", \"小米\", 3299.00, \"http://image.leyou.com/13123.jpg\"));​ list.add(new Item(2L, \"坚果手机R1\", \"手机\", \"锤子\", 3699.00, \"http://image.leyou.com/13123.jpg\"));​ list.add(new Item(3L, \"华为META10\", \"手机\", \"华为\", 4499.00, \"http://image.leyou.com/13123.jpg\"));​ list.add(new Item(4L, \"小米Mix2S\", \"手机\", \"小米\", 4299.00, \"http://image.leyou.com/13123.jpg\"));​ list.add(new Item(5L, \"荣耀V10\", \"手机\", \"华为\", 2799.00, \"http://image.leyou.com/13123.jpg\"));​ // 接收对象集合，实现批量新增​ itemRepository.saveAll(list);&#125;\\ 不需要写实现类，然后我们直接去运行： \\12345678910111213141516@Testpublic void queryByPriceBetween()&#123;​ List&lt;Item&gt; list = this.itemRepository.findByPriceBetween(2000.00, 3500.00);​ for (Item item : list) &#123;​ System.out.println(\"item = \" + item);​ &#125;&#125;\\ 结果： 虽然基本查询和自定义方法已经很强大了，但是如果是复杂查询（模糊、通配符、词条查询等）就显得力不从心了。此时，我们只能使用原生查询。 ## 5.5.高级查询 ### 5.5.1.基本查询 先看看基本玩法 \\123456789101112131415161718@Testpublic void testQuery()&#123;​ // 词条查询​ MatchQueryBuilder queryBuilder = QueryBuilders.matchQuery(\"title\", \"小米\");​ // 执行查询​ Iterable&lt;Item&gt; items = this.itemRepository.search(queryBuilder);​ items.forEach(System.out::println);&#125;\\ Repository的search方法需要QueryBuilder参数，elasticSearch为我们提供了一个对象QueryBuilders： QueryBuilders提供了大量的静态方法，用于生成各种不同类型的查询对象，例如：词条、模糊、通配符等QueryBuilder对象。 结果： elasticsearch提供很多可用的查询方式，但是不够灵活。如果想玩过滤或者聚合查询等就很难了。 ### 5.5.2.自定义查询 先来看最基本的match query： \\123456789101112131415161718192021222324252627282930@Testpublic void testNativeQuery()&#123;​ // 构建查询条件​ NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();​ // 添加基本的分词查询​ queryBuilder.withQuery(QueryBuilders.matchQuery(\"title\", \"小米\"));​ // 执行搜索，获取结果​ Page&lt;Item&gt; items = this.itemRepository.search(queryBuilder.build());​ // 打印总条数​ System.out.println(items.getTotalElements());​ // 打印总页数​ System.out.println(items.getTotalPages());​ items.forEach(System.out::println);&#125;\\ NativeSearchQueryBuilder：Spring提供的一个查询条件构建器，帮助构建json格式的请求体 Page&lt;item&gt;：默认是分页查询，因此返回的是一个分页的结果对象，包含属性： - totalElements：总条数 - totalPages：总页数 - Iterator：迭代器，本身实现了Iterator接口，因此可直接迭代得到当前页的数据 - 其它属性： 结果： ### 5.5.4.分页查询 利用NativeSearchQueryBuilder可以方便的实现分页： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748@Testpublic void testNativeQuery()&#123;​ // 构建查询条件​ NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();​ // 添加基本的分词查询​ queryBuilder.withQuery(QueryBuilders.termQuery(\"category\", \"手机\"));​ // 初始化分页参数​ int page = 0;​ int size = 3;​ // 设置分页参数​ queryBuilder.withPageable(PageRequest.of(page, size));​ // 执行搜索，获取结果​ Page&lt;Item&gt; items = this.itemRepository.search(queryBuilder.build());​ // 打印总条数​ System.out.println(items.getTotalElements());​ // 打印总页数​ System.out.println(items.getTotalPages());​ // 每页大小​ System.out.println(items.getSize());​ // 当前页​ System.out.println(items.getNumber());​ items.forEach(System.out::println);&#125;\\ 结果： 可以发现，Elasticsearch中的分页是从第0页开始。 ### 5.5.5.排序 排序也通用通过NativeSearchQueryBuilder完成： \\123456789101112131415161718192021222324252627282930@Testpublic void testSort()&#123;​ // 构建查询条件​ NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();​ // 添加基本的分词查询​ queryBuilder.withQuery(QueryBuilders.termQuery(\"category\", \"手机\"));​ // 排序​ queryBuilder.withSort(SortBuilders.fieldSort(\"price\").order(SortOrder.DESC));​ // 执行搜索，获取结果​ Page&lt;Item&gt; items = this.itemRepository.search(queryBuilder.build());​ // 打印总条数​ System.out.println(items.getTotalElements());​ items.forEach(System.out::println);&#125;\\ 结果： ## 5.6.聚合 ### 5.6.1.聚合为桶 桶就是分组，比如这里我们按照品牌brand进行分组： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950@Testpublic void testAgg()&#123;​ NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();​ // 不查询任何结果​ queryBuilder.withSourceFilter(new FetchSourceFilter(new String[]&#123;\"\"&#125;, null));​ // 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand​ queryBuilder.addAggregation(​ AggregationBuilders.terms(\"brands\").field(\"brand\"));​ // 2、查询,需要把结果强转为AggregatedPage类型​ AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) this.itemRepository.search(queryBuilder.build());​ // 3、解析​ // 3.1、从结果中取出名为brands的那个聚合，​ // 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型​ StringTerms agg = (StringTerms) aggPage.getAggregation(\"brands\");​ // 3.2、获取桶​ List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();​ // 3.3、遍历​ for (StringTerms.Bucket bucket : buckets) &#123;​ // 3.4、获取桶中的key，即品牌名称​ System.out.println(bucket.getKeyAsString());​ // 3.5、获取桶中的文档数量​ System.out.println(bucket.getDocCount());​ &#125;&#125;\\ 显示的结果： 关键API： - AggregationBuilders：聚合的构建工厂类。所有聚合都由这个类来构建，看看他的静态方法： - AggregatedPage：聚合查询的结果类。它是Page&lt;T&gt;的子接口： AggregatedPage在Page功能的基础上，拓展了与聚合相关的功能，它其实就是对聚合结果的一种封装，大家可以对照聚合结果的JSON结构来看。 而返回的结果都是Aggregation类型对象，不过根据字段类型不同，又有不同的子类表示 我们看下页面的查询的JSON结果与Java类的对照关系： ### 5.6.2.嵌套聚合，求平均值 代码： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556@Testpublic void testSubAgg()&#123;​ NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();​ // 不查询任何结果​ queryBuilder.withSourceFilter(new FetchSourceFilter(new String[]&#123;\"\"&#125;, null));​ // 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand​ queryBuilder.addAggregation(​ AggregationBuilders.terms(\"brands\").field(\"brand\")​ .subAggregation(AggregationBuilders.avg(\"priceAvg\").field(\"price\")) // 在品牌聚合桶内进行嵌套聚合，求平均值​ );​ // 2、查询,需要把结果强转为AggregatedPage类型​ AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) this.itemRepository.search(queryBuilder.build());​ // 3、解析​ // 3.1、从结果中取出名为brands的那个聚合，​ // 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型​ StringTerms agg = (StringTerms) aggPage.getAggregation(\"brands\");​ // 3.2、获取桶​ List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();​ // 3.3、遍历​ for (StringTerms.Bucket bucket : buckets) &#123;​ // 3.4、获取桶中的key，即品牌名称 3.5、获取桶中的文档数量​ System.out.println(bucket.getKeyAsString() + \"，共\" + bucket.getDocCount() + \"台\");​ // 3.6.获取子聚合结果：​ InternalAvg avg = (InternalAvg) bucket.getAggregations().asMap().get(\"priceAvg\");​ System.out.println(\"平均售价：\" + avg.getValue());​ &#125;&#125;\\ 结果：","categories":[],"tags":[],"keywords":[]},{"title":"day10商品管理","slug":"day10商品管理","date":"2019-05-03T03:07:45.000Z","updated":"2019-05-03T03:10:29.646Z","comments":true,"path":"2019/05/03/day10商品管理/","link":"","permalink":"https://mr8649.github.io/2019/05/03/day10商品管理/","excerpt":"","text":"# 0.学习目标 - 独立实现商品新增后台 - 独立实现商品编辑后台 - 独立搭建前台系统页面 # 1.商品新增 当我们点击新增商品按钮： 就会出现一个弹窗： 里面把商品的数据分为了4部分来填写： - 基本信息：主要是一些简单的文本数据，包含了SPU和SpuDetail的部分数据，如 - 商品分类：是SPU中的cid1，cid2，cid3属性 - 品牌：是spu中的brandId属性 - 标题：是spu中的title属性 - 子标题：是spu中的subTitle属性 - 售后服务：是SpuDetail中的afterService属性 - 包装列表：是SpuDetail中的packingList属性 - 商品描述：是SpuDetail中的description属性，数据较多，所以单独放一个页面 - 规格参数：商品规格信息，对应SpuDetail中的genericSpec属性 - SKU属性：spu下的所有Sku信息 对应到页面中的四个stepper-content： ## 1.1.弹窗事件 弹窗是一个独立组件： 并且在Goods组件中已经引用它： 并且在页面中渲染： 在新增商品按钮的点击事件中，改变这个dialog的show属性： ## 1.2.基本数据 我们先来看下基本数据： ### 1.2.1.商品分类 商品分类信息查询我们之前已经做过，所以这里的级联选框已经实现完成： 刷新页面，可以看到请求已经发出： 效果： ### 1.2.2.品牌选择 #### 1.2.2.1页面 品牌也是一个下拉选框，不过其选项是不确定的，只有当用户选择了商品分类，才会把这个分类下的所有品牌展示出来。 所以页面编写了watch函数，监控商品分类的变化，每当商品分类值有变化，就会发起请求，查询品牌列表： 选择商品分类后，可以看到请求发起： 接下来，我们只要编写后台接口，根据商品分类id，查询对应品牌即可。 #### 1.2.2.2后台接口 页面需要去后台查询品牌信息，我们自然需要提供： 请求方式：GET 请求路径：/brand/cid/{cid} 请求参数：cid 响应数据：品牌集合 > BrandController \\1234567891011121314151617181920212223242526272829303132/**​ \\* 根据分类查询品牌​ \\* @param cid​ \\* @return​ */@GetMapping(\"cid/&#123;cid&#125;\")public ResponseEntity&lt;List&lt;Brand&gt;&gt; queryBrandListByCid(@PathVariable(\"cid\")Long cid)&#123;​ List&lt;Brand&gt; brandList = this.brandService.queryByCid(cid);​ if(CollectionUtils.isEmpty(brandList))&#123;​ // 响应404​ return ResponseEntity.badRequest().build();​ &#125;​ // 响应200​ return ResponseEntity.ok(brandList);&#125;\\ > BrandService \\12345678public List&lt;Brand&gt; queryBrandByCategory(Long cid) &#123;​ return this.brandMapper.queryByCategoryId(cid);&#125;\\ > BrandMapper 根据分类查询品牌有中间表，需要自己编写Sql： \\123456@Select(\"SELECT b.* FROM tb_brand b LEFT JOIN tb_category_brand cb ON b.id = cb.brand_id WHERE cb.category_id = #&#123;cid&#125;\")List&lt;Brand&gt; queryByCategoryId(Long cid);\\ 效果： ### 1.2.3.其它文本框 剩余的几个属性：标题、子标题等都是普通文本框，我们直接填写即可，没有需要特别注意的。 ## 1.3.商品描述 商品描述信息比较复杂，而且图文并茂，甚至包括视频。 这样的内容，一般都会使用富文本编辑器。 ### 1.3.1.什么是富文本编辑器 百度百科： 通俗来说：富文本，就是比较丰富的文本编辑器。普通的框只能输入文字，而富文本还能给文字加颜色样式等。 富文本编辑器有很多，例如：KindEditor、Ueditor。但并不原生支持vue 但是我们今天要说的，是一款支持Vue的富文本编辑器：vue-quill-editor ### 1.3.2.Vue-Quill-Editor GitHub的主页：https://github.com/surmon-china/vue-quill-editor Vue-Quill-Editor是一个基于Quill的富文本编辑器：Quill的官网 ### 1.3.3.使用指南 使用非常简单： 第一步：安装，使用npm命令： \\1234npm install vue-quill-editor --save\\ 第二步：加载，在js中引入： 全局引入： \\12345678910import Vue from 'vue'import VueQuillEditor from 'vue-quill-editor'const options = &#123;&#125;; /* &#123; default global options &#125; */Vue.use(VueQuillEditor, options); // options可选\\ 局部引入： \\1234567891011121314151617181920import 'quill/dist/quill.core.css'import 'quill/dist/quill.snow.css'import 'quill/dist/quill.bubble.css'import &#123;quillEditor&#125; from 'vue-quill-editor'var vm = new Vue(&#123;​ components:&#123;​ quillEditor​ &#125;&#125;)\\ 我们这里采用局部引用： 第三步：页面使用： \\1234&lt;quill-editor v-model=\"goods.spuDetail.description\" :options=\"editorOption\"/&gt;\\ ### 1.3.4.自定义的富文本编辑器 不过这个组件有个小问题，就是图片上传的无法直接上传到后台，因此我们对其进行了封装，支持了图片的上传。 使用也非常简单： \\12345678&lt;v-stepper-content step=\"2\"&gt;​ &lt;v-editor v-model=\"goods.spuDetail.description\" upload-url=\"/upload/image\"/&gt;&lt;/v-stepper-content&gt;\\ - upload-url：是图片上传的路径 - v-model：双向绑定，将富文本编辑器的内容绑定到goods.spuDetail.description ### 1.3.5.效果 ## 1.4.商品规格参数 规格参数的查询我们之前也已经编写过接口，因为商品规格参数也是与商品分类绑定，所以需要在商品分类变化后去查询，我们也是通过watch监控来实现： 可以看到这里是根据商品分类id查询规格参数：SpecParam。我们之前写过一个根据gid（分组id）来查询规格参数的接口，我们接下来完成根据分类id查询规格参数。 > ### 改造查询规格参数接口 我们在原来的根据 gid（规格组id)查询规格参数的接口上，添加一个参数：cid，即商品分类id。 等一下， 考虑到以后可能还会根据是否搜索、是否为通用属性等条件过滤，我们多添加几个过滤条件： \\123456789101112131415161718192021222324252627282930@GetMapping(\"/params\")public ResponseEntity&lt;List&lt;SpecParam&gt;&gt; querySpecParam(​ @RequestParam(value=\"gid\", required = false) Long gid,​ @RequestParam(value=\"cid\", required = false) Long cid,​ @RequestParam(value=\"searching\", required = false) Boolean searching,​ @RequestParam(value=\"generic\", required = false) Boolean generic​ )&#123;​ List&lt;SpecParam&gt; list =​ this.specificationService.querySpecParams(gid,cid,searching,generic);​ if(list == null || list.size() == 0)&#123;​ return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(list);​ &#125;\\ 改造service： \\123456789101112131415161718public List&lt;SpecParam&gt; querySpecParams(Long gid, Long cid, Boolean searching, Boolean generic) &#123;​ SpecParam param = new SpecParam();​ param.setGroupId(gid);​ param.setCid(cid);​ param.setSearching(searching);​ param.setGeneric(generic);​ return this.specParamMapper.select(param);&#125;\\ 如果param中有属性为null，则不会吧属性作为查询条件，因此该方法具备通用性，即可根据gid查询，也可根据cid查询。 测试： 刷新页面测试： ## 1.5.SKU信息 Sku属性是SPU下的每个商品的不同特征，如图： 当我们填写一些属性后，会在页面下方生成一个sku表格，大家可以计算下会生成多少个不同属性的Sku呢？ 当你选择了上图中的这些选项时： - 颜色共2种：迷夜黑，勃艮第红，绚丽蓝 - 内存共2种：4GB，6GB - 机身存储1种：64GB，128GB 此时会产生多少种SKU呢？ 应该是 3 2 2 = 12种，这其实就是在求笛卡尔积。 我们会在页面下方生成一个sku的表格： ## 1.6.页面表单提交 在sku列表的下方，有一个提交按钮： 并且绑定了点击事件： 点击后会组织数据并向后台提交： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130​ submit() &#123;​ // 表单校验。​ if(!this.$refs.basic.validate)&#123;​ this.$message.error(\"请先完成表单内容！\");​ &#125;​ // 先处理goods，用结构表达式接收,除了categories外，都接收到goodsParams中​ const &#123;​ categories: [&#123; id: cid1 &#125;, &#123; id: cid2 &#125;, &#123; id: cid3 &#125;],​ ...goodsParams​ &#125; = this.goods;​ // 处理规格参数​ const specs = &#123;&#125;;​ this.specs.forEach((&#123; id,v &#125;) =&gt; &#123;​ specs[id] = v;​ &#125;);​ // 处理特有规格参数模板​ const specTemplate = &#123;&#125;;​ this.specialSpecs.forEach((&#123; id, options &#125;) =&gt; &#123;​ specTemplate[id] = options;​ &#125;);​ // 处理sku​ const skus = this.skus​ .filter(s =&gt; s.enable)​ .map((&#123; price, stock, enable, images, indexes, ...rest &#125;) =&gt; &#123;​ // 标题，在spu的title基础上，拼接特有规格属性值​ const title = goodsParams.title + \" \" + Object.values(rest).map(v =&gt; v.v).join(\" \");​ const obj = &#123;&#125;;​ Object.values(rest).forEach(v =&gt; &#123;​ obj[v.id] = v.v;​ &#125;);​ return &#123;​ price: this.$format(price), // 价格需要格式化​ stock,​ indexes,​ enable,​ title, // 基本属性​ images: images ? images.join(\",\") : '', // 图片​ ownSpec: JSON.stringify(obj) // 特有规格参数​ &#125;;​ &#125;);​ Object.assign(goodsParams, &#123;​ cid1,​ cid2,​ cid3, // 商品分类​ skus // sku列表​ &#125;);​ goodsParams.spuDetail.genericSpec = JSON.stringify(specs);​ goodsParams.spuDetail.specialSpec = JSON.stringify(specTemplate);​ // 提交到后台​ this.$http(&#123;​ method: this.isEdit ? \"put\" : \"post\",​ url: \"/item/goods\",​ data: goodsParams​ &#125;)​ .then(() =&gt; &#123;​ // 成功，关闭窗口​ this.$emit(\"close\");​ // 提示成功​ this.$message.success(\"保存成功了\");​ &#125;)​ .catch(() =&gt; &#123;​ this.$message.error(\"保存失败！\");​ &#125;);​ &#125;\\ 点击提交，查看控制台提交的数据格式： 整体是一个json格式数据，包含Spu表所有数据： - brandId：品牌id - cid1、cid2、cid3：商品分类id - subTitle：副标题 - title：标题 - spuDetail：是一个json对象，代表商品详情表数据 - afterService：售后服务 - description：商品描述 - packingList：包装列表 - specialSpec：sku规格属性模板 - genericSpec：通用规格参数 - skus：spu下的所有sku数组，元素是每个sku对象： - title：标题 - images：图片 - price：价格 - stock：库存 - ownSpec：特有规格参数 - indexes：特有规格参数的下标 ## 1.7.后台实现 ### 1.7.1.实体类 SPU和SpuDetail实体类已经添加过，添加Sku和Stock对象： > Sku \\123456789101112131415161718192021222324252627282930313233343536@Table(name = \"tb_sku\")public class Sku &#123;​ @Id​ @GeneratedValue(strategy = GenerationType.IDENTITY)​ private Long id;​ private Long spuId;​ private String title;​ private String images;​ private Long price;​ private String ownSpec;// 商品特殊规格的键值对​ private String indexes;// 商品特殊规格的下标​ private Boolean enable;// 是否有效，逻辑删除用​ private Date createTime;// 创建时间​ private Date lastUpdateTime;// 最后修改时间​ @Transient​ private Integer stock;// 库存&#125;\\ 注意：这里保存了一个库存字段，在数据库中是另外一张表保存的，方便查询。 > Stock \\123456789101112131415161718@Table(name = \"tb_stock\")public class Stock &#123;​ @Id​ private Long skuId;​ private Integer seckillStock;// 秒杀可用库存​ private Integer seckillTotal;// 已秒杀数量​ private Integer stock;// 正常库存&#125;\\ ### 1.7.2.GoodsController 请求方式：POST 请求路径：/goods 请求参数：Spu的json格式的对象，spu中包含spuDetail和Sku集合。这里我们该怎么接收？我们之前定义了一个SpuBo对象，作为业务对象。这里也可以用它，不过需要再扩展spuDetail和skus字段： \\12345678910111213141516171819202122public class SpuBo extends Spu &#123;​ @Transient​ String cname;// 商品分类名称​ @Transient​ String bname;// 品牌名称​ @Transient​ SpuDetail spuDetail;// 商品详情​ @Transient​ List&lt;Sku&gt; skus;// sku列表&#125;\\ - 返回类型：无 代码： \\1234567891011121314151617181920212223242526272829303132/** \\* 新增商品 \\* @param spu \\* @return */@PostMappingpublic ResponseEntity&lt;Void&gt; saveGoods(@RequestBody SpuBo spuBo) &#123;​ try &#123;​ this.goodsService.save(spu);​ return new ResponseEntity&lt;&gt;(HttpStatus.CREATED);​ &#125; catch (Exception e) &#123;​ e.printStackTrace();​ return new ResponseEntity&lt;&gt;(HttpStatus.INTERNAL_SERVER_ERROR);​ &#125;&#125;\\ 注意：通过@RequestBody注解来接收Json请求 ### 1.7.3.GoodsService 这里的逻辑比较复杂，我们除了要对SPU新增以外，还要对SpuDetail、Sku、Stock进行保存 \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566@Transactionalpublic void save(SpuBo spu) &#123;​ // 保存spu​ spu.setSaleable(true);​ spu.setValid(true);​ spu.setCreateTime(new Date());​ spu.setLastUpdateTime(spu.getCreateTime());​ this.spuMapper.insert(spu);​ // 保存spu详情​ spu.getSpuDetail().setSpuId(spu.getId());​ this.spuDetailMapper.insert(spu.getSpuDetail());​ // 保存sku和库存信息​ saveSkuAndStock(spu.getSkus(), spu.getId());&#125;private void saveSkuAndStock(List&lt;Sku&gt; skus, Long spuId) &#123;​ for (Sku sku : skus) &#123;​ if (!sku.getEnable()) &#123;​ continue;​ &#125;​ // 保存sku​ sku.setSpuId(spuId);​ // 初始化时间​ sku.setCreateTime(new Date());​ sku.setLastUpdateTime(sku.getCreateTime());​ this.skuMapper.insert(sku);​ // 保存库存信息​ Stock stock = new Stock();​ stock.setSkuId(sku.getId());​ stock.setStock(sku.getStock());​ this.stockMapper.insert(stock);​ &#125;&#125;\\ ### 1.7.4.Mapper 都是通用Mapper，略 目录结构： # 2.商品修改 ## 2.1.编辑按钮点击事件 在商品详情页，每一个商品后面，都会有一个编辑按钮： 点击这个按钮，就会打开一个商品编辑窗口，我们看下它所绑定的点击事件： 对应的方法： 可以看到这里发起了两个请求，在查询商品详情和sku信息。 因为在商品列表页面，只有spu的基本信息：id、标题、品牌、商品分类等。比较复杂的商品详情（spuDetail)和sku信息都没有，编辑页面要回显数据，就需要查询这些内容。 因此，接下来我们就编写后台接口，提供查询服务接口。 ## 2.2.查询SpuDetail接口 > GoodsController 需要分析的内容： - 请求方式：GET - 请求路径：/spu/detail/{id} - 请求参数：id，应该是spu的id - 返回结果：SpuDetail对象 \\123456789101112131415161718@GetMapping(\"/spu/detail/&#123;id&#125;\")public ResponseEntity&lt;SpuDetail&gt; querySpuDetailById(@PathVariable(\"id\") Long id) &#123;​ SpuDetail detail = this.goodsService.querySpuDetailById(id);​ if (detail == null) &#123;​ return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(detail);&#125;\\ > GoodsService \\12345678public SpuDetail querySpuDetailById(Long id) &#123;​ return this.spuDetailMapper.selectByPrimaryKey(id);&#125;\\ > 测试 ## 2.3.查询sku > 分析 - 请求方式：Get - 请求路径：/sku/list - 请求参数：id，应该是spu的id - 返回结果：sku的集合 > GoodsController \\123456789101112131415161718@GetMapping(\"sku/list\")public ResponseEntity&lt;List&lt;Sku&gt;&gt; querySkuBySpuId(@RequestParam(\"id\") Long id) &#123;​ List&lt;Sku&gt; skus = this.goodsService.querySkuBySpuId(id);​ if (skus == null || skus.size() == 0) &#123;​ return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(skus);&#125;\\ > GoodsService 需要注意的是，为了页面回显方便，我们一并把sku的库存stock也查询出来 \\123456789101112131415161718192021222324public List&lt;Sku&gt; querySkuBySpuId(Long spuId) &#123;​ // 查询sku​ Sku record = new Sku();​ record.setSpuId(spuId);​ List&lt;Sku&gt; skus = this.skuMapper.select(record);​ for (Sku sku : skus) &#123;​ // 同时查询出库存​ sku.setStock(this.stockMapper.selectByPrimaryKey(sku.getId()).getStock());​ &#125;​ return skus;&#125;\\ > 测试： ## 2.4.页面回显 随便点击一个编辑按钮，发现数据回显完成： ## 2.5.页面提交 这里的保存按钮与新增其实是同一个，因此提交的逻辑也是一样的，这里不再赘述。 随便修改点数据，然后点击保存，可以看到浏览器已经发出请求： ## 2.6.后台实现 接下来，我们编写后台，实现修改商品接口。 ### 2.6.1.Controller - 请求方式：PUT - 请求路径：/ - 请求参数：Spu对象 - 返回结果：无 \\1234567891011121314151617181920212223242526272829303132/** \\* 新增商品 \\* @param spu \\* @return */@PutMappingpublic ResponseEntity&lt;Void&gt; updateGoods(@RequestBody SpuBo spu) &#123;​ try &#123;​ this.goodsService.update(spu);​ return new ResponseEntity&lt;&gt;(HttpStatus.NO_CONTENT);​ &#125; catch (Exception e) &#123;​ e.printStackTrace();​ return new ResponseEntity&lt;&gt;(HttpStatus.INTERNAL_SERVER_ERROR);​ &#125;&#125;\\ ### 2.6.2.Service spu数据可以修改，但是SKU数据无法修改，因为有可能之前存在的SKU现在已经不存在了，或者以前的sku属性都不存在了。比如以前内存有4G，现在没了。 因此这里直接删除以前的SKU，然后新增即可。 代码： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556@Transactionalpublic void update(SpuBo spu) &#123;​ // 查询以前sku​ List&lt;Sku&gt; skus = this.querySkuBySpuId(spu.getId());​ // 如果以前存在，则删除​ if(!CollectionUtils.isEmpty(skus)) &#123;​ List&lt;Long&gt; ids = skus.stream().map(s -&gt; s.getId()).collect(Collectors.toList());​ // 删除以前库存​ Example example = new Example(Stock.class);​ example.createCriteria().andIn(\"skuId\", ids);​ this.stockMapper.deleteByExample(example);​ // 删除以前的sku​ Sku record = new Sku();​ record.setSpuId(spu.getId());​ this.skuMapper.delete(record);​ &#125;​ // 新增sku和库存​ saveSkuAndStock(spu.getSkus(), spu.getId());​ // 更新spu​ spu.setLastUpdateTime(new Date());​ spu.setCreateTime(null);​ spu.setValid(null);​ spu.setSaleable(null);​ this.spuMapper.updateByPrimaryKeySelective(spu);​ // 更新spu详情​ this.spuDetailMapper.updateByPrimaryKeySelective(spu.getSpuDetail());&#125;\\ ### 2.6.3.mapper 与以前一样。 ## 2.7.其它 商品的删除、上下架大家自行实现。 # 3.搭建前台系统 后台系统的内容暂时告一段落，有了商品，接下来我们就要在页面展示商品，给用户提供浏览和购买的入口，那就是我们的门户系统。 门户系统面向的是用户，安全性很重要，而且搜索引擎对于单页应用并不友好。因此我们的门户系统不再采用与后台系统类似的SPA（单页应用）。 依然是前后端分离，不过前端的页面会使用独立的html，在每个页面中使用vue来做页面渲染。 ## 3.1.静态资源 webpack打包多页应用配置比较繁琐，项目结构也相对复杂。这里为了简化开发（毕竟我们不是专业的前端人员），我们不再使用webpack，而是直接编写原生的静态HTML。 ### 3.1.1.创建工程 创建一个新的工程： ### 3.1.2.导入静态资源 将课前资料中的leyou-portal解压，并复制到这个项目下 解压缩： 项目结构： ## 3.2.live-server 没有webpack，我们就无法使用webpack-dev-server运行这个项目，实现热部署。 所以，这里我们使用另外一种热部署方式：live-server， ### 3.2.1.简介 地址；https://www.npmjs.com/package/live-server 这是一款带有热加载功能的小型开发服务器。用它来展示你的HTML / JavaScript / CSS，但不能用于部署最终的网站。 ### 3.2.2.安装和运行参数 安装，使用npm命令即可，这里建议全局安装，以后任意位置可用 \\1234npm install -g live-server\\ 运行时，直接输入命令： \\1234live-server\\ 另外，你可以在运行命令后，跟上一些参数以配置： - --port=NUMBER - 选择要使用的端口，默认值：PORT env var或8080 - --host=ADDRESS - 选择要绑定的主机地址，默认值：IP env var或0.0.0.0（“任意地址”） - --no-browser - 禁止自动Web浏览器启动 - --browser=BROWSER - 指定使用浏览器而不是系统默认值 - --quiet | -q - 禁止记录 - --verbose | -V - 更多日志记录（记录所有请求，显示所有侦听的IPv4接口等） - --open=PATH - 启动浏览器到PATH而不是服务器root - --watch=PATH - 用逗号分隔的路径来专门监视变化（默认值：观看所有内容） - --ignore=PATH- 要忽略的逗号分隔的路径字符串（anymatch -compatible definition） - --ignorePattern=RGXP-文件的正则表达式忽略（即.*\\.jade）（不推荐使用赞成--ignore） - --middleware=PATH - 导出要添加的中间件功能的.js文件的路径; 可以是没有路径的名称，也可以是引用middleware文件夹中捆绑的中间件的扩展名 - --entry-file=PATH - 提供此文件（服务器根目录）代替丢失的文件（对单页应用程序有用） - --mount=ROUTE:PATH - 在定义的路线下提供路径内容（可能有多个定义） - --spa - 将请求从/ abc转换为/＃/ abc（方便单页应用） - --wait=MILLISECONDS - （默认100ms）等待所有更改，然后重新加载 - --htpasswd=PATH - 启用期待位于PATH的htpasswd文件的http-auth - --cors - 为任何来源启用CORS（反映请求源，支持凭证的请求） - --https=PATH - 到HTTPS配置模块的路径 - --proxy=ROUTE:URL - 代理ROUTE到URL的所有请求 - --help | -h - 显示简洁的使用提示并退出 - --version | -v - 显示版本并退出 ### 3.2.3.测试 我们进入leyou-portal目录，输入命令： \\1234live-server --port=9002\\ ## 3.3.域名访问 现在我们访问只能通过：http://127.0.0.1:9002 我们希望用域名访问：http://www.leyou.com 第一步，修改hosts文件，添加一行配置： \\1234127.0.0.1 www.leyou.com\\ 第二步，修改nginx配置，将www.leyou.com反向代理到127.0.0.1:9002 \\1234567891011121314151617181920212223242526server &#123;​ listen 80;​ server_name www.leyou.com;​ proxy_set_header X-Forwarded-Host $host;​ proxy_set_header X-Forwarded-Server $host;​ proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;​ location / &#123;​ proxy_pass http://127.0.0.1:9002;​ proxy_connect_timeout 600;​ proxy_read_timeout 600;​ &#125;&#125;\\ 重新加载nginx配置：nginx.exe -s reload ## 3.4.common.js 为了方便后续的开发，我们在前台系统中定义了一些工具，放在了common.js中： 部分代码截图： 首先对axios进行了一些全局配置，请求超时时间，请求的基础路径，是否允许跨域操作cookie等 定义了对象 ly ，也叫leyou，包含了下面的属性： - getUrlParam(key)：获取url路径中的参数 - http：axios对象的别名。以后发起ajax请求，可以用ly.http.get() - store：localstorage便捷操作，后面用到再详细说明 - formatPrice：格式化价格，如果传入的是字符串，则扩大100被并转为数字，如果传入是数字，则缩小100倍并转为字符串 - formatDate(val, pattern)：对日期对象val按照指定的pattern模板进行格式化 - stringify：将对象转为参数字符串 - parse：将参数字符串变为js对象","categories":[],"tags":[],"keywords":[]},{"title":"day09商品规格管理","slug":"day09商品规格管理","date":"2019-05-03T03:04:27.000Z","updated":"2019-05-03T03:13:46.034Z","comments":true,"path":"2019/05/03/day09商品规格管理/","link":"","permalink":"https://mr8649.github.io/2019/05/03/day09商品规格管理/","excerpt":"","text":"# 0.学习目标 - 了解商品规格数据结构设计思路 - 实现商品规格查询 - 了解SPU和SKU数据结构设计思路 - 实现商品查询 - 了解商品新增的页面实现 - 独立编写商品新增后台功能 # 1.商品规格数据结构 乐优商城是一个全品类的电商网站，因此商品的种类繁多，每一件商品，其属性又有差别。为了更准确描述商品及细分差别，抽象出两个概念：SPU和SKU，了解一下： ## 1.1.SPU和SKU SPU：Standard Product Unit （标准产品单位） ，一组具有共同属性的商品集 SKU：Stock Keeping Unit（库存量单位），SPU商品集因具体特性不同而细分的每个商品 以图为例来看： - 本页的 华为Mate10 就是一个商品集（SPU） - 因为颜色、内存等不同，而细分出不同的Mate10，如亮黑色128G版。（SKU） 可以看出： - SPU是一个抽象的商品集概念，为了方便后台的管理。 - SKU才是具体要销售的商品，每一个SKU的价格、库存可能会不一样，用户购买的是SKU而不是SPU ## 1.2.数据库设计分析 ### 1.2.1.思考并发现问题 弄清楚了SPU和SKU的概念区分，接下来我们一起思考一下该如何设计数据库表。 首先来看SPU，大家一起思考下SPU应该有哪些字段来描述？ \\1234567891011121314151617181920id:主键title：标题description：描述specification：规格packaging_list：包装after_service：售后服务comment：评价category_id：商品分类brand_id：品牌\\ 似乎并不复杂，但是大家仔细思考一下，商品的规格字段你如何填写？ 不同商品的规格不一定相同，数据库中要如何保存？ 再看下SKU，大家觉得应该有什么字段？ \\123456789101112131415161718id：主键spu_id：关联的spuprice：价格images：图片stock：库存颜色？内存？硬盘？\\ 碰到难题了，不同的商品分类，可能属性是不一样的，比如手机有内存，衣服有尺码，我们是全品类的电商网站，这些不同的商品的不同属性，如何设计到一张表中？ ### 1.2.2.分析规格参数 仔细查看每一种商品的规格你会发现： 虽然商品规格千变万化，但是同一类商品（如手机）的规格是统一的，有图为证： > 华为的规格： > 三星的规格： 也就是说，商品的规格参数应该是与分类绑定的。每一个分类都有统一的规格参数模板，但不同商品其参数值可能不同。 如下图所示： ### 1.2.3.SKU的特有属性 SPU中会有一些特殊属性，用来区分不同的SKU，我们称为SKU特有属性。如华为META10的颜色、内存属性。 不同种类的商品，一个手机，一个衣服，其SKU属性不相同。 同一种类的商品，比如都是衣服，SKU属性基本是一样的，都是颜色、尺码等。 这样说起来，似乎SKU的特有属性也是与分类相关的？事实上，仔细观察你会发现，SKU的特有属性是商品规格参数的一部分： 也就是说，我们没必要单独对SKU的特有属性进行设计，它可以看做是规格参数中的一部分。这样规格参数中的属性可以标记成两部分： - 所有sku共享的规格属性（称为全局属性） - 每个sku不同的规格属性（称为特有属性） ### 1.2.4.搜索属性 打开一个搜索页，我们来看看过滤的条件： 你会发现，过滤条件中的屏幕尺寸、运行内存、网路、机身内存、电池容量、CPU核数等，在规格参数中都能找到： 也就是说，规格参数中的数据，将来会有一部分作为搜索条件来使用。我们可以在设计时，将这部分属性标记出来，将来做搜索的时候，作为过滤条件。要注意的是，无论是SPU的全局属性，还是SKU的特有属性，都有可能作为搜索过滤条件的，并不冲突，而是有一个交集： ## 1.3.规格参数表 ### 1.3.1.表结构 先看下规格参数表： \\123456789101112CREATE TABLE `tb_specification` ( `category_id` bigint(20) NOT NULL COMMENT &apos;规格模板所属商品分类id&apos;, `specifications` varchar(3000) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;规格参数模板，json格式&apos;, PRIMARY KEY (`category_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;商品规格参数模板，json格式。&apos;;\\ 很奇怪是吧，只有两个字段。特别需要注意的是第二个字段： - specificatons：规格参数模板，json格式 为什么是一个json？我们看下规格参数的格式： 如果按照传统数据库设计，这里至少需要3张表： - group：代表组，与商品分类关联 - param_key：属性名，与组关联，一对多 - param_value：属性备选值，与属性名关联，一对多 这样程序的复杂度大大增加，但是提高了数据的复用性。 我们的解决方案是，采用json来保存整个规格参数模板，不需要额外的表，一个字符串就够了。 ### 1.3.2.json结构分析 > 先整体看一下： - 因为规格参数分为很多组，所以json最外层是一个数组。 - 数组中是对象类型，每个对象代表一个组的数据，对象的属性包括： - group：组的名称 - params：该组的所有属性 > 接下来是params： 以主芯片这一组为例： - group：注明，这里是主芯片 - params：该组的所有规格属性，因为不止一个，所以是一个数组。这里包含四个规格属性：CPU品牌，CPU型号，CPU频率，CPU核数。每个规格属性都是一个对象，包含以下信息： - k：属性名称 - searchable：是否作为搜索字段，将来在搜索页面使用，boolean类型 - global：是否是SPU全局属性，boolean类型。true为全局属性，false为SKU的特有属性 - options：属性值的可选项，数组结构。起约束作用，不允许填写可选项以外的值，比如CPU核数，有人添10000核岂不是很扯淡 - numerical：是否为数值，boolean类型，true则为数值，false则不是。为空也代表非数值 - unit：单位，如：克，毫米。如果是数值类型，那么就需要有单位，否则可以不填。 上面的截图中所有属性都是全局属性，我们来看看内存，应该是特有属性： 总结下： - 规格参数分组，每组有多个参数 - 参数的 k代表属性名称，没有值，具体的SPU才能确定值 - 参数会有不同的属性：是否可搜索，是否是全局、是否是数值，这些都用boolean值进行标记： - SPU下的多个SKU共享的参数称为全局属性，用global标记 - SPU下的多个SKU特有的参数称为特有属性 - 如果参数是数值类型，用numerical标记，并且指定单位unit - 如果参数可搜索，用searchable标记 # 2.商品规格参数管理 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 ## 2.1.页面实现 页面比较复杂，这里就不带着大家去实现完整页面效果了，我们一起分析一下即可。 ### 2.1.1.整体布局 打开规格参数页面，看到如下内容： 因为规格是跟商品分类绑定的，因此首先会展现商品分类树，并且提示你要选择商品分类，才能看到规格参数的模板。一起了解下页面的实现： 可以看出页面分成3个部分： - v-card-title：标题部分，这里是提示信息，告诉用户要先选择分类，才能看到模板 - v-tree：这里用到的是我们之前讲过的树组件，展示商品分类树，不过现在是假数据，我们只要把treeData属性删除，它就会走url属性指定的路径去查询真实的商品分类树了。 \\1234&lt;v-tree url=\"/item/category/list\" :isEdit=\"false\" @handleClick=\"handleClick\" /&gt;\\ - v-dialog：Vuetify提供的对话框组件，v-model绑定的dialog属性是boolean类型： - true则显示弹窗 - false则隐藏弹窗 ### 2.1.2.data中定义的属性 接下来，看看Vue实例中data定义了哪些属性，对页面会产生怎样的影响： - specifications：选中一个商品分类后，需要查询后台获取规格参数信息，保存在这个对象中，Vue会完成页面渲染。 - oldSpec：当前页兼具了规格的增、改、查等功能，这个对象记录被修改前的规格参数，以防用户撤销修改，用来恢复数据。 - dialog：是否显示对话框的标记。true则显示，false则不显示 - currentNode：记录当前选中的商品分类节点 - isInsert：判断接下来是新增还是修改 ## 2.2.规格参数的查询 点击树节点后要显示规格参数，因此查询功能应该编写在点击事件中。 了解一下： ### 2.2.1.树节点的点击事件 当我们点击树节点时，要将v-dialog打开，因此必须绑定一个点击事件： 我们来看下handleClick方法： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566handleClick(node) &#123;​ // 判断点击的节点是否是父节点（只有点击到叶子节点才会弹窗）​ if (!node.isParent) &#123;​ // 如果是叶子节点，那么就发起ajax请求，去后台查询商品规格数据。​ this.$http.get(\"/item/spec/\" + node.id)​ .then(resp =&gt; &#123;​ // 查询成功后，把响应结果赋值给specifications属性，Vue会进行自动渲染。​ this.specifications = resp.data;​ // 记录下此时的规格数据，当页面撤销修改时，用来恢复原始数据​ this.oldSpec = resp.data;​ // 打开弹窗​ this.dialog = true;​ // 标记此时要进行修改操作​ this.isInsert = false;​ &#125;)​ .catch(() =&gt; &#123;​ // 如果没有查询成功，那么询问是否添加规格​ this.$message.confirm('该分类还没有规格参数，是否添加?')​ .then(() =&gt; &#123;​ // 如果要添加，则将specifications初始化为空​ this.specifications = [&#123;​ group: '',​ params: []​ &#125;];​ // 打开弹窗​ this.dialog = true;​ // 标记为新增​ this.isInsert = true;​ &#125;)​ &#125;)​ &#125;&#125;\\ 因此，我们接下来要做的事情，就是编写接口，实现规格参数的查询了。 ### 2.2.2.后端代码 > 实体类 \\1234567891011121314151617181920212223242526272829303132333435363738@Table(name = \"tb_specification\")public class Specification &#123;​ @Id​ private Long categoryId;​ private String specifications;​ public Long getCategoryId() &#123;​ return categoryId;​ &#125;​ public void setCategoryId(Long categoryId) &#123;​ this.categoryId = categoryId;​ &#125;​ public String getSpecifications() &#123;​ return specifications;​ &#125;​ public void setSpecifications(String specifications) &#123;​ this.specifications = specifications;​ &#125;&#125;\\ > mapper \\123456public interface SpecificationMapper extends Mapper&lt;Specification&gt; &#123;&#125;\\ > controller 先分析下需要的东西，在页面的ajax请求中可以看出： - 请求方式：查询，肯定是get - 请求路径：/spec/{cid} ，这里通过路径占位符传递商品分类的id - 请求参数：商品分类id - 返回结果：页面是直接把resp.data赋值给了specifications： 那么我们返回的应该是规格参数的字符串 代码： \\123456789101112131415161718192021222324252627282930@RestController@RequestMapping(\"spec\")public class SpecificationController &#123;​ @Autowired​ private SpecificationService specificationService;​ @GetMapping(\"&#123;id&#125;\")​ public ResponseEntity&lt;String&gt; querySpecificationByCategoryId(@PathVariable(\"id\") Long id)&#123;​ Specification spec = this.specificationService.queryById(id);​ if (spec == null) &#123;​ return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(spec.getSpecifications());​ &#125;&#125;\\ > service: \\123456789101112131415161718@Servicepublic class SpecificationService &#123;​ @Autowired​ private SpecificationMapper specificationMapper;​ public Specification queryById(Long id) &#123;​ return this.specificationMapper.selectByPrimaryKey(id);​ &#125;&#125;\\ > 页面访问测试： 目前，我们数据库只提供了3条规格参数信息： 我们访问：http://api.leyou.com/api/item/spec/76 然后在后台系统中测试： 当我们点击一个还不存在的规格参数的商品分类： ## 2.3.增、删、改（作业） 增删改的作业就留给大家去完成了。页面中接口都已定义，你要做的就是实现后台接口。 # 3.SPU和SKU数据结构 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 规格确定以后，就可以添加商品了,先看下数据库表 ## 3.1.SPU表 ### 3.1.1.表结构 SPU表： \\123456789101112131415161718192021222324252627282930CREATE TABLE `tb_spu` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;spu id&apos;, `title` varchar(255) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;标题&apos;, `sub_title` varchar(255) DEFAULT &apos;&apos; COMMENT &apos;子标题&apos;, `cid1` bigint(20) NOT NULL COMMENT &apos;1级类目id&apos;, `cid2` bigint(20) NOT NULL COMMENT &apos;2级类目id&apos;, `cid3` bigint(20) NOT NULL COMMENT &apos;3级类目id&apos;, `brand_id` bigint(20) NOT NULL COMMENT &apos;商品所属品牌id&apos;, `saleable` tinyint(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;是否上架，0下架，1上架&apos;, `valid` tinyint(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;是否有效，0已删除，1有效&apos;, `create_time` datetime DEFAULT NULL COMMENT &apos;添加时间&apos;, `last_update_time` datetime DEFAULT NULL COMMENT &apos;最后修改时间&apos;, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=208 DEFAULT CHARSET=utf8 COMMENT=&apos;spu表，该表描述的是一个抽象的商品，比如 iphone8&apos;;\\ 与我们前面分析的基本类似，但是似乎少了一些字段，比如商品描述。 我们做了表的垂直拆分，将SPU的详情放到了另一张表：tb_spu_detail \\1234567891011121314151617181920CREATE TABLE `tb_spu_detail` ( `spu_id` bigint(20) NOT NULL, `description` text COMMENT &apos;商品描述信息&apos;, `specifications` varchar(3000) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;全部规格参数数据&apos;, `spec_template` varchar(1000) NOT NULL COMMENT &apos;特有规格参数及可选值信息，json格式&apos;, `packing_list` varchar(1000) DEFAULT &apos;&apos; COMMENT &apos;包装清单&apos;, `after_service` varchar(1000) DEFAULT &apos;&apos; COMMENT &apos;售后服务&apos;, PRIMARY KEY (`spu_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;\\ 这张表中的数据都比较大，为了不影响主表的查询效率我们拆分出这张表。 需要注意的是这两个字段：specifications和spec_template。 ### 3.1.2.spu中的规格参数 前面讲过规格参数与商品分类绑定，一个分类下的所有SPU具有类似的规格参数。SPU下的SKU可能会有不同的规格参数，因此我们计划是这样： - SPU中保存全局的规格参数信息。 - SKU中保存特有规格参数。 以手机为例，品牌、操作系统等肯定是全局属性，内存、颜色等肯定是特有属性。 当你确定了一个SPU，比如小米的：红米4X 全局属性举例： \\123456品牌：小米型号：红米4X\\ 特有属性举例： \\12345678颜色：[香槟金, 樱花粉, 磨砂黑]内存：[2G, 3G]机身存储：[16GB, 32GB]\\ 来看下我们的 表如何存储这些信息： #### 3.1.2.1.specifications字段 首先是specifications，其中保存全部规格参数信息，因此也是一个json格式： > 整体来看： 整体看上去与规格参数表中的数据一样，也是一个数组，并且分组，每组下有多个参数 > 展开一组来看 可以看到，与规格参数表中的模板相比，最大的区别就是，这里指定了具体的值，因为商品确定了，其参数值肯定也确定了。 > 特有属性 刚才看到的是全局属性，那么特有属性在这个字段中如何存储呢？ 我们发现特有属性也是有的，但是，注意看这里是不确定具体值的，因为特有属性只有在SKU中才能确定。这里只是保存了options，所有SKU属性的可选项。 在哪里会用到这个字段的值呢，商品详情页的规格参数信息中： #### 3.1.2.2.spec_template字段 既然specifications已经包含了所有的规格参数，那么为什么又多出了一个spec_template呢？ 里面又有哪些内容呢？ 来看数据格式： 可以看出，里面只保存了规格参数中的特有属性，而且格式进行了大大的简化，只有属性的key，和待选项。 为什么要冗余保存一份？ 因为很多场景下我们只需要查询特有规格属性，如果放在一起，每次查询再去分离比较麻烦。 比如，商品详情页展示可选的规格参数时： ## 3.2.SKU表 ### 3.2.1.表结构 \\123456789101112131415161718192021222324252627282930CREATE TABLE `tb_sku` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;sku id&apos;, `spu_id` bigint(20) NOT NULL COMMENT &apos;spu id&apos;, `title` varchar(255) NOT NULL COMMENT &apos;商品标题&apos;, `images` varchar(1000) DEFAULT &apos;&apos; COMMENT &apos;商品的图片，多个图片以‘,’分割&apos;, `price` bigint(15) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;销售价格，单位为分&apos;, `indexes` varchar(100) COMMENT &apos;特有规格属性在spu属性模板中的对应下标组合&apos;, `own_spec` varchar(1000) COMMENT &apos;sku的特有规格参数，json格式，反序列化时应使用linkedHashMap，保证有序&apos;, `enable` tinyint(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;是否有效，0无效，1有效&apos;, `create_time` datetime NOT NULL COMMENT &apos;添加时间&apos;, `last_update_time` datetime NOT NULL COMMENT &apos;最后修改时间&apos;, PRIMARY KEY (`id`), KEY `key_spu_id` (`spu_id`) USING BTREE) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;sku表,该表表示具体的商品实体,如黑色的64GB的iphone 8&apos;;\\ 还有一张表，代表库存： \\12345678910111213141516CREATE TABLE `tb_stock` ( `sku_id` bigint(20) NOT NULL COMMENT &apos;库存对应的商品sku id&apos;, `seckill_stock` int(9) DEFAULT &apos;0&apos; COMMENT &apos;可秒杀库存&apos;, `seckill_total` int(9) DEFAULT &apos;0&apos; COMMENT &apos;秒杀总数量&apos;, `stock` int(9) NOT NULL COMMENT &apos;库存数量&apos;, PRIMARY KEY (`sku_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;库存表，代表库存，秒杀库存等信息&apos;;\\ 问题：为什么要将库存独立一张表？ 因为库存字段写频率较高，而SKU的其它字段以读为主，因此我们将两张表分离，读写不会干扰。 特别需要注意的是sku表中的indexes字段和own_spec字段。sku中应该保存特有规格参数的值，就在这两个字段中。 ### 3.2.2.sku中的特有规格参数 #### 3.2.2.1.indexes字段 在SPU表中，已经对特有规格参数及可选项进行了保存，结构如下： \\1234567891011121314151617181920212223242526272829303132&#123;​ \"机身颜色\": [​ \"香槟金\",​ \"樱花粉\",​ \"磨砂黑\"​ ],​ \"内存\": [​ \"2GB\",​ \"3GB\"​ ],​ \"机身存储\": [​ \"16GB\",​ \"32GB\"​ ]&#125;\\ 这些特有属性如果排列组合，会产生12个不同的SKU，而不同的SKU，其属性就是上面备选项中的一个。 比如： - 红米4X，香槟金，2GB内存，16GB存储 - 红米4X，磨砂黑，2GB内存，32GB存储 你会发现，每一个属性值，对应于SPUoptions数组的一个选项，如果我们记录下角标，就是这样： - 红米4X，0,0,0 - 红米4X，2,0,1 既然如此，我们是不是可以将不同角标串联起来，作为SPU下不同SKU的标示。这就是我们的indexes字段。 这个设计在商品详情页会特别有用： 当用户点击选中一个特有属性，你就能根据 角标快速定位到sku。 #### 3.2.2.2.own_spec字段 看结构： \\1234&#123;\"机身颜色\":\"香槟金\",\"内存\":\"2GB\",\"机身存储\":\"16GB\"&#125;\\ 保存的是特有属性的键值对。 SPU中保存的是可选项，但不确定具体的值，而SKU中的保存的就是具体的键值对了。 这样，在页面展示规格参数信息时，就可以根据key来获取值，用于显示。 ## 3.3.导入图片信息 现在商品表中虽然有数据，但是所有的图片信息都是无法访问的，我们需要把图片导入到虚拟机： 首先，把课前资料提供的数据上传到虚拟机下：/leyou/static目录： 然后，使用命令解压缩： \\1234unzip images.zip\\ 修改Nginx配置，使nginx反向代理这些图片地址： \\1234vim /opt/nginx/config/nginx.conf\\ 修改成如下配置： \\12345678910111213141516171819202122232425262728293031323334server &#123;​ listen 80;​ server_name image.leyou.com;​ \\# 监听域名中带有group的，交给FastDFS模块处理​ location ~/group([0-9])/ &#123;​ ngx_fastdfs_module;​ &#125;​ \\# 将其它图片代理指向本地的/leyou/static目录​ location / &#123;​ root /leyou/static/;​ &#125;​ error_page 500 502 503 504 /50x.html;​ location = /50x.html &#123;​ root html;​ &#125;&#125;\\ # 4.商品查询 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 ## 4.1.效果预览 接下来，我们实现商品管理的页面，先看下我们要实现的效果： 可以看出整体是一个table，然后有新增按钮。是不是跟昨天写品牌管理很像？ 模板代码在分别在Goods.vue ## 4.2.从0开始 接下来，我们自己来实现一下，新建两个组件：MyGoods.vue和MyGoodsForm.vue 内容先随意： \\12345678910111213141516171819202122232425262728293031323334&lt;template&gt; &lt;v-card&gt;​ MyGoods &lt;/v-card&gt;&lt;/template&gt;&lt;script&gt; export default &#123;​ name: &quot;my-goods&quot;,​ data() &#123;​ return &#123;​ &#125;​ &#125; &#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;\\ 然后修改menu.js,新建一个菜单： 修改router/index.js，添加一个路由： 预览一下： ## 4.3.页面实现 ### 4.3.1.页面基本表格 商品列表页与品牌列表页几乎一样，我们可以直接去复制一份过来，然后进行一些修改。 首先，字段不一样，商品列表也展示的SPU信息，包含以下字段： \\12345678910id：title：标题cname：商品分类名称bname：品牌名称\\ 完整代码： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278&lt;template&gt; &lt;v-card&gt;​ &lt;v-card-title&gt;​ &lt;v-btn color=\"primary\" @click=\"addGoods\"&gt;新增商品&lt;/v-btn&gt;​ &lt;!--搜索框，与search属性关联--&gt;​ &lt;v-spacer/&gt;​ &lt;v-text-field label=\"输入关键字搜索\" v-model.lazy=\"search\" append-icon=\"search\" hide-details/&gt;​ &lt;/v-card-title&gt;​ &lt;v-divider/&gt;​ &lt;v-data-table​ :headers=\"headers\"​ :items=\"goodsList\"​ :search=\"search\"​ :pagination.sync=\"pagination\"​ :total-items=\"totalGoods\"​ :loading=\"loading\"​ class=\"elevation-1\"​ \\&gt;​ &lt;template slot=\"items\" slot-scope=\"props\"&gt;​ &lt;td&gt;&#123;&#123; props.item.id &#125;&#125;&lt;/td&gt;​ &lt;td class=\"text-xs-center\"&gt;&#123;&#123; props.item.title &#125;&#125;&lt;/td&gt;​ &lt;td class=\"text-xs-center\"&gt;&#123;&#123;props.item.cname&#125;&#125;&lt;/td&gt;​ &lt;td class=\"text-xs-center\"&gt;&#123;&#123; props.item.bname &#125;&#125;&lt;/td&gt;​ &lt;td class=\"justify-center layout\"&gt;​ &lt;v-btn color=\"info\" @click=\"editGoods(props.item)\"&gt;编辑&lt;/v-btn&gt;​ &lt;v-btn color=\"warning\"&gt;删除&lt;/v-btn&gt;​ &lt;v-btn &gt;下架&lt;/v-btn&gt;​ &lt;/td&gt;​ &lt;/template&gt;​ &lt;/v-data-table&gt;​ &lt;!--弹出的对话框--&gt;​ &lt;v-dialog max-width=\"500\" v-model=\"show\" persistent&gt;​ &lt;v-card&gt;​ &lt;!--对话框的标题--&gt;​ &lt;v-toolbar dense dark color=\"primary\"&gt;​ &lt;v-toolbar-title&gt;&#123;&#123;isEdit ? '修改' : '新增'&#125;&#125;商品&lt;/v-toolbar-title&gt;​ &lt;v-spacer/&gt;​ &lt;!--关闭窗口的按钮--&gt;​ &lt;v-btn icon @click=\"closeWindow\"&gt;&lt;v-icon&gt;close&lt;/v-icon&gt;&lt;/v-btn&gt;​ &lt;/v-toolbar&gt;​ &lt;!--对话框的内容，表单--&gt;​ &lt;v-card-text class=\"px-5\"&gt;​ &lt;my-goods-form :oldGoods=\"oldGoods\" /&gt;​ &lt;/v-card-text&gt;​ &lt;/v-card&gt;​ &lt;/v-dialog&gt; &lt;/v-card&gt;&lt;/template&gt;&lt;script&gt; // 导入自定义的表单组件 import MyGoodsForm from './MyGoodsForm' export default &#123;​ name: \"my-goods\",​ data() &#123;​ return &#123;​ search: '', // 搜索过滤字段​ totalGoods: 0, // 总条数​ goodsList: [], // 当前页品牌数据​ loading: true, // 是否在加载中​ pagination: &#123;&#125;, // 分页信息​ headers: [​ &#123;text: 'id', align: 'center', value: 'id'&#125;,​ &#123;text: '标题', align: 'center', sortable: false, value: 'title'&#125;,​ &#123;text: '商品分类', align: 'center', sortable: false, value: 'cname'&#125;,​ &#123;text: '品牌', align: 'center', value: 'bname', sortable: false,&#125;,​ &#123;text: '操作', align: 'center', sortable: false&#125;​ ],​ show: false,// 控制对话框的显示​ oldGoods: &#123;&#125;, // 即将被编辑的商品信息​ isEdit: false, // 是否是编辑​ &#125;​ &#125;,​ mounted() &#123; // 渲染后执行​ // 查询数据​ this.getDataFromServer();​ &#125;,​ watch: &#123;​ pagination: &#123; // 监视pagination属性的变化​ deep: true, // deep为true，会监视pagination的属性及属性中的对象属性变化​ handler() &#123;​ // 变化后的回调函数，这里我们再次调用getDataFromServer即可​ this.getDataFromServer();​ &#125;​ &#125;,​ search: &#123; // 监视搜索字段​ handler() &#123;​ this.getDataFromServer();​ &#125;​ &#125;​ &#125;,​ methods: &#123;​ getDataFromServer() &#123; // 从服务的加载数的方法。​ // 发起请求​ this.$http.get(\"/item/spu/page\", &#123;​ params: &#123;​ key: this.search, // 搜索条件​ page: this.pagination.page,// 当前页​ rows: this.pagination.rowsPerPage,// 每页大小​ sortBy: this.pagination.sortBy,// 排序字段​ desc: this.pagination.descending// 是否降序​ &#125;​ &#125;).then(resp =&gt; &#123; // 这里使用箭头函数​ this.goodsList = resp.data.items;​ this.totalGoods = resp.data.total;​ // 完成赋值后，把加载状态赋值为false​ this.loading = false;​ &#125;)​ &#125;,​ addGoods() &#123;​ // 修改标记​ this.isEdit = false;​ // 控制弹窗可见：​ this.show = true;​ // 把oldBrand变为null​ this.oldBrand = null;​ &#125;,​ editGoods(oldGoods)&#123;​ // 修改标记​ this.isEdit = true;​ // 控制弹窗可见：​ this.show = true;​ // 获取要编辑的brand​ this.oldGoods = oldGoods;​ &#125;,​ closeWindow()&#123;​ // 重新加载数据​ this.getDataFromServer();​ // 关闭窗口​ this.show = false;​ &#125;​ &#125;,​ components:&#123;​ MyGoodsForm​ &#125; &#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;\\ 主要的改动点： - 页面的v-data-table中的属性绑定修改。items指向goodsList，totalItems指向totalGoods - 页面渲染的字段名修改：字段改成商品的SPU字段：id、title，cname(商品分类名称),bname（品牌名称） - data属性修改了以下属性： - goodsList：当前页商品数据 - totalGoods：商品总数 - headers：头信息，需要修改头显示名称 - oldGoods：准备要修改的商品 - 加载数据的函数：getDataFromServer，请求的路径进行了修改，另外去除了跟排序相关的查询。SPU查询不排序 - 新增商品的事件函数：清除了一些数据查询接口，只保留弹窗 查看效果： 因为没有编写查询功能，表格一直处于loading状态。 接下来看弹窗： ### 4.3.2.上下架状态按钮 另外，似乎页面少了对上下架商品的过滤，在原始效果图中是有的： 这在Vuetify中是一组按钮，我们查看帮助文档： 查看实例得到以下信息： v-btn：一个按钮 v-btn-toggle：按钮组，内部可以有多个按钮，点击切换，有以下属性： - multiple：是否支持多选，默认是false - value：选中的按钮的值，如果是多选，结果是一个数组；单选，结果是点击的v-btn中的value值，因此按钮组的每个btn都需要指定value属性 改造页面： 首先在data中定义一个属性，记录按钮的值。 \\12345678910filter:&#123;​ saleable: false, // 上架还是下架​ search: '', // 搜索过滤字段&#125;\\ 这里我们的做法是定义一个filter属性，内部在定义search来关联过滤字段，saleable来关联上下架情况。 这样watch就必须监听filter，而不是只监听search了： \\1234567891011121314filter: &#123;// 监视搜索字段 handler() &#123;​ this.getDataFromServer(); &#125;, deep:true&#125;\\ 另外，页面中与search有关的所有字段都需要修改成filter.search: \\123456&lt;!--搜索框，与search属性关联--&gt;&lt;v-text-field label=\"输入关键字搜索\" v-model.lazy=\"filter.search\" append-icon=\"search\" hide-details/&gt;\\ 然后，在页面中添加按钮组： \\123456789101112131415161718192021222324252627282930 &lt;v-flex xs3&gt;​ 状态：​ &lt;v-btn-toggle v-model=\"filter.saleable\"&gt;​ &lt;v-btn flat&gt;​ 全部​ &lt;/v-btn&gt;​ &lt;v-btn flat :value=\"true\"&gt;​ 上架​ &lt;/v-btn&gt;​ &lt;v-btn flat :value=\"false\"&gt;​ 下架​ &lt;/v-btn&gt;​ &lt;/v-btn-toggle&gt;&lt;/v-flex&gt;\\ 最后，不要忘了在查询时，将saleable携带上： \\12345678910111213141516171819202122232425262728293031323334getDataFromServer() &#123; // 从服务的加载数的方法。​ // 发起请求​ this.$http.get(\"/item/spu/page\", &#123;​ params: &#123;​ key: this.filter.search, // 搜索条件​ saleable: this.filter.saleable, // 上下架​ page: this.pagination.page,// 当前页​ rows: this.pagination.rowsPerPage,// 每页大小​ &#125;​ &#125;).then(resp =&gt; &#123; // 这里使用箭头函数​ this.goodsList = resp.data.items;​ this.totalGoods = resp.data.total;​ // 完成赋值后，把加载状态赋值为false​ this.loading = false;​ &#125;)&#125;\\ ## 4.4.后台提供接口 页面已经准备好，接下来在后台提供分页查询SPU的功能： ### 4.4.1.实体类 > SPU \\123456789101112131415161718192021222324252627282930313233343536@Table(name = \"tb_spu\")public class Spu &#123;​ @Id​ @GeneratedValue(strategy = GenerationType.IDENTITY)​ private Long id;​ private Long brandId;​ private Long cid1;// 1级类目​ private Long cid2;// 2级类目​ private Long cid3;// 3级类目​ private String title;// 标题​ private String subTitle;// 子标题​ private Boolean saleable;// 是否上架​ private Boolean valid;// 是否有效，逻辑删除用​ private Date createTime;// 创建时间​ private Date lastUpdateTime;// 最后修改时间​ // 省略getter和setter&#125;\\ > SPU详情 \\123456789101112131415161718192021222324@Table(name=\"tb_spu_detail\")public class SpuDetail &#123;​ @Id​ private Long spuId;// 对应的SPU的id​ private String description;// 商品描述​ private String specTemplate;// 商品特殊规格的名称及可选值模板​ private String specifications;// 商品的全局规格属性​ private String packingList;// 包装清单​ private String afterService;// 售后服务​ // 省略getter和setter&#125;\\ ### 4.4.2.controller 先分析： - 请求方式：GET - 请求路径：/spu/page - 请求参数： - page：当前页 - rows：每页大小 - key：过滤条件 - saleable：上架或下架 - 返回结果：商品SPU的分页信息。 - 要注意，页面展示的是商品分类和品牌名称，而数据库中保存的是id，怎么办？ ​ 我们可以新建一个类，继承SPU，并且拓展cname和bname属性，写到ly-item-interface ​ \\123456789101112131415161718​ public class SpuBo extends Spu &#123;​ ​ String cname;// 商品分类名称​ ​ String bname;// 品牌名称​ ​ // 略 。。​ &#125;​ \\ 编写controller代码： 我们把与商品相关的一切业务接口都放到一起，起名为GoodsController，业务层也是这样 \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950@RestControllerpublic class GoodsController &#123;​ @Autowired​ private GoodsService goodsService;​ /**​ \\* 分页查询SPU​ \\* @param page​ \\* @param rows​ \\* @param key​ \\* @return​ */​ @GetMapping(\"/spu/page\")​ public ResponseEntity&lt;PageResult&lt;SpuBo&gt;&gt; querySpuByPage(​ @RequestParam(value = \"page\", defaultValue = \"1\") Integer page,​ @RequestParam(value = \"rows\", defaultValue = \"5\") Integer rows,​ @RequestParam(value = \"key\", required = false) String key) &#123;​ // 分页查询spu信息​ PageResult&lt;SpuBo&gt; result = this.goodsService.querySpuByPageAndSort(page, rows, key);​ if (result == null || result.getItems().size() == 0) &#123;​ return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(result);​ &#125;&#125;\\ ### 4.4.3.service 所有商品相关的业务（包括SPU和SKU）放到一个业务下：GoodsService。 \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586@Servicepublic class GoodsService &#123;​ @Autowired​ private SpuMapper spuMapper;​ @Autowired​ private CategoryService categoryService;​ @Autowired​ private BrandMapper brandMapper;​ public PageResult&lt;SpuBo&gt; querySpuByPageAndSort(Integer page, Integer rows, Boolean saleable, String key) &#123;​ // 1、查询SPU​ // 分页,最多允许查100条​ PageHelper.startPage(page, Math.min(rows, 100));​ // 创建查询条件​ Example example = new Example(Spu.class);​ Example.Criteria criteria = example.createCriteria();​ // 是否过滤上下架​ if (saleable != null) &#123;​ criteria.orEqualTo(\"saleable\", saleable);​ &#125;​ // 是否模糊查询​ if (StringUtils.isNotBlank(key)) &#123;​ criteria.andLike(\"title\", \"%\" + key + \"%\");​ &#125;​ Page&lt;Spu&gt; pageInfo = (Page&lt;Spu&gt;) this.spuMapper.selectByExample(example);​ List&lt;SpuBo&gt; list = pageInfo.getResult().stream().map(spu -&gt; &#123;​ // 2、把spu变为 spuBo​ SpuBo spuBo = new SpuBo();​ // 属性拷贝​ BeanUtils.copyProperties(spu, spuBo);​ // 3、查询spu的商品分类名称,要查三级分类​ List&lt;String&gt; names = this.categoryService.queryNameByIds(​ Arrays.asList(spu.getCid1(), spu.getCid2(), spu.getCid3()));​ // 将分类名称拼接后存入​ spuBo.setCname(StringUtils.join(names, \"/\"));​ // 4、查询spu的品牌名称​ Brand brand = this.brandMapper.selectByPrimaryKey(spu.getBrandId());​ spuBo.setBname(brand.getName());​ return spuBo;​ &#125;).collect(Collectors.toList());​ return new PageResult&lt;&gt;(pageInfo.getTotal(), list);​ &#125;&#125;\\ ### 4.4.4.mapper \\123456public interface SpuMapper extends Mapper&lt;Spu&gt; &#123;&#125;\\ ### 4.4.5.Category中拓展查询名称的功能 页面需要商品的分类名称需要在这里查询，因此要额外提供查询分类名称的功能， 在CategoryService中添加功能： \\12345678public List&lt;String&gt; queryNameByIds(List&lt;Long&gt; ids) &#123;​ return this.categoryMapper.selectByIdList(ids).stream().map(Category::getName).collect(Collectors.toList());&#125;\\ mapper的selectByIDList方法是来自于通用mapper。不过需要我们在mapper上继承一个通用mapper接口： \\12345678public interface CategoryMapper extends Mapper&lt;Category&gt;, SelectByIdListMapper&lt;Category, Long&gt; &#123; ​ // ...coding&#125;\\ ## 4.5.测试 刷新页面，查看效果： 基本与预览的效果一致，OK！ # 5.商品新增 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 ## 5.1.效果预览 新增商品窗口： 这个表单比较复杂，因为商品的信息比较多，分成了4个部分来填写： - 基本信息 - 商品描述信息 - 规格参数信息 - SKU信息 ## 5.2.从0开始 我们刚刚在查询时，已经实现创建了MyGoodsForm.vue，并且已经在MyGoods中引入。 不过目前没有写代码： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;template&gt; &lt;v-card&gt;​ my goods form &lt;/v-card&gt;&lt;/template&gt;&lt;script&gt; export default &#123;​ name: &quot;my-goods-form&quot;,​ props: &#123;​ oldGoods: &#123;​ type: Object​ &#125;,​ isEdit: &#123;​ type: Boolean,​ default: false​ &#125;​ &#125;,​ data() &#123;​ return &#123;​ &#125;​ &#125;,​ methods: &#123;​ &#125; &#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;\\ 然后在MyBrand中，已经引入了MyGoodsForm组件，并且页面中也形成了对话框： \\123456 // 导入自定义的表单组件 import MyGoodsForm from './MyGoodsForm'\\ \\123456789101112131415161718192021222324252627282930313233343536&lt;v-dialog max-width=\"500\" v-model=\"show\" persistent&gt;​ &lt;v-card&gt;​ &lt;!--对话框的标题--&gt;​ &lt;v-toolbar dense dark color=\"primary\"&gt;​ &lt;v-toolbar-title&gt;&#123;&#123;isEdit ? '修改' : '新增'&#125;&#125;商品&lt;/v-toolbar-title&gt;​ &lt;v-spacer/&gt;​ &lt;!--关闭窗口的按钮--&gt;​ &lt;v-btn icon @click=\"closeWindow\"&gt;​ &lt;v-icon&gt;close&lt;/v-icon&gt;​ &lt;/v-btn&gt;​ &lt;/v-toolbar&gt;​ &lt;!--对话框的内容，表单--&gt;​ &lt;v-card-text class=\"px-5\"&gt;​ &lt;my-goods-form :oldGoods=\"oldGoods\"/&gt;​ &lt;/v-card-text&gt;​ &lt;/v-card&gt;&lt;/v-dialog&gt;\\ 并且也已经给新增按钮绑定了点击事件： \\1234&lt;v-btn color=\"primary\" @click=\"addGoods\"&gt;新增商品&lt;/v-btn&gt;\\ addGoods方法中，设置对话框的show属性为true： \\123456789101112131415161718addGoods() &#123;​ // 修改标记​ this.isEdit = false;​ // 控制弹窗可见：​ this.show = true;​ // 把oldBrand变为null​ this.oldBrand = null;&#125;\\ 不过弹窗中没有任何数据： ## 5.3.新增商品页的基本框架 ### 5.3.1.Steppers，步骤线 预览效果图中，分四个步骤显示商品表单的组件，叫做stepper，看下文档： 其基本结构如图： 一个步骤线（v-stepper）总的分为两部分： - v-stepper-header：代表步骤的头部进度条，只能有一个 - v-stepper-step：代表进度条的每一个步骤，可以有多个 - v-stepper-items：代表当前步骤下的内容组，只能有一个，内部有stepper-content - v-stepper-content：代表每一步骤的页面内容，可以有多个 > v-stepper - value：其值是当前所在的步骤索引，可以用来控制步骤切换 - dark：是否使用黑暗色调，默认false - non-linear：是否启用非线性步骤，用户不用按顺序切换，而是可以调到任意步骤，默认false - vertical：是否垂直显示步骤线，默认是false，即水平显示 > v-stepper-header的属性： - 无 > v-stepper-step的属性 - color：颜色 - complete：当前步骤是否已经完成，布尔值 - editable：是否可编辑任意步骤（非线性步骤） - step：步骤索引 > v-stepper-items - 无 > v-stepper-content - step：步骤索引，需要与v-stepper-step中的对应 ### 5.3.2.编写页面 首先我们在data中定义一个变量，记录当前的步骤数： \\123456789101112data() &#123;​ return &#123;​ step: 1, // 当前的步骤数，默认为1​ &#125;&#125;,\\ 然后在模板页面中引入步骤线： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;v-stepper v-model=\"step\"&gt;​ &lt;v-stepper-header&gt;​ &lt;v-stepper-step :complete=\"step &gt; 1\" step=\"1\"&gt;基本信息&lt;/v-stepper-step&gt;​ &lt;v-divider/&gt;​ &lt;v-stepper-step :complete=\"step &gt; 2\" step=\"2\"&gt;商品描述&lt;/v-stepper-step&gt;​ &lt;v-divider/&gt;​ &lt;v-stepper-step :complete=\"step &gt; 3\" step=\"3\"&gt;规格参数&lt;/v-stepper-step&gt;​ &lt;v-divider/&gt;​ &lt;v-stepper-step step=\"4\"&gt;SKU属性&lt;/v-stepper-step&gt;​ &lt;/v-stepper-header&gt;​ &lt;v-stepper-items&gt;​ &lt;v-stepper-content step=\"1\"&gt;​ 基本信息​ &lt;/v-stepper-content&gt;​ &lt;v-stepper-content step=\"2\"&gt;​ 商品描述​ &lt;/v-stepper-content&gt;​ &lt;v-stepper-content step=\"3\"&gt;​ 规格参数​ &lt;/v-stepper-content&gt;​ &lt;v-stepper-content step=\"4\"&gt;​ SKU属性​ &lt;/v-stepper-content&gt;​ &lt;/v-stepper-items&gt; &lt;/v-stepper&gt;\\ 效果： 步骤线出现了！ 那么问题来了：该如何让这几个步骤切换呢？ ### 5.3.3.步骤切换按钮 #### 分析 如果改变step的值与指定的步骤索引一致，就可以实现步骤切换了： 因此，我们需要定义两个按钮，点击后修改step的值，让步骤前进或后退。 那么这两个按钮放哪里？ 如果放在MyGoodsForm内，当表单内容过多时，按钮会被挤压到屏幕最下方，不够友好。最好是能够悬停状态。 所以，按钮必须放到MyGoods组件中，也就是父组件。 父组件的对话框是一个card，card组件提供了一个滚动效果，scrollable，如果为true，card的内容滚动时，其头部和底部是可以静止的。 现在card的头部是弹框的标题，card的中间就是表单内容。如果我们把按钮放到底部，就可以实现悬停效果。 #### 页面添加按钮 改造MyGoods的对话框组件： 查看页面： #### 添加点击事件 现在这两个按钮点击后没有任何反应。我们需要给他们绑定点击事件，来修改MyGoodsForm中的step的值。 也就是说，父组件要修改子组件的属性状态。想到什么了？ props属性。 我们先在父组件定义一个step属性： 然后在点击事件中修改它： \\12345678910111213141516171819202122previous()&#123;​ if(this.step &gt; 1)&#123;​ this.step--​ &#125;&#125;,next()&#123;​ if(this.step &lt; 4)&#123;​ this.step++​ &#125;&#125;\\ 页面绑定事件： \\12345678910111213141516&lt;!--底部按钮，用来操作步骤线--&gt;&lt;v-card-actions class=\"elevation-10\"&gt;​ &lt;v-flex class=\"xs3 mx-auto\"&gt;​ &lt;v-btn @click=\"previous\" color=\"primary\" :disabled=\"step === 1\"&gt;上一步&lt;/v-btn&gt;​ &lt;v-btn @click=\"next\" color=\"primary\" :disabled=\"step === 4\"&gt;下一步&lt;/v-btn&gt;​ &lt;/v-flex&gt;&lt;/v-card-actions&gt;\\ 然后把step属性传递给子组件： \\12345678910&lt;!--对话框的内容，表单--&gt;&lt;v-card-text class=\"px-3\" style=\"height: 600px\"&gt;​ &lt;my-goods-form :oldGoods=\"oldGoods\" :step=\"step\"/&gt;&lt;/v-card-text&gt;\\ 子组件中接收属性： 测试效果： ## 5.4.商品基本信息 商品基本信息，主要是一些纯文本比较简单的SPU属性，例如： 商品分类、商品品牌、商品标题、商品卖点（子标题），包装清单，售后服务 接下来，我们一一添加这些表单项。 注：这里为了简化，我们就不进行form表单校验了。之前已经讲过。 ### 5.4.1.在data中定义Goods属性 首先，我们需要定义一个goods对象，包括商品的上述属性。 \\12345678910111213141516171819202122232425262728data() &#123;​ return &#123;​ goods:&#123;​ categories:&#123;&#125;, // 商品3级分类数组信息​ brandId: 0,// 品牌id信息​ title: '',// 标题​ subTitle: '',// 子标题​ spuDetail: &#123;​ packingList: '',// 包装列表​ afterService: '',// 售后服务​ &#125;,​ &#125;​ &#125;\\ 注意，这里我们在goods中定义了spuDetail属性，然后把包装列表和售后服务作为它的属性，这样符合数据库的结构。 ### 5.4.2.商品分类选框 商品分类选框之前我们已经做过了。是级联选框。直接拿来用： \\1234567891011121314&lt;v-cascader​ url=\"/item/category/list\"​ required​ showAllLevels​ v-model=\"goods.categories\"​ label=\"请选择商品分类\"/&gt;\\ 跟以前使用有一些区别： - 一个商品只能有一个分类，所以这里去掉了multiple属性 - 商品SPU中要保存3级商品分类，因此我们这里需要选择showAllLevels属性，显示所有3级分类 效果： 查看goods的属性，三级类目都在： ### 5.4.3.品牌选择 #### select组件 品牌不分级别，使用普通下拉选框即可。我们查看官方文档的下拉选框说明： 组件名：v-select 比较重要的一些属性： - item-text：选项中用来展示的字段名，默认是text - item-value：选项中用来作为value值的字段名，默认是value - items：待选项的对象数组 - label：提示文本 - multiple：是否支持多选，默认是false 其它次要属性： - autocomplete：是否根据用户输入的文本进行搜索过滤（自动），默认false - chips：是否以小纸片方式显示用户选中的项，默认false - clearable：是否添加清空选项图标，默认是false - color：颜色 - dense：是否压缩选择框高度，默认false - editable：是否可编辑，默认false - hide-details：是否隐藏错误提示，默认false - hide-selected：是否在菜单中隐藏已选择的项 - hint：提示文本 - 其它基本与v-text-filed组件类似，不再一一列举 #### 页面实现 备选项items需要我们去后台查询，而且必须是在用户选择商品分类后去查询。 我们定义一个属性，保存品牌的待选项信息： 然后编写一个watch，监控goods.categories的变化： \\1234567891011121314151617181920212223242526272829303132watch: &#123;​ 'goods.categories': &#123;​ deep: true,​ handler(val) &#123;​ // 判断商品分类是否存在，存在才查询​ if (val &amp;&amp; val.length &gt; 0) &#123;​ // 根据分类查询品牌​ this.$http.get(\"/item/brand/cid/\" + this.goods.categories[2].id)​ .then((&#123;data&#125;) =&gt; &#123;​ this.brandOptions = data;​ &#125;)​ &#125;​ &#125;​ &#125;&#125;\\ 我们的品牌对象包含以下字段：id、name、letter、image。显然item-text应该对应name，item-value应该对应id 因此我们添加一个选框，指定item-text和item-value \\1234567891011121314151617181920212223242526&lt;!--品牌--&gt;&lt;v-select​ :items=\"brandOptions\"​ item-text=\"name\"​ item-value=\"id\"​ label=\"所属品牌\"​ v-model=\"goods.brandId\"​ required​ autocomplete​ clearable​ dense chips​ /&gt;\\ #### 后台提供接口 页面需要去后台查询品牌信息，我们自然需要提供： > controller \\12345678910111213141516171819202122232425262728/** \\* 根据分类查询品牌 \\* @param cid \\* @return */@GetMapping(\"cid/&#123;cid&#125;\")public ResponseEntity&lt;List&lt;Brand&gt;&gt; queryBrandByCategory(@PathVariable(\"cid\") Long cid) &#123;​ List&lt;Brand&gt; list = this.brandService.queryBrandByCategory(cid);​ if(list == null)&#123;​ new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(list);&#125;\\ > service \\12345678public List&lt;Brand&gt; queryBrandByCategory(Long cid) &#123;​ return this.brandMapper.queryByCategoryId(cid);&#125;\\ > mapper 根据分类查询品牌有中间表，需要自己编写Sql： \\123456@Select(\"SELECT b.* FROM tb_brand b LEFT JOIN tb_category_brand cb ON b.id = cb.brand_id WHERE cb.category_id = #&#123;cid&#125;\")List&lt;Brand&gt; queryByCategoryId(Long cid);\\ #### 测试效果 ### 5.4.4.标题等其它字段 标题等字段都是普通文本，直接使用v-text-field即可： \\12345678910&lt;v-text-field label=\"商品标题\" v-model=\"goods.title\" :counter=\"200\" required /&gt;&lt;v-text-field label=\"商品卖点\" v-model=\"goods.subTitle\" :counter=\"200\"/&gt;&lt;v-text-field label=\"包装清单\" v-model=\"goods.spuDetail.packingList\" :counter=\"1000\" multi-line :rows=\"3\"/&gt;&lt;v-text-field label=\"售后服务\" v-model=\"goods.spuDetail.afterService\" :counter=\"1000\" multi-line :rows=\"3\"/&gt;\\ 一些新的属性： - counter：计数器，记录当前用户输入的文本字数 - rows：文本域的行数 - multi-line：把单行文本变成文本域 ## 5.5.商品描述信息 商品描述信息比较复杂，而且图文并茂，甚至包括视频。 这样的内容，一般都会使用富文本编辑器。 ### 5.5.1.什么是富文本编辑器 百度百科： 通俗来说：富文本，就是比较丰富的文本编辑器。普通的框只能输入文字，而富文本还能给文字加颜色样式等。 富文本编辑器有很多，例如：KindEditor、Ueditor。但并不原生支持vue 但是我们今天要说的，是一款支持Vue的富文本编辑器：vue-quill-editor ### 5.5.2.Vue-Quill-Editor GitHub的主页：https://github.com/surmon-china/vue-quill-editor Vue-Quill-Editor是一个基于Quill的富文本编辑器：Quill的官网 ### 5.5.3.使用指南 使用非常简单： 第一步：安装，使用npm命令： \\1234npm install vue-quill-editor --save\\ 第二步：加载，在js中引入： 全局使用： \\12345678910import Vue from 'vue'import VueQuillEditor from 'vue-quill-editor'const options = &#123;&#125;; /* &#123; default global options &#125; */Vue.use(VueQuillEditor, options); // options可选\\ 局部使用： \\1234567891011121314151617181920import 'quill/dist/quill.core.css'import 'quill/dist/quill.snow.css'import 'quill/dist/quill.bubble.css'import &#123;quillEditor&#125; from 'vue-quill-editor'var vm = new Vue(&#123;​ components:&#123;​ quillEditor​ &#125;&#125;)\\ 第三步：页面引用： \\1234&lt;quill-editor v-model=\"goods.spuDetail.description\" :options=\"editorOption\"/&gt;\\ ### 5.5.4.自定义的富文本编辑器 不过这个组件有个小问题，就是图片上传的无法直接上传到后台，因此我们对其进行了封装，支持了图片的上传。 使用也非常简单： \\12345678&lt;v-stepper-content step=\"2\"&gt;​ &lt;v-editor v-model=\"goods.spuDetail.description\" upload-url=\"/upload/image\"/&gt;&lt;/v-stepper-content&gt;\\ - upload-url：是图片上传的路径 - v-model：双向绑定，将富文本编辑器的内容绑定到goods.spuDetail.description ### 5.5.5.效果： ## 5.6.规格参数 商品规格参数与商品分类绑定，因此我们需要在用户选择商品分类后，去后台查询对应的规格参数模板。 ### 5.6.1.查询商品规格 首先，我们在data中定义变量，记录查询到的规格参数模板： 然后，我们通过watch监控goods.categories的变化，然后去查询规格： 查看是否查询到： ### 5.6.2.页面展示规格属性 获取到了规格参数，还需要把它展示到页面中。 现在查询到的规格参数只有key，并没有值。值需要用户来根据SPU信息填写，因此规格参数最终需要处理为表单。 > 整体结构 整体来看，规格参数是数组，每个元素是一组规格的集合。我们需要分组来展示。比如每组放到一个card中。 > 注意事项： 规格参数中的属性有一些需要我们特殊处理： - global：是否是全局属性，规格参数中一部分是SPU共享，属于全局属性，另一部是SKU特有，需要根据SKU来填写。因此，在当前版面中，只展示global为true的，即全局属性。sku特有属性放到最后一个面板 - numerical：是否是数值类型，如果是，把单位补充在页面表单，不允许用户填写，并且要验证用户输入的数据格式 - options：是否有可选项，如果有，则使用下拉选框来渲染。 页面代码： \\1234567891011121314151617181920212223242526272829303132333435363738&lt;!--3、规格参数--&gt;&lt;v-stepper-content step=\"3\"&gt;​ &lt;v-flex class=\"xs10 mx-auto px-3\"&gt;​ &lt;!--遍历整个规格参数，获取每一组--&gt;​ &lt;v-card v-for=\"spec in specifications\" :key=\"spec.group\" class=\"my-2\"&gt;​ &lt;!--组名称--&gt;​ &lt;v-card-title class=\"subheading\"&gt;&#123;&#123;spec.group&#125;&#125;&lt;/v-card-title&gt;​ &lt;!--遍历组中的每个属性，并判断是否是全局属性，不是则不显示--&gt;​ &lt;v-card-text v-for=\"param in spec.params\" :key=\"param.k\" v-if=\"param.global\" class=\"px-5\"&gt;​ &lt;!--判断是否有可选项，如果没有，则显示文本框。还要判断是否是数值类型，如果是把unit显示到后缀--&gt;​ &lt;v-text-field v-if=\"param.options.length &lt;= 0\" ​ :label=\"param.k\" v-model=\"param.v\" :suffix=\"param.unit || ''\"/&gt;​ &lt;!--否则，显示下拉选项--&gt;​ &lt;v-select v-else :label=\"param.k\" v-model=\"param.v\" :items=\"param.options\"/&gt;​ &lt;/v-card-text&gt;​ &lt;/v-card&gt;​ &lt;/v-flex&gt;&lt;/v-stepper-content&gt;\\ 效果： ## 5.7.SKU特有属性 sku特有属性也存在与specifications中，但是我们现在只想展示特有属性，而不是从头遍历一次。因此，我们应该从specifications中把特有规格属性拆分出来独立保存。 ### 5.7.1.筛选特有规格参数 首先：我们在data中新建一个属性，保存特有的规格参数： 然后，在查询完成规格模板后，立刻对规格参数进行处理，筛选出特有规格参数，保存到specialSpecs中： \\1234567891011121314151617181920212223242526272829303132333435363738// 根据分类查询规格参数this.$http.get(\"/item/spec/\" + this.goods.categories[2].id)​ .then((&#123;data&#125;) =&gt; &#123;​ // 保存全部规格​ this.specifications = data;​ // 对特有规格进行筛选​ const temp = [];​ data.forEach((&#123;params&#125;) =&gt; &#123;​ params.forEach((&#123;k, options, global&#125;) =&gt; &#123;​ if (!global) &#123;​ temp.push(&#123;​ k, options,selected:[]​ &#125;)​ &#125;​ &#125;)​ &#125;)​ this.specialSpecs = temp;​ &#125;)\\ 要注意：我们添加了一个selected属性，用于保存用户填写的信息 查看数据： ### 5.7.2.页面渲染SKU属性 接下来，我们把筛选出的特有规格参数，渲染到SKU页面： 我们的目标效果是这样的： 可以看到， - 每一个特有属性自成一组，都包含标题和选项。我们可以使用card达到这个效果。 - 无options选项的特有属性，展示一个文本框，有options选项的，展示多个checkbox，让用户选择 页面代码实现： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!--4、SKU属性--&gt;&lt;v-stepper-content step=\"4\"&gt;​ &lt;v-flex class=\"mx-auto\"&gt;​ &lt;!--遍历特有规格参数--&gt;​ &lt;v-card flat v-for=\"spec in specialSpecs\" :key=\"spec.k\"&gt;​ &lt;!--特有参数的标题--&gt;​ &lt;v-card-title class=\"subheading\"&gt;&#123;&#123;spec.k&#125;&#125;:&lt;/v-card-title&gt;​ &lt;!--特有参数的待选项，需要判断是否有options，如果没有，展示文本框，让用户自己输入--&gt;​ &lt;v-card-text v-if=\"spec.options.length &lt;= 0\" class=\"px-5\"&gt;​ &lt;v-text-field :label=\"'输入新的' + spec.k\" v-model=\"spec.selected\"/&gt;​ &lt;/v-card-text&gt;​ &lt;!--如果有options，需要展示成多个checkbox--&gt;​ &lt;v-card-text v-else class=\"container fluid grid-list-xs\"&gt;​ &lt;v-layout row wrap class=\"px-5\"&gt;​ &lt;v-checkbox color=\"primary\" v-for=\"o in spec.options\" :key=\"o\" class=\"flex xs3\"​ :label=\"o\" v-model=\"spec.selected\" :value=\"o\"/&gt;​ &lt;/v-layout&gt;​ &lt;/v-card-text&gt;​ &lt;/v-card&gt;​ &lt;/v-flex&gt;&lt;/v-stepper-content&gt;\\ 我们的实现效果： 测试下，勾选checkbox或填写文本会发生什么： 看下规格模板的值： ### 5.7.3.自由添加或删除文本框 刚才的实现中，普通文本项只有一个，如果用户想添加更多值就不行。我们需要让用户能够自由添加新的文本框，而且还能删除。 这里有个取巧的方法： 还记得我们初始化 特有规格参数时，新增了一个selected属性吗，用来保存用户填写的值，是一个数组。每当用户新加一个值，该数组的长度就会加1，而初始长度为0 另外，v-for指令有个特殊之处，就在于它可以遍历数字。比如 v-for=”i in 10”，你会得到1~10 因此，我们可以遍历selected的长度，每当我们输入1个文本，selected长度会加1，自然会多出一个文本框。 代码如下： \\123456789101112131415161718192021222324252627282930313233343536&lt;v-card flat v-for=\"spec in specialSpecs\" :key=\"spec.k\"&gt;​ &lt;!--特有参数的标题--&gt;​ &lt;v-card-title class=\"subheading\"&gt;&#123;&#123;spec.k&#125;&#125;:&lt;/v-card-title&gt;​ &lt;!--特有参数的待选项，需要判断是否有options，如果没有，展示文本框，让用户自己输入--&gt;​ &lt;v-card-text v-if=\"spec.options.length &lt;= 0\" class=\"px-5\"&gt; &lt;div v-for=\"i in spec.selected.length+1\" :key=\"i\"&gt;​ &lt;v-text-field :label=\"'输入新的' + spec.k\" v-model=\"spec.selected[i-1]\" v-bind:value=\"i\"/&gt;​ &lt;/div&gt;​ &lt;/v-card-text&gt;​ &lt;!--如果有options，需要展示成多个checkbox--&gt;​ &lt;v-card-text v-else class=\"container fluid grid-list-xs\"&gt;​ &lt;v-layout row wrap class=\"px-5\"&gt;​ &lt;v-checkbox color=\"primary\" v-for=\"o in spec.options\" :key=\"o\" class=\"flex xs3\"​ :label=\"o\" v-model=\"spec.selected\" :value=\"o\"/&gt;​ &lt;/v-layout&gt;​ &lt;/v-card-text&gt;&lt;/v-card&gt;\\ 效果： 而删除文本框相对就比较简单了，只要在文本框末尾添加一个按钮，添加点击事件即可，代码： 添加了一些布局样式，以及一个按钮，在点击事件中删除一个值。 ## 5.8.展示SKU列表 ### 5.8.1.效果预览 当我们选定SKU的特有属性时，就会对应出不同排列组合的SKU。 举例： 当你选择了上图中的这些选项时： - 颜色共2种：土豪金，绚丽红 - 内存共2种：2GB，4GB - 机身存储1种：64GB 此时会产生多少种SKU呢？ 应该是 2 2 1 = 4种。 因此，接下来应该由用户来对这4种sku的信息进行详细填写，比如库存和价格等。而多种sku的最佳展示方式，是表格（淘宝、京东都是这么做的），如图： 而且这个表格应该随着用户选择的不同而动态变化。如何实现？ ### 5.8.2.算法：求数组笛卡尔积 大家看这个结果就能发现，这其实是在求多个数组的笛卡尔积。作为一个程序员，这应该是基本功了吧。 > 两个数组笛卡尔积 假如有两个数组，求笛卡尔积，其基本思路是这样的： - 在遍历一个数组的同时，遍历另一个数组，然后把元素拼接，放到新数组。 示例1： \\1234567891011121314151617181920const arr1 = ['1','2','3'];const arr2 = ['a','b','c'];const result = [];arr1.forEach(e1 =&gt; &#123;​ arr2.forEach(e2 =&gt; &#123;​ result.push(e1 + \"_\" + e2)​ &#125;)&#125;)console.log(result);\\ 结果： 完美实现。 > N个数组的笛卡尔积 如果是N个数组怎么办？ 不确定数组数量，代码没有办法写死。该如何处理？ 思路： - 先拿其中两个数组求笛卡尔积 - 然后把前面运算的结果作为新数组，与第三个数组求笛卡尔积 把前两次运算的结果作为第三次运算的参数。大家想到什么了？ 没错，之前讲过的一个数组功能：Reduce reduce函数的声明： \\1234reduce(callback,initvalue)\\ callback：是一个回调函数。这个callback可以接收2个参数：arg1,arg2 - arg1代表的上次运算得到的结果 - arg2是数组中正要处理的元素 initvalue，初始化值。第一次调用callback时把initvalue作为第一个参数，把数组的第一个元素作为第二个参数运算。如果未指定，则第一次运算会把数组的前两个元素作为参数。 reduce会把数组中的元素逐个用这个函数处理，然后把结果作为下一次回调函数的第一个参数，数组下个元素作为第二个参数，以此类推。 因此，我们可以把想要求笛卡尔积的多个数组先放到一个大数组中。形成二维数组。然后再来运算： 示例2： \\12345678910111213141516171819202122232425262728293031323334const arr1 = ['1', '2', '3'];const arr2 = ['a', 'b'];// 用来作为运算的二维数组const arr3 = [arr1, arr2, ['x', 'y']]const result = arr3.reduce((last, el) =&gt; &#123;​ const arr = [];​ // last：上次运算结果​ // el：数组中的当前元素​ last.forEach(e1 =&gt; &#123;​ el.forEach(e2 =&gt; &#123;​ arr.push(e1 + \"_\" + e2)​ &#125;)​ &#125;)​ return arr&#125;);console.log(result);\\ 结果： ### 5.8.3.算法结合业务 来看我们的业务逻辑： 首先，我们已经有了一个特有参数的规格模板： \\123456789101112131415161718192021222324252627282930[ &#123;​ \"k\": \"机身颜色\",​ \"selected\": [\"红色\",\"黑色\"] &#125;, &#123;​ \"k\": \"内存\",​ \"selected\": [\"8GB\",\"6GB\"] &#125;, &#123;​ \"k\": \"机身存储\",​ \"selected\": [\"64GB\",\"256GB\"] &#125;]\\ 可以看做是一个二维数组。 一维是参数对象。 二维是参数中的selected选项。 我们想要的结果： \\12345678910111213141516171819202122[​ &#123;\"机身颜色\":\"红色\",\"内存\":\"6GB\",\"机身存储\":\"64GB\"&#125;,​ &#123;\"机身颜色\":\"红色\",\"内存\":\"6GB\",\"机身存储\":\"256GB\"&#125;,​ &#123;\"机身颜色\":\"红色\",\"内存\":\"8GB\",\"机身存储\":\"64GB\"&#125;,​ &#123;\"机身颜色\":\"红色\",\"内存\":\"8GB\",\"机身存储\":\"256GB\"&#125;,​ &#123;\"机身颜色\":\"黑色\",\"内存\":\"6GB\",\"机身存储\":\"64GB\"&#125;,​ &#123;\"机身颜色\":\"黑色\",\"内存\":\"6GB\",\"机身存储\":\"256GB\"&#125;,​ &#123;\"机身颜色\":\"黑色\",\"内存\":\"8GB\",\"机身存储\":\"64GB\"&#125;,​ &#123;\"机身颜色\":\"黑色\",\"内存\":\"8GB\",\"机身存储\":\"256GB\"&#125;,]\\ 思路是这样： - 我们的启点是一个空的对象数组：[{}]， - 然后先与第一个规格求笛卡尔积 - 然后再把结果与下一个规格求笛卡尔积，依次类推 如果： 代码： 我们在Vue中新增一个计算属性，按照上面所讲的逻辑，计算所有规格参数的笛卡尔积 \\12345678910111213141516171819202122232425262728293031323334353637383940computed: &#123;​ skus() &#123;​ // 过滤掉用户没有填写数据的规格参数​ const arr = this.specialSpecs.filter(s =&gt; s.selected.length &gt; 0);​ // 通过reduce进行累加笛卡尔积​ return arr.reduce((last, spec) =&gt; &#123;​ const result = [];​ last.forEach(o =&gt; &#123;​ spec.selected.forEach(option =&gt; &#123;​ const obj = &#123;&#125;;​ Object.assign(obj, o);​ obj[spec.k] = option;​ result.push(obj);​ &#125;)​ &#125;)​ return result​ &#125;, [&#123;&#125;])​ &#125;&#125;\\ 结果： 优化：这里生成的是SKU的数组。因此只包含SKU的规格参数是不够的。结合数据库知道，还需要有下面的字段： - price：价格 - stock：库存 - enable：是否启用。虽然笛卡尔积对应了9个SKU，但用户不一定会需要所有的组合，用这个字段进行标记。 - images：商品的图片 - indexes：特有属性的索引拼接得到的字符串 我们需要给生成的每个sku对象添加上述字段，代码修改如下： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758computed:&#123;​ skus()&#123;​ // 过滤掉用户没有填写数据的规格参数​ const arr = this.specialSpecs.filter(s =&gt; s.selected.length &gt; 0);​ // 通过reduce进行累加笛卡尔积​ return arr.reduce((last, spec, index) =&gt; &#123;​ const result = [];​ last.forEach(o =&gt; &#123;​ for(let i = 0; i &lt; spec.selected.length; i++)&#123;​ const option = spec.selected[i];​ const obj = &#123;&#125;;​ Object.assign(obj, o);​ obj[spec.k] = option;​ // 拼接当前这个特有属性的索引​ obj.indexes = (o.indexes||'') + '_'+ i​ if(index === arr.length - 1)&#123;​ // 如果发现是最后一组，则添加价格、库存等字段​ Object.assign(obj, &#123; price:0, stock:0,enable:false, images:[]&#125;)​ // 去掉索引字符串开头的下划线​ obj.indexes = obj.indexes.substring(1);​ &#125;​ result.push(obj);​ &#125;​ &#125;)​ return result​ &#125;,[&#123;&#125;])​ &#125;&#125;\\ 查看生成的数据： ### 5.8.4.页面展现 页面展现是一个表格。我们之前已经用过。表格需要以下信息： - items：表格内的数据 - headers：表头信息 刚才我们的计算属性skus得到的就是表格数据了。我们还差头：headers 头部信息也是动态的，用户选择了一个属性，就会多出一个表头。与skus是关联的。 既然如此，我们再次编写一个计算属性，来计算得出header数组： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162headers()&#123;​ if(this.skus.length &lt;= 0)&#123;​ return []​ &#125;​ const headers = [];​ // 获取skus中的任意一个，获取key，然后遍历其属性​ Object.keys(this.skus[0]).forEach(k =&gt; &#123;​ let value = k;​ if(k === 'price')&#123;​ // enable，表头要翻译成“价格”​ k = '价格'​ &#125;else if(k === 'stock')&#123;​ // enable，表头要翻译成“库存”​ k = '库存';​ &#125;else if(k === 'enable')&#123;​ // enable，表头要翻译成“是否启用”​ k = '是否启用'​ &#125; else if(k === 'indexes' || k === 'images')&#123;​ // 图片和索引不在表格中展示​ return;​ &#125;​ headers.push(&#123;​ text: k,​ align: 'center',​ sortable: false,​ value​ &#125;)​ &#125;)​ return headers;&#125;\\ 接下来编写页面，实现table。 需要注意的是，price、stock字段需要用户填写数值，不能直接展示。enable要展示为checkbox，让用户选择，如图： 代码： \\123456789101112131415161718192021222324252627282930313233343536373839404142&lt;v-card&gt;​ &lt;!--标题--&gt;​ &lt;v-card-title class=\"subheading\"&gt;SKU列表&lt;/v-card-title&gt;​ &lt;!--SKU表格，hide-actions因此分页等工具条--&gt;​ &lt;v-data-table :items=\"skus\" :headers=\"headers\" hide-actions item-key=\"indexes\"&gt;​ &lt;template slot=\"items\" slot-scope=\"props\"&gt;​ &lt;!--价格和库存展示为文本框--&gt;​ &lt;td v-for=\"(v,k) in props.item\" :key=\"k\" v-if=\"['price', 'stock'].includes(k)\"​ class=\"text-xs-center\"&gt;​ &lt;v-text-field single-line v-model.number=\"props.item[k]\"/&gt;​ &lt;/td&gt;​ &lt;!--enable展示为checkbox--&gt;​ &lt;td class=\"text-xs-center\" v-else-if=\"k === 'enable'\"&gt;​ &lt;v-checkbox v-model=\"props.item[k]\"/&gt;​ &lt;/td&gt;​ &lt;!--indexes和images不展示，其它展示为普通文本--&gt;​ &lt;td class=\"text-xs-center\" v-else-if=\"!['indexes','images'].includes(k)\"&gt;&#123;&#123;v&#125;&#125;&lt;/td&gt;​ &lt;/template&gt;​ &lt;/v-data-table&gt;&lt;/v-card&gt;\\ 效果： ### 5.8.5.图片上传列表 这个表格中只展示了基本信息，当用户需要上传图片时，该怎么做呢？ Vuetify的table有一个展开功能，可以提供额外的展示空间： 用法也非常简单，添加一个template，把其slot属性指定为expand即可： 效果： 接下来就是我们的图片上传组件：v-upload ## 5.9.表单提交 ### 5.9.1.添加提交按钮 我们在step=4，也就是SKU属性列表页面， 添加一个提交按钮。 \\12345678910&lt;!--提交按钮--&gt;&lt;v-flex xs3 offset-xs9&gt;​ &lt;v-btn color=\"info\"&gt;保存商品信息&lt;/v-btn&gt;&lt;/v-flex&gt;\\ 效果： ### 5.9.2点击事件 当用户点击保存，我们就需要对页面的数据进行整理，然后提交到后台服务。 现在我们页面包含了哪些信息呢？我们与数据库对比，看看少什么 - goods：里面包含了SPU的几乎所有信息 - title：标题 - subtitle：子标题，卖点 - categories：分类对象数组，需要进行整理 ** - brandId：品牌id - spuDetail：商品详情 ​ - packingList：包装清单 ​ - afterService：售后服务 ​ - description：商品描述 ​ - 缺少全局规格属性specifications ** ​ - 缺少特有规格属性模板spec_template ** - skus：包含了sku列表的几乎所有信息 - price：价格，需要处理为以分为单位 - stock：库存 - enable：是否启用 - indexes：索引 - images：图片，数组，需要处理为字符串** - 缺少其它特有规格，ows_spec ** - 缺少标题：需要根据spu的标题结合特有属性生成 ** - specifications：全局规格参数的键值对信息 - specialSpec：特有规格参数信息 在页面绑定点击事件： \\12345678910&lt;!--提交按钮--&gt;&lt;v-flex xs3 offset-xs9&gt;​ &lt;v-btn color=\"info\" @click=\"submit\"&gt;保存商品信息&lt;/v-btn&gt;&lt;/v-flex&gt;\\ 编写代码，整理数据： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970submit()&#123;​ // 表单校验。 略​ // 先处理goods，用结构表达式接收,除了categories外，都接收到goodsParams中​ const &#123;categories: [&#123;id:cid1&#125;,&#123;id:cid2&#125;,&#123;id:cid3&#125;], ...goodsParams&#125; = this.goods;​ // 处理规格参数​ const specs = this.specifications.map((&#123;group,params&#125;) =&gt; &#123;​ const newParams = params.map((&#123;options,...rest&#125;) =&gt; &#123;​ return rest;​ &#125;)​ return &#123;group,params:newParams&#125;;​ &#125;);​ // 处理特有规格参数模板​ const specTemplate = &#123;&#125;;​ this.specialSpecs.forEach((&#123;k, selected&#125;) =&gt; &#123;​ specTemplate[k] = selected;​ &#125;);​ // 处理sku​ const skus = this.skus.filter(s =&gt; s.enable).map((&#123;price,stock,enable,images,indexes, ...rest&#125;) =&gt; &#123;​ // 标题，在spu的title基础上，拼接特有规格属性值​ const title = goodsParams.title + \" \" + Object.values(rest).join(\" \");​ return &#123;​ price: this.$format(price+\"\"),stock,enable,indexes,title,// 基本属性​ images: !images ? '' : images.join(\",\"), // 图片​ ownSpec: JSON.stringify(rest), // 特有规格参数​ &#125;​ &#125;);​ Object.assign(goodsParams, &#123;​ cid1,cid2,cid3, // 商品分类​ skus, // sku列表​ &#125;)​ goodsParams.spuDetail.specifications= JSON.stringify(specs);​ goodsParams.spuDetail.specTemplate = JSON.stringify(specTemplate);​ console.log(goodsParams)&#125;\\ 点击测试，看效果： 向后台发起请求，因为请求体复杂，我们直接发起Json请求： \\123456789101112131415161718192021222324this.$http.post(\"/item/goods\",goodsParams)​ .then(() =&gt; &#123;​ // 成功，关闭窗口​ this.$emit('close');​ // 提示成功​ this.$message.success(\"新增成功了\")​ &#125;)​ .catch(() =&gt; &#123;​ this.$message.error(\"保存失败！\");​ &#125;);&#125;)\\ ### 5.9.3.后台编写接口 #### 实体类 > Spu \\12345678910111213141516171819202122232425262728293031323334@Table(name = \"tb_spu\")public class Spu &#123;​ @Id​ @GeneratedValue(strategy = GenerationType.IDENTITY)​ private Long id;​ private Long brandId;​ private Long cid1;// 1级类目​ private Long cid2;// 2级类目​ private Long cid3;// 3级类目​ private String title;// 标题​ private String subTitle;// 子标题​ private Boolean saleable;// 是否上架​ private Boolean valid;// 是否有效，逻辑删除用​ private Date createTime;// 创建时间​ private Date lastUpdateTime;// 最后修改时间&#125;\\ > SpuDetail \\12345678910111213141516171819202122@Table(name=\"tb_spu_detail\")public class SpuDetail &#123;​ @Id​ private Long spuId;// 对应的SPU的id​ private String description;// 商品描述​ private String specTemplate;// 商品特殊规格的名称及可选值模板​ private String specifications;// 商品的全局规格属性​ private String packingList;// 包装清单​ private String afterService;// 售后服务&#125;\\ > Sku \\123456789101112131415161718192021222324252627282930313233343536@Table(name = \"tb_sku\")public class Sku &#123;​ @Id​ @GeneratedValue(strategy = GenerationType.IDENTITY)​ private Long id;​ private Long spuId;​ private String title;​ private String images;​ private Long price;​ private String ownSpec;// 商品特殊规格的键值对​ private String indexes;// 商品特殊规格的下标​ private Boolean enable;// 是否有效，逻辑删除用​ private Date createTime;// 创建时间​ private Date lastUpdateTime;// 最后修改时间​ @Transient​ private Long stock;// 库存&#125;\\ 注意：这里保存了一个库存字段，在数据库中是另外一张表保存的，方便查询。 > Stock \\123456789101112131415161718@Table(name = \"tb_stock\")public class Stock &#123;​ @Id​ private Long skuId;​ private Integer seckillStock;// 秒杀可用库存​ private Integer seckillTotal;// 已秒杀数量​ private Integer stock;// 正常库存&#125;\\ #### Controller 四个问题： - 请求方式：POST - 请求路径：/goods - 请求参数：Spu的json格式的对象，spu中包含spuDetail和Sku集合。这里我们该怎么接收？我们之前定义了一个SpuBo对象，作为业务对象。这里也可以用它，不过需要再扩展spuDetail和skus字段： \\123456789101112131415161718192021222324 public class SpuBo extends Spu &#123; ​ @Transient​ String cname;// 商品分类名称​ @Transient​ String bname;// 品牌名称​ @Transient​ SpuDetail spuDetail;// 商品详情​ @Transient​ List&lt;Sku&gt; skus;// sku列表 &#125; \\ - 返回类型：无 代码： \\1234567891011121314151617181920212223242526272829303132/** \\* 新增商品 \\* @param spu \\* @return */@PostMappingpublic ResponseEntity&lt;Void&gt; saveGoods(@RequestBody Spu spu) &#123;​ try &#123;​ this.goodsService.save(spu);​ return new ResponseEntity&lt;&gt;(HttpStatus.CREATED);​ &#125; catch (Exception e) &#123;​ e.printStackTrace();​ return new ResponseEntity&lt;&gt;(HttpStatus.INTERNAL_SERVER_ERROR);​ &#125;&#125;\\ 注意：通过@RequestBody注解来接收Json请求 > Service 这里的逻辑比较复杂，我们除了要对SPU新增以外，还要对SpuDetail、Sku、Stock进行保存 \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566@Transactionalpublic void save(SpuBo spu) &#123;​ // 保存spu​ spu.setSaleable(true);​ spu.setValid(true);​ spu.setCreateTime(new Date());​ spu.setLastUpdateTime(spu.getCreateTime());​ this.spuMapper.insert(spu);​ // 保存spu详情​ spu.getSpuDetail().setSpuId(spu.getId());​ this.spuDetailMapper.insert(spu.getSpuDetail());​ // 保存sku和库存信息​ saveSkuAndStock(spu.getSkus(), spu.getId());&#125;private void saveSkuAndStock(List&lt;Sku&gt; skus, Long spuId) &#123;​ for (Sku sku : skus) &#123;​ if (!sku.getEnable()) &#123;​ continue;​ &#125;​ // 保存sku​ sku.setSpuId(spuId);​ // 默认不参与任何促销​ sku.setCreateTime(new Date());​ sku.setLastUpdateTime(sku.getCreateTime());​ this.skuMapper.insert(sku);​ // 保存库存信息​ Stock stock = new Stock();​ stock.setSkuId(sku.getId());​ stock.setStock(sku.getStock());​ this.stockMapper.insert(stock);​ &#125;&#125;\\ #### Mapper 都是通用Mapper，略","categories":[],"tags":[],"keywords":[]},{"title":"day08品牌管理","slug":"day08品牌管理","date":"2019-05-03T03:02:06.000Z","updated":"2019-05-03T03:03:50.990Z","comments":true,"path":"2019/05/03/day08品牌管理/","link":"","permalink":"https://mr8649.github.io/2019/05/03/day08品牌管理/","excerpt":"","text":"# 0.学习目标 - 独立实现品牌新增 - 实现图片上传 - 了解FastDFS的安装 - 使用FastDFS客户端实现上传 # 1.品牌的新增 昨天我们完成了品牌的查询，接下来就是新增功能。 ## 1.1.页面实现 ### 1.1.1.初步编写弹窗 当我们点击新增按钮，应该出现一个弹窗，然后在弹窗中出现一个表格，我们就可以填写品牌信息了。 我们查看Vuetify官网，弹窗是如何实现： 另外，我们可以通过文档看到对话框的一些属性： - value：控制窗口的可见性，true可见，false，不可见 - max-width：控制对话框最大宽度 - scrollable ：是否可滚动，要配合v-card来使用，默认是false - persistent ：点击弹窗以外的地方不会关闭弹窗，默认是false 现在，我们来使用一下。 首先，我们在data中定义一个show属性，来控制对话框的显示状态： 然后，在页面添加一个v-dialog \\12345678910111213141516171819202122232425262728&lt;!--弹出的对话框--&gt;&lt;v-dialog max-width=\"500\" v-model=\"show\" persistent&gt;​ &lt;v-card&gt;​ &lt;!--对话框的标题--&gt;​ &lt;v-toolbar dense dark color=\"primary\"&gt;​ &lt;v-toolbar-title&gt;新增品牌&lt;/v-toolbar-title&gt;​ &lt;/v-toolbar&gt;​ &lt;!--对话框的内容，表单--&gt;​ &lt;v-card-text class=\"px-5\"&gt;​ 我是表单​ &lt;/v-card-text&gt;​ &lt;/v-card&gt;&lt;/v-dialog&gt;\\ 说明： - 我们给dialog指定了3个属性，分别是 - max-width：限制宽度 - v-model：value值双向绑定到show变量，用来控制窗口显示 - persisitent：控制窗口不会被意外关闭 - 因为可滚动需要配合v-card使用，因此我们在对话框中加入了一个v-card - 在v-card的头部添加了一个 v-toolbar，作为窗口的头部，并且写了标题为：新增品牌 ​ - dense：紧凑显示 ​ - dark：黑暗主题 ​ - color：颜色，primary就是整个网站的主色调，蓝色 - 在v-card的内容部分，暂时空置，等会写表单 - class=“px-5&quot;：vuetify的内置样式，含义是padding的x轴设置为5，这样表单内容会缩进一些，而不是顶着边框 基本语法：{property}{direction}-{size} - property：属性，有两种padding和margin ​ - p：对应padding ​ - m：对应margin - direction：只padding和margin的作用方向， ​ - t - 对应margin-top或者padding-top属性 ​ - b - 对应margin-bottom or padding-bottom ​ - l - 对应margin-left or padding-left ​ - r - 对应margin-right or padding-right ​ - x - 同时对应*-left和*-right属性 ​ - y - 同时对应*-top和*-bottom属性 - size：控制空间大小，基于$spacer进行倍增，$spacer默认是16px ​ - 0：将margin或padding的大小设置为0 ​ - 1 - 将margin或者padding属性设置为$spacer * .25 ​ - 2 - 将margin或者padding属性设置为$spacer * .5 ​ - 3 - 将margin或者padding属性设置为$spacer ​ - 4 - 将margin或者padding属性设置为$spacer * 1.5 ​ - 5 - 将margin或者padding属性设置为$spacer * 3 ### 1.1.2.实现弹窗的可见和关闭 > 窗口可见 接下来，我们要在点击新增品牌按钮时，将窗口显示，因此要给新增按钮绑定事件。 \\1234&lt;v-btn color=\"primary\" @click=\"addBrand\"&gt;新增品牌&lt;/v-btn&gt;\\ 然后定义一个addBrand方法： \\12345678910addBrand()&#123;​ // 控制弹窗可见：​ this.show = true;&#125;\\ 效果： > 窗口关闭 现在，悲剧发生了，因为我们设置了persistent属性，窗口无法被关闭了。除非把show属性设置为false 因此我们需要给窗口添加一个关闭按钮： \\12345678910111213141516&lt;!--对话框的标题--&gt;&lt;v-toolbar dense dark color=\"primary\"&gt;​ &lt;v-toolbar-title&gt;新增品牌&lt;/v-toolbar-title&gt;​ &lt;v-spacer/&gt;​ &lt;!--关闭窗口的按钮--&gt;​ &lt;v-btn icon @click=\"closeWindow\"&gt;&lt;v-icon&gt;close&lt;/v-icon&gt;&lt;/v-btn&gt;&lt;/v-toolbar&gt;\\ 并且，我们还给按钮绑定了点击事件，回调函数为closeWindow。 接下来，编写closeWindow函数： \\12345678910closeWindow()&#123;​ // 关闭窗口​ this.show = false;&#125;\\ 效果： ### 1.1.3.新增品牌的表单页 接下来就是写表单了。我们有两种选择： - 直接在dialog对话框中编写表单代码 - 另外编写一个组件，组件内写表单代码。然后在对话框引用组件 选第几种？ 我们选第二种方案，优点： - 表单代码独立组件，可拔插，方便后期的维护。 - 代码分离，可读性更好。 我们新建一个MyBrandForm.vue组件： 将MyBrandForm引入到MyBrand中，这里使用局部组件的语法： 先导入自定义组件： \\123456 // 导入自定义的表单组件 import MyBrandForm from './MyBrandForm'\\ 然后通过components属性来指定局部组件： \\12345678components:&#123;​ MyBrandForm&#125;\\ 然后在页面中引用： 页面效果： ### 1.1.4.编写表单 #### 1.1.4.1.表单 查看文档，找到关于表单的部分： v-form，表单组件，内部可以有许多输入项。v-form有下面的属性： - value：true，代表表单验证通过；false，代表表单验证失败 v-form提供了两个方法： - reset：重置表单数据 - validate：校验整个表单数据，前提是你写好了校验规则。返回Boolean表示校验成功或失败 我们在data中定义一个valid属性，跟表单的value进行双向绑定，观察表单是否通过校验，同时把等会要跟表单关联的品牌brand对象声明出来： \\123456789101112131415161718192021222324252627282930 export default &#123;​ name: \"my-brand-form\",​ data() &#123;​ return &#123;​ valid:false, // 表单校验结果标记​ brand:&#123;​ name:'', // 品牌名称​ letter:'', // 品牌首字母​ image:'',// 品牌logo​ categories:[], // 品牌所属的商品分类数组​ &#125;​ &#125;​ &#125; &#125;\\ 然后，在页面先写一个表单： \\123456&lt;v-form v-model=\"valid\"&gt;&lt;/v-form&gt;\\ #### 1.1.4.2.文本框 我们的品牌总共需要这些字段： - 名称 - 首字母 - 商品分类，有很多个 - LOGO 表单项主要包括文本框、密码框、多选框、单选框、文本域、下拉选框、文件上传等。思考下我们的品牌需要哪些？ - 文本框：品牌名称、品牌首字母都属于文本框 - 文件上传：品牌需要图片，这个是文件上传框 - 下拉选框：商品分类提前已经定义好，这里需要通过下拉选框展示，提供给用户选择。 先看文本框，昨天已经用过的，叫做v-text-field： 查看文档，v-text-field有以下关键属性： - append-icon：文本框后追加图标，需要填写图标名称。无默认值 - clearable：是否添加一个清空图标，点击会清空文本框。默认是false - color：颜色 - counter：是否添加一个文本计数器，在角落显示文本长度，指定true或允许的组大长度。无默认值 - dark：是否应用黑暗色调，默认是false - disable：是否禁用，默认是false - flat：是否移除默认的动画效果，默认是false - full-width：指定宽度为全屏，默认是false - hide-details：是否因此错误提示，默认是false - hint：输入框的提示文本 - label：输入框的标签 - multi-line：是否转为文本域，默认是false。文本框和文本域可以自由切换 - placeholder：输入框占位符文本，focus后消失 - required：是否为必填项，如果是，会在label后加*，不具备校验功能。默认是false - rows：文本域的行数，multi-line为true时才有效 - rules：指定校验规则及错误提示信息，数组结构。默认[] - single-line：是否单行文本显示，默认是false - suffix：显示后缀 接下来，我们先添加两个字段：品牌名称、品牌的首字母，校验规则暂时不写： \\12345678910 &lt;v-form v-model=\"valid\"&gt;​ &lt;v-text-field v-model=\"brand.name\" label=\"请输入品牌名称\" required /&gt;​ &lt;v-text-field v-model=\"brand.letter\" label=\"请输入品牌首字母\" required /&gt; &lt;/v-form&gt;\\ - 千万不要忘了通过v-model把表单项与brand的属性关联起来。 效果： #### 1.1.4.3.级联下拉选框 接下来就是商品分类了，按照刚才的分析，商品分类应该是下拉选框。 但是大家仔细思考，商品分类包含三级。在展示的时候，应该是先由用户选中1级，才显示2级；选择了2级，才显示3级。形成一个多级分类的三级联动效果。 这个时候，就不是普通的下拉选框，而是三级联动的下拉选框！ 这样的选框，在Vuetify中并没有提供（它提供的是基本的下拉框）。因此我已经给大家编写了一个无限级联动的下拉选框，能够满足我们的需求。 具体请参考课前资料的《自定义组件用法指南.md》 我们在代码中使用： \\1234567891011121314​ &lt;v-cascader​ url=\"/item/category/list\"​ multiple ​ required​ v-model=\"brand.categories\"​ label=\"请选择商品分类\"/&gt;\\ - url：加载商品分类选项的接口路径 - multiple：是否多选，这里设置为true，因为一个品牌可能有多个分类 - requried：是否是必须的，这里为true，会在提示上加*，提醒用户 - v-model：关联我们brand对象的categories属性 - label：文字说明 效果： data中获取的结果： #### 1.1.4.4.文件上传项 在Vuetify中，也没有文件上传的组件。 还好，我已经给大家写好了一个文件上传的组件： 详细用法，参考《自定义组件使用指南.md》 我们添加上传的组件： \\123456789101112131415161718192021222324252627282930&lt;v-layout row&gt;​ &lt;v-flex xs3&gt;​ &lt;span style=\"font-size: 16px; color: #444\"&gt;品牌LOGO：&lt;/span&gt;​ &lt;/v-flex&gt;​ &lt;v-flex&gt;​ &lt;v-upload​ v-model=\"brand.image\"​ url=\"/upload\" ​ :multiple=\"false\" ​ :pic-width=\"250\" ​ :pic-height=\"90\"​ /&gt;​ &lt;/v-flex&gt;&lt;/v-layout&gt;\\ 注意： - 文件上传组件本身没有提供文字提示。因此我们需要自己添加一段文字说明 - 我们要实现文字和图片组件左右放置，因此这里使用了v-layout布局组件： - layout添加了row属性，代表这是一行，如果是column，代表是多行 - layout下面有v-flex组件，是这一行的单元，我们有2个单元 ​ - &lt;v-flex xs3&gt; ：显示文字说明，xs3是响应式布局，代表占12格中的3格 ​ - 剩下的部分就是图片上传组件了 - v-upload：图片上传组件，包含以下属性： - v-model：将上传的结果绑定到brand的image属性 - url：上传的路径，我们先随便写一个。 - multiple：是否运行多图片上传，这里是false。因为品牌LOGO只有一个 - pic-width和pic-height：可以控制l图片上传后展示的宽高 最终结果： #### 1.1.4.5.按钮 上面已经把所有的表单项写完。最后就差提交和清空的按钮了。 在表单的最下面添加两个按钮： \\123456789101112​ &lt;v-layout class=\"my-4\" row&gt;​ &lt;v-spacer/&gt;​ &lt;v-btn @click=\"submit\" color=\"primary\"&gt;提交&lt;/v-btn&gt;​ &lt;v-btn @click=\"clear\" &gt;重置&lt;/v-btn&gt;​ &lt;/v-layout&gt;\\ - 通过layout来进行布局，my-4增大上下边距 - v-spacer占用一定空间，将按钮都排挤到页面右侧 - 两个按钮分别绑定了submit和clear事件 我们先将方法定义出来： \\123456789101112131415161718methods:&#123;​ submit()&#123;​ // 提交表单​ &#125;,​ clear()&#123;​ // 重置表单​ &#125;&#125;\\ 重置表单相对简单，因为v-form组件已经提供了reset方法，用来清空表单数据。只要我们拿到表单组件对象，就可以调用方法了。 我们可以通过$refs内置对象来获取表单组件。 首先，在表单上定义ref属性： 然后，在页面查看this.$refs属性： 看到this.$refs中只有一个属性，就是myBrandForm 我们在clear中来获取表单对象并调用reset方法： \\1234567891011121314151617181920212223242526​ methods:&#123;​ submit()&#123;​ // 提交表单​ console.log(this);​ &#125;,​ clear()&#123;​ // 重置表单​ this.$refs.myBrandForm.reset();​ // 需要手动清空商品分类​ this.categories = [];​ &#125;​ &#125;\\ 要注意的是，这里我们还手动把this.categories清空了，因为我写的级联选择组件并没有跟表单结合起来。需要手动清空。 ### 1.1.5.表单校验 #### 1.1.5.1.校验规则 Vuetify的表单校验，是通过rules属性来指定的： 校验规则的写法： 说明： - 规则是一个数组 - 数组中的元素是一个函数，该函数接收表单项的值作为参数，函数返回值两种情况： - 返回true，代表成功， - 返回错误提示信息，代表失败 #### 1.1.5.2.项目中代码 我们有四个字段： - name：做非空校验和长度校验，长度必须大于1 - letter：首字母，校验长度为1，非空。 - image：图片，不做校验，图片可以为空 - categories：非空校验，自定义组件已经帮我们完成，不用写了 首先，我们定义规则： \\123456789101112131415161718nameRules:[​ v =&gt; !!v || \"品牌名称不能为空\",​ v =&gt; v.length &gt; 1 || \"品牌名称至少2位\"],letterRules:[​ v =&gt; !!v || \"首字母不能为空\",​ v =&gt; /^[A-Z]&#123;1&#125;$/.test(v) || \"品牌字母只能是A~Z的大写字母\"]\\ 然后，在页面标签中指定： \\123456&lt;v-text-field v-model=\"brand.name\" label=\"请输入品牌名称\" required :rules=\"nameRules\" /&gt;&lt;v-text-field v-model=\"brand.letter\" label=\"请输入品牌首字母\" required :rules=\"letterRules\" /&gt;\\ 效果： ### 1.1.6.表单提交 在submit方法中添加表单提交的逻辑： \\123456789101112131415161718192021222324252627282930313233343536373839404142submit() &#123;​ // 1、表单校验​ if (this.$refs.myBrandForm.validate()) &#123;​ // 2、定义一个请求参数对象，通过解构表达式来获取brand中的属性​ const &#123;categories ,letter ,...params&#125; = this.brand;​ // 3、数据库中只要保存分类的id即可，因此我们对categories的值进行处理,只保留id，并转为字符串​ params.cids = categories.map(c =&gt; c.id).join(\",\");​ // 4、将字母都处理为大写​ params.letter = letter.toUpperCase();​ // 5、将数据提交到后台​ this.$http.post('/item/brand', params)​ .then(() =&gt; &#123;​ // 6、弹出提示​ this.$message.success(\"保存成功！\");​ &#125;)​ .catch(() =&gt; &#123;​ this.$message.error(\"保存失败！\");​ &#125;);​ &#125;&#125;\\ - 1、通过this.$refs.myBrandForm选中表单，然后调用表单的validate方法，进行表单校验。返回boolean值，true代表校验通过 - 2、通过解构表达式来获取brand中的值，categories和letter需要处理，单独获取。其它的存入params对象中 - 3、品牌和商品分类的中间表只保存两者的id，而brand.categories中保存的数对象数组，里面有id和name属性，因此这里通过数组的map功能转为id数组，然后通过join方法拼接为字符串 - 4、首字母都处理为大写保存 - 5、发起请求 - 6、弹窗提示成功还是失败，这里用到的是我们的自定义组件功能message组件： 这个插件把$message对象绑定到了Vue的原型上，因此我们可以通过this.$message来直接调用。 包含以下常用方法： - info、error、success、warning等，弹出一个带有提示信息的窗口，色调与为普通（灰）、错误（红色）、成功（绿色）和警告（黄色）。使用方法：this.$message.info(“msg”) - confirm：确认框。用法：this.$message.confirm(&quot;确认框的提示信息&quot;)，返回一个Promise ## 1.2.后台实现新增 ### 1.2.1.controller 还是一样，先分析四个内容： - 请求方式：刚才看到了是POST - 请求路径：/brand - 请求参数：brand对象，外加商品分类的id数组cids - 返回值：无 代码： \\12345678910111213141516171819202122/** \\* 新增品牌 \\* @param brand \\* @return */@PostMappingpublic ResponseEntity&lt;Void&gt; saveBrand(Brand brand, @RequestParam(\"cids\") List&lt;Long&gt; cids) &#123;​ this.brandService.saveBrand(brand, cids);​ return new ResponseEntity&lt;&gt;(HttpStatus.CREATED);&#125;\\ ### 1.2.2.Service 这里要注意，我们不仅要新增品牌，还要维护品牌和商品分类的中间表。 \\1234567891011121314151617181920@Transactionalpublic void saveBrand(Brand brand, List&lt;Long&gt; cids) &#123;​ // 新增品牌信息​ this.brandMapper.insertSelective(brand);​ // 新增品牌和分类中间表​ for (Long cid : cids) &#123;​ this.brandMapper.insertCategoryBrand(cid, brand.getId());​ &#125;&#125;\\ 这里调用了brandMapper中的一个自定义方法，来实现中间表的数据新增 ### 1.2.3.Mapper 通用Mapper只能处理单表，也就是Brand的数据，因此我们手动编写一个方法及sql，实现中间表的新增： \\12345678910111213141516171819202122public interface BrandMapper extends Mapper&lt;Brand&gt; &#123;​ /**​ \\* 新增商品分类和品牌中间表数据​ \\* @param cid 商品分类id​ \\* @param bid 品牌id​ \\* @return​ */​ @Insert(\"INSERT INTO tb_category_brand (category_id, brand_id) VALUES (#&#123;cid&#125;,#&#123;bid&#125;)\")​ int insertCategoryBrand(@Param(\"cid\") Long cid, @Param(\"bid\") Long bid);&#125;\\ ## 1.3.请求参数格式错误 ### 1.3.1.原因分析 我们填写表单并提交，发现报错了： 查看控制台的请求详情： 发现请求的数据格式是JSON格式。 > 原因分析： axios处理请求体的原则会根据请求数据的格式来定： - 如果请求体是对象：会转为json发送 - 如果请求体是String：会作为普通表单请求发送，但需要我们自己保证String的格式是键值对。 如：name=jack&amp;age=12 ### 1.3.2.QS工具 QS是一个第三方库，我们可以用npm install qs --save来安装。不过我们在项目中已经集成了，大家无需安装： 这个工具的名字：QS，即Query String，请求参数字符串。 什么是请求参数字符串？例如： name=jack&amp;age=21 QS工具可以便捷的实现 JS的Object与QueryString的转换。 在我们的项目中，将QS注入到了Vue的原型对象中，我们可以通过this.$qs来获取这个工具： 我们将this.$qs对象打印到控制台： \\12345678created()&#123;​ console.log(this.$qs);&#125;\\ 发现其中有3个方法： 这里我们要使用的方法是stringify，它可以把Object转为QueryString。 测试一下，使用浏览器工具，把qs对象保存为一个临时变量： 然后调用stringify方法： 成功将person对象变成了 name=jack&amp;age=21的字符串了 ### 1.3.3.解决问题 修改页面，对参数处理后发送： 然后再次发起请求： 发现请求成功： 参数格式： 数据库： ## 1.4.新增完成后关闭窗口 我们发现有一个问题：新增不管成功还是失败，窗口都一致在这里，不会关闭。 这样很不友好，我们希望如果新增失败，窗口保持；但是新增成功，窗口关闭才对。 因此，我们需要在新增的ajax请求完成以后，关闭窗口 但问题在于，控制窗口是否显示的标记在父组件：MyBrand.vue中。子组件如何才能操作父组件的属性？或者告诉父组件该关闭窗口了？ 之前我们讲过一个父子组件的通信，有印象吗？ - 第一步，在父组件中定义一个函数，用来关闭窗口，不过之前已经定义过了，我们优化一下，关闭的同时重新加载数据： \\1234567891011121314closeWindow()&#123;​ // 关闭窗口​ this.show = false;​ // 重新加载数据​ this.getDataFromServer();&#125;\\ - 第二步，父组件在使用子组件时，绑定事件，关联到这个函数： \\12345678910&lt;!--对话框的内容，表单--&gt;&lt;v-card-text class=\"px-5\"&gt;​ &lt;my-brand-form @close=\"closeWindow\"/&gt;&lt;/v-card-text&gt;\\ - 第三步，子组件通过this.$emit调用父组件的函数： 测试一下 # 2.实现图片上传 刚才的新增实现中，我们并没有上传图片，接下来我们一起完成图片上传逻辑。 文件的上传并不只是在品牌管理中有需求，以后的其它服务也可能需要，因此我们创建一个独立的微服务，专门处理各种上传。 ## 2.1.搭建项目 ### 2.1.1.创建module ### 2.1.2.依赖 我们需要EurekaClient和web依赖： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"​ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"​ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;​ &lt;parent&gt;​ &lt;artifactId&gt;leyou&lt;/artifactId&gt;​ &lt;groupId&gt;com.leyou.parent&lt;/groupId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;/parent&gt;​ &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;​ &lt;groupId&gt;com.leyou.service&lt;/groupId&gt;​ &lt;artifactId&gt;ly-upload&lt;/artifactId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;dependencies&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;/dependencies&gt;&lt;/project&gt;\\ ### 2.1.3.编写配置 \\12345678910111213141516171819202122232425262728293031323334353637383940server: port: 8082spring: application:​ name: upload-service servlet:​ multipart:​ max-file-size: 5MB # 限制文件上传的大小\\# Eurekaeureka: client:​ service-url:​ defaultZone: http://127.0.0.1:10086/eureka instance:​ lease-renewal-interval-in-seconds: 5 # 每隔5秒发送一次心跳​ lease-expiration-duration-in-seconds: 10 # 10秒不发送就过期​ prefer-ip-address: true​ ip-address: 127.0.0.1​ instance-id: $&#123;spring.application.name&#125;:$&#123;server.port&#125;\\ 需要注意的是，我们应该添加了限制文件大小的配置 ### 2.1.4.启动类 \\12345678910111213141516@SpringBootApplication@EnableDiscoveryClientpublic class LyUploadService &#123;​ public static void main(String[] args) &#123;​ SpringApplication.run(LyUploadService.class, args);​ &#125;&#125;\\ 结构： ## 2.2.编写上传功能 ### 2.2.1.controller 编写controller需要知道4个内容： - 请求方式：上传肯定是POST - 请求路径：/upload/image - 请求参数：文件，参数名是file，SpringMVC会封装为一个接口：MultipleFile - 返回结果：上传成功后得到的文件的url路径 代码如下： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344@RestController@RequestMapping(\"upload\")public class UploadController &#123;​ @Autowired​ private UploadService uploadService;​ /**​ \\* 上传图片功能​ \\* @param file​ \\* @return​ */​ @PostMapping(\"image\")​ public ResponseEntity&lt;String&gt; uploadImage(@RequestParam(\"file\") MultipartFile file) &#123;​ String url = this.uploadService.upload(file);​ if (StringUtils.isBlank(url)) &#123;​ // url为空，证明上传失败​ return new ResponseEntity&lt;&gt;(HttpStatus.BAD_REQUEST);​ &#125;​ // 返回200，并且携带url路径​ return ResponseEntity.ok(url);​ &#125;&#125;\\ ### 2.2.2.service 在上传文件过程中，我们需要对上传的内容进行校验： \\1. 校验文件大小 \\2. 校验文件的媒体类型 \\3. 校验文件的内容 文件大小在Spring的配置文件中设置，因此已经会被校验，我们不用管。 具体代码： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374@Servicepublic class UploadService &#123;​ private static final Logger logger = LoggerFactory.getLogger(UploadController.class);​ // 支持的文件类型​ private static final List&lt;String&gt; suffixes = Arrays.asList(\"image/png\", \"image/jpeg\");​ public String upload(MultipartFile file) &#123;​ try &#123;​ // 1、图片信息校验​ // 1)校验文件类型​ String type = file.getContentType();​ if (!suffixes.contains(type)) &#123;​ logger.info(\"上传失败，文件类型不匹配：&#123;&#125;\", type);​ return null;​ &#125;​ // 2)校验图片内容​ BufferedImage image = ImageIO.read(file.getInputStream());​ if (image == null) &#123;​ logger.info(\"上传失败，文件内容不符合要求\");​ return null;​ &#125;​ // 2、保存图片​ // 2.1、生成保存目录​ File dir = new File(\"D:**\\\\**heima**\\\\**upload\");​ if (!dir.exists()) &#123;​ dir.mkdirs();​ &#125;​ // 2.2、保存图片​ file.transferTo(new File(dir, file.getOriginalFilename()));​ // 2.3、拼接图片地址​ String url = \"http://image.leyou.com/upload/\" + file.getOriginalFilename();​ return url;​ &#125; catch (Exception e) &#123;​ return null;​ &#125;​ &#125;&#125;\\ 这里有一个问题：为什么图片地址需要使用另外的url？ - 图片不能保存在服务器内部，这样会对服务器产生额外的加载负担 - 一般静态资源都应该使用独立域名，这样访问静态资源时不会携带一些不必要的cookie，减小请求的数据量 ### 2.2.3.测试上传 我们通过RestClient工具来测试： 结果： 去目录下查看： 上传成功！ ### 2.2.4.绕过网关 图片上传是文件的传输，如果也经过Zuul网关的代理，文件就会经过多次网路传输，造成不必要的网络负担。在高并发时，可能导致网络阻塞，Zuul网关不可用。这样我们的整个系统就瘫痪了。 所以，我们上传文件的请求就不经过网关来处理了。 #### 2.2.4.1.Zuul的路由过滤 Zuul中提供了一个ignored-patterns属性，用来忽略不希望路由的URL路径，示例： \\1234zuul.ignored-patterns: /upload/**\\ 路径过滤会对一切微服务进行判定。 Zuul还提供了ignored-services属性，进行服务过滤： \\1234zuul.ignored-services: upload-servie\\ 我们这里采用忽略服务： \\12345678zuul: ignored-services:​ \\- upload-service # 忽略upload-service服务\\ 上面的配置采用了集合语法，代表可以配置多个 #### 2.2.4.2.Nginx的rewrite指令 现在，我们修改页面的访问路径： \\1234567891011121314&lt;v-upload​ v-model=\"brand.image\" ​ url=\"/upload/image\" ​ :multiple=\"false\" ​ :pic-width=\"250\" :pic-height=\"90\"​ /&gt;\\ 查看页面的请求路径： 可以看到这个地址不对，依然是去找Zuul网关，因为我们的系统全局配置了URL地址。怎么办？ 有同学会想：修改页面请求地址不就好了。 注意：原则上，我们是不能把除了网关以外的服务对外暴露的，不安全。 既然不能修改页面请求，那么就只能在Nginx反向代理上做文章了。 我们修改nginx配置，将以/api/upload开头的请求拦截下来，转交到真实的服务地址: \\123456789101112location /api/upload &#123;​ proxy_pass http://127.0.0.1:8082;​ proxy_connect_timeout 600;​ proxy_read_timeout 600;&#125;\\ 这样写大家觉得对不对呢？ 显然是不对的，因为ip和端口虽然对了，但是路径没变，依然是：http://127.0.0.1:8002/api/upload/image 前面多了一个/api Nginx提供了rewrite指令，用于对地址进行重写，语法规则： \\1234rewrite &quot;用来匹配路径的正则&quot; 重写后的路径 [指令];\\ 我们的案例： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344​ server &#123;​ listen 80;​ server_name api.leyou.com;​ proxy_set_header X-Forwarded-Host $host;​ proxy_set_header X-Forwarded-Server $host;​ proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;​ \\# 上传路径的映射​ location /api/upload &#123; ​ proxy_pass http://127.0.0.1:8082;​ proxy_connect_timeout 600;​ proxy_read_timeout 600;​ ​ rewrite \"^/api/(.*)$\" /$1 break; ​ &#125;​ ​ location / &#123;​ proxy_pass http://127.0.0.1:10010;​ proxy_connect_timeout 600;​ proxy_read_timeout 600;​ &#125;​ &#125;\\ - 首先，我们映射路径是/api/upload，而下面一个映射路径是 / ，根据最长路径匹配原则，/api/upload优先级更高。也就是说，凡是以/api/upload开头的路径，都会被第一个配置处理 - proxy_pass：反向代理，这次我们代理到8082端口，也就是upload-service服务 - rewrite &quot;^/api/(.*)$&quot; /$1 break，路径重写： - &quot;^/api/(.*)$&quot;：匹配路径的正则表达式，用了分组语法，把/api/以后的所有部分当做1组 - /$1：重写的目标路径，这里用$1引用前面正则表达式匹配到的分组（组编号从1开始），即/api/后面的所有。这样新的路径就是除去/api/以外的所有，就达到了去除/api前缀的目的 - break：指令，常用的有2个，分别是：last、break ​ - last：重写路径结束后，将得到的路径重新进行一次路径匹配 ​ - break：重写路径结束后，不再重新匹配路径。 ​ 我们这里不能选择last，否则以新的路径/upload/image来匹配，就不会被正确的匹配到8082端口了 修改完成，输入nginx -s reload命令重新加载配置。然后再次上传试试。 ### 2.2.5.跨域问题 重启nginx，再次上传，发现报错了： 不过庆幸的是，这个错误已经不是第一次见了，跨域问题。 我们在upload-service中添加一个CorsFilter即可： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344@Configurationpublic class GlobalCorsConfig &#123;​ @Bean​ public CorsFilter corsFilter() &#123;​ //1.添加CORS配置信息​ CorsConfiguration config = new CorsConfiguration();​ //1) 允许的域,不要写*，否则cookie就无法使用了​ config.addAllowedOrigin(\"http://manage.leyou.com\");​ //2) 是否发送Cookie信息​ config.setAllowCredentials(false);​ //3) 允许的请求方式​ config.addAllowedMethod(\"OPTIONS\");​ config.addAllowedMethod(\"POST\");​ config.addAllowedHeader(\"*\");​ //2.添加映射路径，我们拦截一切请求​ UrlBasedCorsConfigurationSource configSource = new UrlBasedCorsConfigurationSource();​ configSource.registerCorsConfiguration(\"/**\", config);​ //3.返回新的CorsFilter.​ return new CorsFilter(configSource);​ &#125;&#125;\\ 再次测试： 不过，非常遗憾的是，访问图片地址，却没有响应。 这是因为我们并没有任何服务器对应image.leyou.com这个域名。。 这个问题，我们暂时放下，回头再来解决。 ### 2.2.6.之前上传的缺陷 先思考一下，之前上传的功能，有没有什么问题？ 上传本身没有任何问题，问题出在保存文件的方式，我们是保存在服务器机器，就会有下面的问题： - 单机器存储，存储能力有限 - 无法进行水平扩展，因为多台机器的文件无法共享,会出现访问不到的情况 - 数据没有备份，有单点故障风险 - 并发能力差 这个时候，最好使用分布式文件存储来代替本地文件存储。 # 3.FastDFS ## 3.1.什么是分布式文件系统 分布式文件系统（Distributed File System）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连。 通俗来讲： - 传统文件系统管理的文件就存储在本机。 - 分布式文件系统管理的文件存储在很多机器，这些机器通过网络连接，要被统一管理。无论是上传或者访问文件，都需要通过管理中心来访问 ## 3.2.什么是FastDFS FastDFS是由淘宝的余庆先生所开发的一个轻量级、高性能的开源分布式文件系统。用纯C语言开发，功能丰富： - 文件存储 - 文件同步 - 文件访问（上传、下载） - 存取负载均衡 - 在线扩容 适合有大容量存储需求的应用或系统。同类的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）等。 ## 3.3.FastDFS的架构 ### 3.3.1.架构图 先上图： FastDFS两个主要的角色：Tracker Server 和 Storage Server 。 - Tracker Server：跟踪服务器，主要负责调度storage节点与client通信，在访问上起负载均衡的作用，和记录storage节点的运行状态，是连接client和storage节点的枢纽。 - Storage Server：存储服务器，保存文件和文件的meta data（元数据），每个storage server会启动一个单独的线程主动向Tracker cluster中每个tracker server报告其状态信息，包括磁盘使用情况，文件同步情况及文件上传下载次数统计等信息 - Group：文件组，多台Storage Server的集群。上传一个文件到同组内的一台机器上后，FastDFS会将该文件即时同步到同组内的其它所有机器上，起到备份的作用。不同组的服务器，保存的数据不同，而且相互独立，不进行通信。 - Tracker Cluster：跟踪服务器的集群，有一组Tracker Server（跟踪服务器）组成。 - Storage Cluster ：存储集群，有多个Group组成。 ### 3.3.2.上传和下载流程 > 上传 \\1. Client通过Tracker server查找可用的Storage server。 \\2. Tracker server向Client返回一台可用的Storage server的IP地址和端口号。 \\3. Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并进行文件上传。 \\4. 上传完成，Storage server返回Client一个文件ID，文件上传结束。 > 下载 \\1. Client通过Tracker server查找要下载文件所在的的Storage server。 \\2. Tracker server向Client返回包含指定文件的某个Storage server的IP地址和端口号。 \\3. Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并指定要下载文件。 \\4. 下载文件成功。 ## 3.4.安装和使用 参考课前资料的：《centos安装FastDFS.md》 ## 3.5.java客户端 余庆先生提供了一个Java客户端，但是作为一个C程序员，写的java代码可想而知。而且已经很久不维护了。 这里推荐一个开源的FastDFS客户端，支持最新的SpringBoot2.0。 配置使用极为简单，支持连接池，支持自动生成缩略图，狂拽酷炫吊炸天啊，有木有。 地址：tobato/FastDFS_client ### 3.5.1.引入依赖 在父工程中，我们已经管理了依赖，版本为： \\1234&lt;fastDFS.client.version&gt;1.26.2&lt;/fastDFS.client.version&gt;\\ 因此，这里我们直接引入坐标即可： \\12345678910&lt;dependency&gt;​ &lt;groupId&gt;com.github.tobato&lt;/groupId&gt;​ &lt;artifactId&gt;fastdfs-client&lt;/artifactId&gt;&lt;/dependency&gt;\\ ### 3.5.2.引入配置类 纯java配置： \\1234567891011121314@Configuration@Import(FdfsClientConfig.class)// 解决jmx重复注册bean的问题@EnableMBeanExport(registration = RegistrationPolicy.IGNORE_EXISTING)public class FastClientImporter &#123;&#125;\\ ### 3.5.3.编写FastDFS属性 \\123456789101112131415161718fdfs: so-timeout: 1501 connect-timeout: 601 thumb-image: # 缩略图​ width: 60​ height: 60 tracker-list: # tracker地址​ \\- 192.168.56.101:22122\\ ### 3.5.4.测试 \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768@RunWith(SpringRunner.class)@SpringBootTest(classes = LyUploadService.class)public class FdfsTest &#123;​ @Autowired​ private FastFileStorageClient storageClient;​ @Autowired​ private ThumbImageConfig thumbImageConfig;​ @Test​ public void testUpload() throws FileNotFoundException &#123;​ File file = new File(\"D:**\\\\**test**\\\\**baby.png\");​ // 上传并且生成缩略图​ StorePath storePath = this.storageClient.uploadFile(​ new FileInputStream(file), file.length(), \"png\", null);​ // 带分组的路径​ System.out.println(storePath.getFullPath());​ // 不带分组的路径​ System.out.println(storePath.getPath());​ &#125;​ @Test​ public void testUploadAndCreateThumb() throws FileNotFoundException &#123;​ File file = new File(\"D:**\\\\**test**\\\\**baby.png\");​ // 上传并且生成缩略图​ StorePath storePath = this.storageClient.uploadImageAndCrtThumbImage(​ new FileInputStream(file), file.length(), \"png\", null);​ // 带分组的路径​ System.out.println(storePath.getFullPath());​ // 不带分组的路径​ System.out.println(storePath.getPath());​ // 获取缩略图路径​ String path = thumbImageConfig.getThumbImagePath(storePath.getPath());​ System.out.println(path);​ &#125;&#125;\\ 结果： \\12345678group1/M00/00/00/wKg4ZVro5eCAZEMVABfYcN8vzII630.pngM00/00/00/wKg4ZVro5eCAZEMVABfYcN8vzII630.pngM00/00/00/wKg4ZVro5eCAZEMVABfYcN8vzII630_60x60.png\\ 访问第一个路径： 访问最后一个路径（缩略图路径），注意加组名： ### 3.5.5.改造上传逻辑 \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172@Servicepublic class UploadService &#123;​ private static final Logger logger = LoggerFactory.getLogger(UploadController.class);​ // 支持的文件类型​ private static final List&lt;String&gt; suffixes = Arrays.asList(\"image/png\", \"image/jpeg\");​ @Autowired​ FastFileStorageClient storageClient;​ public String upload(MultipartFile file) &#123;​ try &#123;​ // 1、图片信息校验​ // 1)校验文件类型​ String type = file.getContentType();​ if (!suffixes.contains(type)) &#123;​ logger.info(\"上传失败，文件类型不匹配：&#123;&#125;\", type);​ return null;​ &#125;​ // 2)校验图片内容​ BufferedImage image = ImageIO.read(file.getInputStream());​ if (image == null) &#123;​ logger.info(\"上传失败，文件内容不符合要求\");​ return null;​ &#125;​ // 2、将图片上传到FastDFS​ // 2.1、获取文件后缀名​ String extension = StringUtils.substringAfterLast(file.getOriginalFilename(), \".\");​ // 2.2、上传​ StorePath storePath = this.storageClient.uploadFile(​ file.getInputStream(), file.getSize(), extension, null);​ // 2.3、返回完整路径​ return \"http://image.leyou.com/\" + storePath.getFullPath();​ &#125; catch (Exception e) &#123;​ return null;​ &#125;​ &#125;&#125;\\ 只需要把原来保存文件的逻辑去掉，然后上传到FastDFS即可。 ### 3.5.6.测试 通过RestClient测试： ## 3.6.页面测试上传 发现上传成功： 不过，当我们访问页面时： 这是因为我们图片是上传到虚拟机的，ip为：192.168.56.101 因此，我们需要将image.leyou.com映射到192.168.56.101 修改我们的hosts： 再次上传： # 4.修改品牌（作业） 修改的难点在于回显。 当我们点击编辑按钮，希望弹出窗口的同时，看到原来的数据： ## 4.1.点击编辑出现弹窗 这个比较简单，修改show属性为true即可实现，我们绑定一个点击事件： \\1234&lt;v-btn color=\"info\" @click=\"editBrand\"&gt;编辑&lt;/v-btn&gt;\\ 然后编写事件，改变show 的状态： 如果仅仅是这样，编辑按钮与新增按钮将没有任何区别，关键在于，如何回显呢？ ## 4.2.回显数据 回显数据，就是把当前点击的品牌数据传递到子组件（MyBrandForm）。而父组件给子组件传递数据，通过props属性。 - 第一步：在编辑时获取当前选中的品牌信息，并且记录到data中 先在data中定义属性，用来接收用来编辑的brand数据： 我们在页面触发编辑事件时，把当前的brand传递给editBrand方法： \\1234&lt;v-btn color=\"info\" @click=\"editBrand(props.item)\"&gt;编辑&lt;/v-btn&gt;\\ 然后在editBrand中接收数据，赋值给oldBrand： \\1234567891011121314 editBrand(oldBrand)&#123;​ // 控制弹窗可见：​ this.show = true;​ // 获取要编辑的brand​ this.oldBrand = oldBrand; &#125;, \\ - 第二步：把获取的brand数据 传递给子组件 \\12345678910 &lt;!--对话框的内容，表单--&gt; &lt;v-card-text class=\"px-5\"&gt;​ &lt;my-brand-form @close=\"closeWindow\" :oldBrand=\"oldBrand\"/&gt; &lt;/v-card-text&gt; \\ - 第三步：在子组件中通过props接收要编辑的brand数据，Vue会自动完成回显 接收数据： 通过watch函数监控oldBrand的变化，把值copy到本地的brand： \\12345678910111213141516171819202122232425262728293031323334353637383940 watch: &#123;​ oldBrand: &#123;// 监控oldBrand的变化​ handler(val) &#123;​ if(val)&#123;​ // 注意不要直接复制，否则这边的修改会影响到父组件的数据，copy属性即可​ this.brand = Object.deepCopy(val)​ &#125;else&#123;​ // 为空，初始化brand​ this.brand = &#123;​ name: '',​ letter: '',​ image: '',​ categories: [],​ &#125;​ &#125;​ &#125;,​ deep: true​ &#125; &#125; \\ - Object.deepCopy 自定义的对对象进行深度复制的方法。 - 需要判断监听到的是否为空，如果为空，应该进行初始化 测试：发现数据回显了，除了商品分类以外： ## 4.3.商品分类回显 为什么商品分类没有回显？ 因为品牌中并没有商品分类数据。我们需要在进入编辑页面之前，查询商品分类信息： ### 4.3.1.后台提供接口 > #### controller \\12345678910111213141516171819202122232425262728/**​ \\* 通过品牌id查询商品分类​ \\* @param bid​ \\* @return​ */@GetMapping(\"bid/&#123;bid&#125;\")public ResponseEntity&lt;List&lt;Category&gt;&gt; queryByBrandId(@PathVariable(\"bid\") Long bid) &#123;​ List&lt;Category&gt; list = this.categoryService.queryByBrandId(bid);​ if (list == null || list.size() &lt; 1) &#123;​ return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(list);&#125;\\ > Service \\12345678public List&lt;Category&gt; queryByBrandId(Long bid) &#123;​ return this.categoryMapper.queryByBrandId(bid);&#125;\\ > mapper 因为需要通过中间表进行子查询，所以这里要手写Sql： \\12345678910111213141516/**​ \\* 根据品牌id查询商品分类​ \\* @param bid​ \\* @return​ */@Select(\"SELECT * FROM tb_category WHERE id IN (SELECT category_id FROM tb_category_brand WHERE brand_id = #&#123;bid&#125;)\")List&lt;Category&gt; queryByBrandId(Long bid);\\ ### 4.3.2.前台查询分类并渲染 我们在编辑页面打开之前，先把数据查询完毕： \\1234567891011121314151617181920212223242526editBrand(oldBrand)&#123;​ // 根据品牌信息查询商品分类​ this.$http.get(\"/item/category/bid/\" + oldBrand.id)​ .then((&#123;data&#125;) =&gt; &#123;​ // 控制弹窗可见：​ this.show = true;​ // 获取要编辑的brand​ this.oldBrand = oldBrand​ // 回显商品分类​ this.oldBrand.categories = data;​ &#125;)&#125;\\ 再次测试：数据成功回显了 ### 4.3.3.新增窗口数据干扰 但是，此时却产生了新问题：新增窗口竟然也有数据？ 原因： 如果之前打开过编辑，那么在父组件中记录的oldBrand会保留。下次再打开窗口，如果是编辑窗口到没问题，但是新增的话，就会再次显示上次打开的品牌信息了。 解决： 新增窗口打开前，把数据置空。 \\1234567891011121314addBrand() &#123;​ // 控制弹窗可见：​ this.show = true;​ // 把oldBrand变为null​ this.oldBrand = null;&#125;\\ ### 4.3.4.提交表单时判断是新增还是修改 新增和修改是同一个页面，我们该如何判断？ 父组件中点击按钮弹出新增或修改的窗口，因此父组件非常清楚接下来是新增还是修改。 因此，最简单的方案就是，在父组件中定义变量，记录新增或修改状态，当弹出页面时，把这个状态也传递给子组件。 第一步：在父组件中记录状态： 第二步：在新增和修改前，更改状态： 第三步：传递给子组件 第四步，子组件接收标记： 标题的动态化： 表单提交动态： axios除了除了get和post外，还有一个通用的请求方式： \\123456789101112131415161718192021222324252627282930// 将数据提交到后台// this.$http.post('/item/brand', this.$qs.stringify(params))this.$http(&#123;​ method: this.isEdit ? 'put' : 'post', // 动态判断是POST还是PUT​ url: '/item/brand',​ data: this.$qs.stringify(this.brand)&#125;).then(() =&gt; &#123;​ // 关闭窗口​ this.$emit(\"close\");​ this.$message.success(\"保存成功！\");&#125;)​ .catch(() =&gt; &#123;​ this.$message.error(\"保存失败！\");&#125;);\\ # 5.删除（作业）","categories":[],"tags":[],"keywords":[]},{"title":"项目day7--商品分类以及品牌管理","slug":"项目day7-商品分类以及品牌管理","date":"2019-05-03T02:57:45.000Z","updated":"2019-05-03T03:13:46.038Z","comments":true,"path":"2019/05/03/项目day7-商品分类以及品牌管理/","link":"","permalink":"https://mr8649.github.io/2019/05/03/项目day7-商品分类以及品牌管理/","excerpt":"","text":"# 0.学习目标 - 使用资料搭建后台系统 - 会使用nginx进行反向代理 - 实现商品分类查询功能 - 掌握cors解决跨域 - 实现品牌查询功能 # 1.使用域名访问本地项目 ## 1.1.统一环境 我们现在访问页面使用的是：http://localhost:9001 有没有什么问题？ 实际开发中，会有不同的环境： - 开发环境：自己的电脑 - 测试环境：提供给测试人员使用的环境 - 预发布环境：数据是和生成环境的数据一致，运行最新的项目代码进去测试 - 生产环境：项目最终发布上线的环境 如果不同环境使用不同的ip去访问，可能会出现一些问题。为了保证所有环境的一致，我们会在各种环境下都使用域名来访问。 我们将使用以下域名： - 主域名是：www.leyou.com， - 管理系统域名：manage.leyou.com - 网关域名：api.leyou.com - … 但是最终，我们希望这些域名指向的还是我们本机的某个端口。 那么，当我们在浏览器输入一个域名时，浏览器是如何找到对应服务的ip和端口的呢？ ## 1.2.域名解析 一个域名一定会被解析为一个或多个ip。这一般会包含两步： - 本地域名解析 浏览器会首先在本机的hosts文件中查找域名映射的IP地址，如果查找到就返回IP ，没找到则进行域名服务器解析，一般本地解析都会失败，因为默认这个文件是空的。 - Windows下的hosts文件地址：C:/Windows/System32/drivers/etc/hosts - Linux下的hosts文件所在路径： /etc/hosts 样式： \\12345678910\\# My hosts127.0.0.1 localhost0.0.0.0 account.jetbrains.com127.0.0.1 www.xmind.net\\ - 域名服务器解析 本地解析失败，才会进行域名服务器解析，域名服务器就是网络中的一台计算机，里面记录了所有注册备案的域名和ip映射关系，一般只要域名是正确的，并且备案通过，一定能找到。 ## 1.3.解决域名解析问题 我们不可能去购买一个域名，因此我们可以伪造本地的hosts文件，实现对域名的解析。修改本地的host为： \\123456127.0.0.1 api.leyou.com127.0.0.1 manage.leyou.com\\ 这样就实现了域名的关系映射了。 每次在C盘寻找hosts文件并修改是非常麻烦的，给大家推荐一个快捷修改host的工具，在课前资料中可以找到： 效果： 我们添加了两个映射关系： - 127.0.0.1 api.leyou.com ：我们的网关Zuul - 127.0.0.1 manage.leyou.com：我们的后台系统地址 现在，ping一下域名试试是否畅通： OK！ ## 1.4.nginx解决端口问题 虽然域名解决了，但是现在如果我们要访问，还得自己加上端口：http://manage.taotao.com:9001。 这就不够优雅了。我们希望的是直接域名访问：http://manage.taotao.com。这种情况下端口默认是80，如何才能把请求转移到9001端口呢？ 这里就要用到反向代理工具：Nginx ### 1.4.1.什么是Nginx NIO：not-blocking-io 非阻塞IO BIO：blocking-IO 阻塞IO nginx可以作为web服务器，但更多的时候，我们把它作为网关，因为它具备网关必备的功能： - 反向代理 - 负载均衡 - 动态路由 - 请求过滤 ### 1.4.2.nginx作为web服务器 Web服务器分2类： - web应用服务器，如： - tomcat - resin - jetty - web服务器，如： - Apache 服务器 - Nginx - IIS 区分：web服务器不能解析jsp等页面，只能处理js、css、html等静态资源。 并发：web服务器的并发能力远高于web应用服务器。 Nginx + tomcat ### 1.4.3.nginx作为反向代理 什么是反向代理？ - 代理：通过客户机的配置，实现让一台服务器代理客户机，客户的所有请求都交给代理服务器处理。 - 反向代理：用一台服务器，代理真实服务器，用户访问时，不再是访问真实服务器，而是代理服务器。 nginx可以当做反向代理服务器来使用： - 我们需要提前在nginx中配置好反向代理的规则，不同的请求，交给不同的真实服务器处理 - 当请求到达nginx，nginx会根据已经定义的规则进行请求的转发，从而实现路由功能 利用反向代理，就可以解决我们前面所说的端口问题，如图 ### 1.4.4.安装和使用 > ### 安装 安装非常简单，把课前资料提供的nginx直接解压即可，绿色免安装，舒服！ 我们在本地安装一台nginx： 目录结构： > ### 使用 nginx可以通过命令行来启动，操作命令： - 启动：start nginx.exe - 停止：nginx.exe -s stop - 重新加载：nginx.exe -s reload > ### 反向代理配置 示例： nginx中的每个server就是一个反向代理配置，可以有多个server 完整配置： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576\\#user nobody;worker_processes 1;events &#123;​ worker_connections 1024;&#125;http &#123;​ include mime.types;​ default_type application/octet-stream;​ sendfile on; ​ keepalive_timeout 65;​ gzip on; server &#123;​ listen 80;​ server_name manage.leyou.com;​ proxy_set_header X-Forwarded-Host $host;​ proxy_set_header X-Forwarded-Server $host;​ proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;​ location / &#123;​ proxy_pass http://127.0.0.1:9001;​ proxy_connect_timeout 600;​ proxy_read_timeout 600;​ &#125;​ &#125; server &#123;​ listen 80;​ server_name api.leyou.com;​ proxy_set_header X-Forwarded-Host $host;​ proxy_set_header X-Forwarded-Server $host;​ proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;​ location / &#123;​ proxy_pass http://127.0.0.1:10010;​ proxy_connect_timeout 600;​ proxy_read_timeout 600;​ &#125;​ &#125;&#125;\\ ## 1.5.测试 启动nginx，然后用域名访问后台管理系统： 现在实现了域名访问网站了，中间的流程是怎样的呢？ \\1. 浏览器准备发起请求，访问http://mamage.leyou.com，但需要进行域名解析 \\2. 优先进行本地域名解析，因为我们修改了hosts，所以解析成功，得到地址：127.0.0.1 \\3. 请求被发往解析得到的ip，并且默认使用80端口：http://127.0.0.1:80 本机的nginx一直监听80端口，因此捕获这个请求 \\4. nginx中配置了反向代理规则，将manage.leyou.com代理到127.0.0.1:9001，因此请求被转发 \\5. 后台系统的webpack server监听的端口是9001，得到请求并处理，完成后将响应返回到nginx \\6. nginx将得到的结果返回到浏览器 # 2.实现商品分类查询 商城的核心自然是商品，而商品多了以后，肯定要进行分类，并且不同的商品会有不同的品牌信息，其关系如图所示： - 一个商品分类下有很多商品 - 一个商品分类下有很多品牌 - 而一个品牌，可能属于不同的分类 - 一个品牌下也会有很多商品 因此，我们需要依次去完成：商品分类、品牌、商品的开发。 ## 2.1.导入数据 首先导入课前资料提供的sql： 我们先看商品分类表： \\1234567891011121314151617181920CREATE TABLE `tb_category` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;类目id&apos;, `name` varchar(20) NOT NULL COMMENT &apos;类目名称&apos;, `parent_id` bigint(20) NOT NULL COMMENT &apos;父类目id,顶级类目填0&apos;, `is_parent` tinyint(1) NOT NULL COMMENT &apos;是否为父节点，0为否，1为是&apos;, `sort` int(4) NOT NULL COMMENT &apos;排序指数，越小越靠前&apos;, PRIMARY KEY (`id`), KEY `key_parent_id` (`parent_id`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=1424 DEFAULT CHARSET=utf8 COMMENT=&apos;商品类目表，类目和商品(spu)是一对多关系，类目与品牌是多对多关系&apos;;\\ 因为商品分类会有层级关系，因此这里我们加入了parent_id字段，对本表中的其它分类进行自关联。 ## 2.2.页面实现 ### 2.2.1.页面分析 首先我们看下要实现的效果： 商品分类之间是会有层级关系的，采用树结构去展示是最直观的方式。 一起来看页面，对应的是/pages/item/Category.vue： 页面模板： \\1234567891011121314151617181920212223242526&lt;v-card&gt;​ &lt;v-flex xs12 sm10&gt;​ &lt;v-tree url=\"/item/category/list\"​ :treeData=\"treeData\"​ :isEdit=\"isEdit\"​ @handleAdd=\"handleAdd\"​ @handleEdit=\"handleEdit\"​ @handleDelete=\"handleDelete\"​ @handleClick=\"handleClick\"​ /&gt;​ &lt;/v-flex&gt;&lt;/v-card&gt;\\ - v-card：卡片，是vuetify中提供的组件，提供一个悬浮效果的面板，一般用来展示一组数据。 - v-flex：布局容器，用来控制响应式布局。与BootStrap的栅格系统类似，整个屏幕被分为12格。我们可以控制所占的格数来控制宽度： 本例中，我们用sm10控制在小屏幕及以上时，显示宽度为10格 - v-tree：树组件。Vuetify并没有提供树组件，这个是我们自己编写的自定义组件： 里面涉及一些vue的高级用法，大家暂时不要关注其源码，会用即可。 ### 2.2.2.树组件的用法 也可参考课前资料中的：《自定义Vue组件的用法.md》 这里我贴出树组件的用法指南。 > 属性列表： | 属性名称 | 说明 | 数据类型 | 默认值 | | :——- | :——————————- | :——- | :—– | | url | 用来加载数据的地址，即延迟加载 | String | - | | isEdit | 是否开启树的编辑功能 | boolean | false | | treeData | 整颗树数据，这样就不用远程加载了 | Array | - | 这里推荐使用url进行延迟加载，每当点击父节点时，就会发起请求，根据父节点id查询子节点信息。 当有treeData属性时，就不会触发url加载 远程请求返回的结果格式： \\12345678910111213141516171819202122232425262728293031323334[​ &#123; ​ \"id\": 74,​ \"name\": \"手机\",​ \"parentId\": 0,​ \"isParent\": true,​ \"sort\": 2 &#125;,​ &#123; ​ \"id\": 75,​ \"name\": \"家用电器\",​ \"parentId\": 0,​ \"isParent\": true,​ \"sort\": 3 &#125;]\\ > 事件： | 事件名称 | 说明 | 回调参数 | | :———– | :—————————————– | :———————————————– | | handleAdd | 新增节点时触发，isEdit为true时有效 | 新增节点node对象，包含属性：name、parentId和sort | | handleEdit | 当某个节点被编辑后触发，isEdit为true时有效 | 被编辑节点的id和name | | handleDelete | 当删除节点时触发，isEdit为true时有效 | 被删除节点的id | | handleClick | 点击某节点时触发 | 被点击节点的node对象,包含全部信息 | > 完整node的信息 回调函数中返回完整的node节点会包含以下数据： \\123456789101112131415161718&#123;​ \"id\": 76, // 节点id​ \"name\": \"手机\", // 节点名称​ \"parentId\": 75, // 父节点id​ \"isParent\": false, // 是否是父节点​ \"sort\": 1, // 顺序​ \"path\": [\"手机\", \"手机通讯\", \"手机\"] // 所有父节点的名称数组&#125;\\ ## 2.3.实现功能 ### 2.3.1.url异步请求 给大家的页面中，treeData是假数据，我们删除数据treeData属性，只保留url看看会发生什么： \\12345678910111213141516&lt;v-tree url=\"/item/category/list\"​ :isEdit=\"isEdit\"​ @handleAdd=\"handleAdd\"​ @handleEdit=\"handleEdit\"​ @handleDelete=\"handleDelete\"​ @handleClick=\"handleClick\"​ /&gt;\\ 刷新页面，可以看到： 页面中的树没有了，并且发起了一条请求：http://localhost/api/item/category/list?pid=0 大家可能会觉得很奇怪，我们明明是使用的相对路径，讲道理发起的请求地址应该是： http://manage.leyou.com/item/category/list 但实际却是： http://localhost/api/item/category/list?pid=0 这是因为，我们有一个全局的配置文件，对所有的请求路径进行了约定： 路径是localhost，并且默认加上了/api的前缀，这恰好与我们的网关设置匹配，我们只需要把地址改成网关的地址即可,因为我们使用了nginx反向代理，这里可以写域名： 再次查看页面，发现地址已经变成了正确的地址了： 接下来，我们要做的事情就是编写后台接口，返回对应的数据即可。 ### 2.3.2.实体类 在ly-item-interface中添加category实体类： \\1234567891011121314151617181920212223242526@Table(name=\"tb_category\")public class Category &#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private Long id; private String name; private Long parentId; private Boolean isParent; private Integer sort; // getter和setter略​ // 注意isParent的get和set方法&#125;\\ 需要注意的是，这里要用到jpa的注解，因此我们在ly-item-iterface中添加jpa依赖 \\123456789101112&lt;dependency&gt;​ &lt;groupId&gt;javax.persistence&lt;/groupId&gt;​ &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;​ &lt;version&gt;1.0&lt;/version&gt;&lt;/dependency&gt;\\ 结构： ### 2.3.3.controller 编写一个controller一般需要知道四个内容： - 请求方式：决定我们用GetMapping还是PostMapping - 请求路径：决定映射路径 - 请求参数：决定方法的参数 - 返回值结果：决定方法的返回值 在刚才页面发起的请求中，我们就能得到绝大多数信息： - 请求方式：Get - 请求路径：/api/item/category/list。其中/api是网关前缀，/item是网关的路由映射，真实的路径应该是/category/list - 请求参数：pid=0，根据tree组件的说明，应该是父节点的id，第一次查询为0，那就是查询一级类目 - 返回结果：？？ 根据前面tree组件的用法我们知道，返回的应该是json数组： \\12345678910111213141516171819202122232425262728293031323334 [​ &#123; ​ \"id\": 74,​ \"name\": \"手机\",​ \"parentId\": 0,​ \"isParent\": true,​ \"sort\": 2​ &#125;,​ &#123; ​ \"id\": 75,​ \"name\": \"家用电器\",​ \"parentId\": 0,​ \"isParent\": true,​ \"sort\": 3​ &#125; ] \\ 对应的java类型可以是List集合，里面的元素就是类目对象了。 controller代码： \\123456789101112131415161718192021222324252627282930313233343536373839404142@RestController@RequestMapping(\"category\")public class CategoryController &#123;​ @Autowired​ private CategoryService categoryService;​ /**​ \\* 根据父节点查询商品类目​ \\* @param pid​ \\* @return​ */​ @GetMapping(\"list\")​ public ResponseEntity&lt;List&lt;Category&gt;&gt; queryByParentId(​ @RequestParam(value = \"pid\", defaultValue = \"0\") Long pid) &#123;​ List&lt;Category&gt; list = this.categoryService.queryListByParent(pid);​ if (list == null || list.size() &lt; 1) &#123;​ return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(list);​ &#125;&#125;\\ ### 2.3.4.service 一般service层我们会定义接口和实现类，不过这里我们就偷懒一下，直接写实现类了： \\12345678910111213141516171819202122@Servicepublic class CategoryService &#123;​ @Autowired​ private CategoryMapper categoryMapper;​ public List&lt;Category&gt; queryListByParent(Long pid) &#123;​ Category category = new Category();​ category.setParentId(pid);​ return this.categoryMapper.select(category);​ &#125;&#125;\\ ### 2.3.5.mapper 我们使用通用mapper来简化开发： \\123456public interface CategoryMapper extends Mapper&lt;Category&gt; &#123;&#125;\\ 要注意，我们并没有在mapper接口上声明@Mapper注解，那么mybatis如何才能找到接口呢？ 我们在启动类上添加一个扫描包功能： \\123456789101112131415161718@SpringBootApplication@EnableDiscoveryClient@MapperScan(\"com.leyou.item.mapper\") // 扫描mapper包public class LyItemService &#123;​ public static void main(String[] args) &#123;​ SpringApplication.run(LyItemService.class, args);​ &#125;&#125;\\ 项目结构： ### 2.3.6.启动并测试 我们不经过网关，直接访问： 然后试试网关是否畅通： 一切OK！ 然后刷新页面查看： 发现报错了！ 浏览器直接访问没事，但是这里却报错，什么原因？ ## 2.4.跨域问题 ### 2.4.1.什么是跨域 跨域是指跨域名的访问，以下情况都属于跨域： | 跨域原因说明 | 示例 | | —————— | ————————————– | | 域名不同 | www.jd.com 与 www.taobao.com | | 域名相同，端口不同 | www.jd.com:8080 与 www.jd.com:8081 | | 二级域名不同 | item.jd.com 与 miaosha.jd.com | 如果域名和端口都相同，但是请求路径不同，不属于跨域，如： 12www.jd.com/itemwww.jd.com/goods 而我们刚才是从manage.leyou.com去访问api.leyou.com，这属于二级域名不同，跨域了。 ### 2.4.2.为什么有跨域问题？ 跨域不一定会有跨域问题。 因为跨域问题是浏览器对于ajax请求的一种安全限制：一个页面发起的ajax请求，只能是于当前页同域名的路径，这能有效的阻止跨站攻击。 因此：跨域问题 是针对ajax的一种限制。 但是这却给我们的开发带来了不变，而且在实际生成环境中，肯定会有很多台服务器之间交互，地址和端口都可能不同，怎么办？ ### 2.4.3.解决跨域问题的方案 目前比较常用的跨域解决方案有3种： - Jsonp 最早的解决方案，利用script标签可以跨域的原理实现。 限制： - 需要服务的支持 - 只能发起GET请求 - nginx反向代理 思路是：利用nginx反向代理把跨域为不跨域，支持各种请求方式 缺点：需要在nginx进行额外配置，语义不清晰 - CORS 规范化的跨域请求解决方案，安全可靠。 优势： - 在服务端进行控制是否允许跨域，可自定义规则 - 支持各种请求方式 缺点： - 会产生额外的请求 我们这里会采用cors的跨域方案。 ## 2.5.cors解决跨域 ### 2.5.1.什么是cors CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。 它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。 CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。 - 浏览器端： 目前，所有浏览器都支持该功能（IE10以下不行）。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。 - 服务端： CORS通信与AJAX没有任何差别，因此你不需要改变以前的业务逻辑。只不过，浏览器会在请求中携带一些头信息，我们需要以此判断是否运行其跨域，然后在响应头中加入一些信息即可。这一般通过过滤器完成即可。 ### 2.5.2.原理有点复杂 浏览器会将ajax请求分为两类，其处理方案略有差异：简单请求、特殊请求。 #### 简单请求 只要同时满足以下两大条件，就属于简单请求。： （1) 请求方法是以下三种方法之一： - HEAD - GET - POST （2）HTTP的头信息不超出以下几种字段： - Accept - Accept-Language - Content-Language - Last-Event-ID - Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain 当浏览器发现发现的ajax请求是简单请求时，会在请求头中携带一个字段：Origin. Origin中会指出当前请求属于哪个域（协议+域名+端口）。服务会根据这个值决定是否允许其跨域。 如果服务器允许跨域，需要在返回的响应头中携带下面信息： \\12345678Access-Control-Allow-Origin: http://manage.leyou.comAccess-Control-Allow-Credentials: trueContent-Type: text/html; charset=utf-8\\ - Access-Control-Allow-Origin：可接受的域，是一个具体域名或者*，代表任意 - Access-Control-Allow-Credentials：是否允许携带cookie，默认情况下，cors不会携带cookie，除非这个值是true 注意： 如果跨域请求要想操作cookie，需要满足3个条件： - 服务的响应头中需要携带Access-Control-Allow-Credentials并且为true。 - 浏览器发起ajax需要指定withCredentials 为true - 响应头中的Access-Control-Allow-Origin一定不能为*，必须是指定的域名 #### 特殊请求 不符合简单请求的条件，会被浏览器判定为特殊请求,，例如请求方式为PUT。 > 预检请求 特殊请求会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。 浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。 一个“预检”请求的样板： \\123456789101112131415161718OPTIONS /cors HTTP/1.1Origin: http://manage.leyou.comAccess-Control-Request-Method: PUTAccess-Control-Request-Headers: X-Custom-HeaderHost: api.leyou.comAccept-Language: en-USConnection: keep-aliveUser-Agent: Mozilla/5.0...\\ 与简单请求相比，除了Origin以外，多了两个头： - Access-Control-Request-Method：接下来会用到的请求方式，比如PUT - Access-Control-Request-Headers：会额外用到的头信息 > 预检请求的响应 服务的收到预检请求，如果许可跨域，会发出响应： \\123456789101112131415161718192021222324252627282930HTTP/1.1 200 OKDate: Mon, 01 Dec 2008 01:15:39 GMTServer: Apache/2.0.61 (Unix)Access-Control-Allow-Origin: http://manage.leyou.comAccess-Control-Allow-Credentials: trueAccess-Control-Allow-Methods: GET, POST, PUTAccess-Control-Allow-Headers: X-Custom-HeaderAccess-Control-Max-Age: 1728000Content-Type: text/html; charset=utf-8Content-Encoding: gzipContent-Length: 0Keep-Alive: timeout=2, max=100Connection: Keep-AliveContent-Type: text/plain\\ 除了Access-Control-Allow-Origin和Access-Control-Allow-Credentials以外，这里又额外多出3个头： - Access-Control-Allow-Methods：允许访问的方式 - Access-Control-Allow-Headers：允许携带的头 - Access-Control-Max-Age：本次许可的有效时长，单位是秒，过期之前的ajax请求就无需再次进行预检了 如果浏览器得到上述响应，则认定为可以跨域，后续就跟简单请求的处理是一样的了。 ### 2.5.3.实现非常简单 虽然原理比较复杂，但是前面说过： - 浏览器端都有浏览器自动完成，我们无需操心 - 服务端可以通过拦截器统一实现，不必每次都去进行跨域判定的编写。 事实上，SpringMVC已经帮我们写好了CORS的跨域过滤器：CorsFilter ,内部已经实现了刚才所讲的判定逻辑，我们直接用就好了。 在ly-api-gateway中编写一个配置类，并且注册CorsFilter： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import org.springframework.web.filter.CorsFilter;@Configurationpublic class GlobalCorsConfig &#123;​ @Bean​ public CorsFilter corsFilter() &#123;​ //1.添加CORS配置信息​ CorsConfiguration config = new CorsConfiguration();​ //1) 允许的域,不要写*，否则cookie就无法使用了​ config.addAllowedOrigin(\"http://manage.leyou.com\");​ //2) 是否发送Cookie信息​ config.setAllowCredentials(true);​ //3) 允许的请求方式​ config.addAllowedMethod(\"OPTIONS\");​ config.addAllowedMethod(\"HEAD\");​ config.addAllowedMethod(\"GET\");​ config.addAllowedMethod(\"PUT\");​ config.addAllowedMethod(\"POST\");​ config.addAllowedMethod(\"DELETE\");​ config.addAllowedMethod(\"PATCH\");​ // 4）允许的头信息​ config.addAllowedHeader(\"*\");​ //2.添加映射路径，我们拦截一切请求​ UrlBasedCorsConfigurationSource configSource = new UrlBasedCorsConfigurationSource();​ configSource.registerCorsConfiguration(\"/**\", config);​ //3.返回新的CorsFilter.​ return new CorsFilter(configSource);​ &#125;&#125;\\ 结构： 4.5.4.重启测试： 访问正常： 页面也OK了： 分类的增删改功能暂时就不做了，页面已经预留好了事件接口，有兴趣的同学可以完成一下。 # 3.品牌的查询 商品分类完成以后，自然轮到了品牌功能了。 先看看我们要实现的效果： 接下来，我们从0开始，实现下从前端到后端的完整开发。 ## 3.1.从0开始 为了方便看到效果，我们新建一个MyBrand.vue（注意先停掉服务器），从0开始搭建。 内容初始化一下： \\1234567891011121314151617181920212223242526&lt;template&gt; &lt;span&gt;​ hello &lt;/span&gt;&lt;/template&gt;&lt;script&gt;​ export default &#123;​ name: &quot;my-brand&quot;​ &#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;\\ 改变router新的index.js，将路由地址指向MyBrand.vue 打开服务器，再次查看页面： 干干净净了。 ## 3.2.品牌查询页面 ### 3.2.1.data-tables组件 大家看到这个原型页面肯定能看出，其主体就是一个table。我们去Vuetify查看有关table的文档： 仔细阅读，发现v-data-table中有以下核心属性： - dark：是否使用黑暗色彩主题，默认是false - expand：表格的行是否可以展开，默认是false - headers：定义表头的数组，数组的每个元素就是一个表头信息对象，结构： \\123456789101112131415161718 &#123;​ text: string, // 表头的显示文本​ value: string, // 表头对应的每行数据的key​ align: 'left' | 'center' | 'right', // 位置​ sortable: boolean, // 是否可排序​ class: string[] | string,// 样式​ width: string,// 宽度 &#125; \\ - items：表格的数据的数组，数组的每个元素是一行数据的对象，对象的key要与表头的value一致 - loading：是否显示加载数据的进度条，默认是false - no-data-text：当没有查询到数据时显示的提示信息，string类型，无默认值 - pagination.sync：包含分页和排序信息的对象，将其与vue实例中的属性关联，表格的分页或排序按钮被触发时，会自动将最新的分页和排序信息更新。对象结构： \\1234567891011121314 &#123;​ page: 1, // 当前页​ rowsPerPage: 5, // 每页大小​ sortBy: '', // 排序字段​ descending:false, // 是否降序 &#125; \\ - total-items：分页的总条数信息，number类型，无默认值 - select-all ：是否显示每一行的复选框，Boolean类型，无默认值 - value：当表格可选的时候，返回选中的行 我们向下翻，找找有没有看起来牛逼的案例。 找到这样一条： 其它的案例都是由Vuetify帮我们对查询到的当前页数据进行排序和分页，这显然不是我们想要的。我们希望能在服务端完成对整体品牌数据的排序和分页，而这个案例恰好合适。 点击按钮，我们直接查看源码，然后直接复制到MyBrand.vue中 模板： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;template&gt; &lt;div&gt;​ &lt;v-data-table​ :headers=&quot;headers&quot;​ :items=&quot;desserts&quot;​ :search=&quot;search&quot;​ :pagination.sync=&quot;pagination&quot;​ :total-items=&quot;totalDesserts&quot;​ :loading=&quot;loading&quot;​ class=&quot;elevation-1&quot;​ \\&gt;​ &lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;​ &lt;td&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.calories &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.fat &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.carbs &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.protein &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.iron &#125;&#125;&lt;/td&gt;​ &lt;/template&gt;​ &lt;/v-data-table&gt; &lt;/div&gt;&lt;/template&gt;\\ ### 3.2.2.分析 接下来，就分析一下案例中每一部分是什么意思，搞清楚了，我们也可以自己玩了。 先看模板中table上的一些属性： \\12345678910111213141516171819202122&lt;v-data-table​ :headers=&quot;headers&quot;​ :items=&quot;desserts&quot;​ :search=&quot;search&quot;​ :pagination.sync=&quot;pagination&quot;​ :total-items=&quot;totalDesserts&quot;​ :loading=&quot;loading&quot;​ class=&quot;elevation-1&quot;​ \\&gt;&lt;/v-data-table&gt;\\ - headers：表头信息，是一个数组 - items：要在表格中展示的数据，数组结构，每一个元素是一行 - search：搜索过滤字段，用不到，暂时不管 - pagination.sync：分页信息，包含了当前页，每页大小，排序字段，排序方式等。加上.sync代表服务端排序，当用户点击分页条时，该对象的值会跟着变化。监控这个值，并在这个值变化时去服务端查询，即可实现页面数据动态加载了。 - total-items：总条数 - loading：boolean类型，true：代表数据正在加载，会有进度条。false：数据加载完毕。 另外，在v-data-tables中，我们还看到另一段代码： \\123456789101112131415161718&lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;​ &lt;td&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.calories &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.fat &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.carbs &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.protein &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.iron &#125;&#125;&lt;/td&gt;&lt;/template&gt;\\ 这段就是在渲染每一行的数据。Vue会自动遍历上面传递的items属性，并把得到的对象传递给这段template中的props.item属性。我们从中得到数据，渲染在页面即可。 我们需要做的事情，主要有两件： - 给items和totalItems赋值 - 当pagination变化时，重新获取数据，再次给items和totalItems赋值 ### 3.2.3.初步实现 我们先弄点假品牌数据： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566[ &#123;​ \"id\": 2032,​ \"name\": \"OPPO\",​ \"image\": \"http://img10.360buyimg.com/popshop/jfs/t2119/133/2264148064/4303/b8ab3755/56b2f385N8e4eb051.jpg\",​ \"letter\": \"O\" &#125;, &#123;​ \"id\": 2033,​ \"name\": \"飞利浦（PHILIPS）\",​ \"image\": \"http://img12.360buyimg.com/popshop/jfs/t18361/122/1318410299/1870/36fe70c9/5ac43a4dNa44a0ce0.jpg\",​ \"letter\": \"F\" &#125;, &#123;​ \"id\": 2034,​ \"name\": \"华为（HUAWEI）\",​ \"image\": \"http://img10.360buyimg.com/popshop/jfs/t5662/36/8888655583/7806/1c629c01/598033b4Nd6055897.jpg\",​ \"letter\": \"H\" &#125;, &#123;​ \"id\": 2036,​ \"name\": \"酷派（Coolpad）\",​ \"image\": \"http://img10.360buyimg.com/popshop/jfs/t2521/347/883897149/3732/91c917ec/5670cf96Ncffa2ae6.jpg\",​ \"letter\": \"K\" &#125;, &#123;​ \"id\": 2037,​ \"name\": \"魅族（MEIZU）\",​ \"image\": \"http://img13.360buyimg.com/popshop/jfs/t3511/131/31887105/4943/48f83fa9/57fdf4b8N6e95624d.jpg\",​ \"letter\": \"M\" &#125;]\\ 品牌中有id,name,image,letter字段。 #### 修改模板 \\1234567891011121314151617181920212223242526272829303132333435363738394041424344 &lt;div&gt;​ &lt;v-data-table​ :headers=&quot;headers&quot;​ :items=&quot;brands&quot;​ :search=&quot;search&quot;​ :pagination.sync=&quot;pagination&quot;​ :total-items=&quot;totalBrands&quot;​ :loading=&quot;loading&quot;​ class=&quot;elevation-1&quot;​ \\&gt;​ &lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;​ &lt;td&gt;&#123;&#123; props.item.id &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;​ &lt;img v-if=&quot;props.item.image&quot; :src=&quot;props.item.image&quot; width=&quot;130&quot; height=&quot;40&quot;&gt;​ &lt;span v-else&gt;无&lt;/span&gt;​ &lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.letter &#125;&#125;&lt;/td&gt;​ &lt;/template&gt;​ &lt;/v-data-table&gt; &lt;/div&gt;\\ 我们修改了以下部分： - items：指向一个brands变量，等下在js代码中定义 - total-items：指向了totalBrands变量，等下在js代码中定义 - template模板中，渲染了四个字段： - id： - name - image，注意，我们不是以文本渲染，而是赋值到一个img标签的src属性中，并且做了非空判断 - letter #### 编写数据 接下来编写要用到的数据： \\123456789101112131415161718192021222324252627282930313233343536&#123; data() &#123;​ return &#123;​ search: '', // 搜索过滤字段​ totalBrands: 0, // 总条数​ brands: [], // 当前页品牌数据​ loading: true, // 是否在加载中​ pagination: &#123;&#125;, // 分页信息​ headers: [ // 头信息​ &#123;text: 'id', align: 'center', value: 'id'&#125;,​ &#123;text: '名称', align: 'center', sortable: false, value: 'name'&#125;,​ &#123;text: 'LOGO', align: 'center', sortable: false, value: 'image'&#125;,​ &#123;text: '首字母', align: 'center', value: 'letter', sortable: true,&#125;​ ]​ &#125; &#125;&#125;\\ #### 编写函数，初始化数据 接下来就是对brands和totalBrands完成赋值动作了。 我们编写一个函数来完成赋值，提高复用性： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102methods:&#123;​ getDataFromServer()&#123; // 从服务的加载数据的方法。​ // 伪造假数据​ const brands = [​ &#123;​ \"id\": 2032,​ \"name\": \"OPPO\",​ \"image\": \"http://img10.360buyimg.com/popshop/jfs/t2119/133/2264148064/4303/b8ab3755/56b2f385N8e4eb051.jpg\",​ \"letter\": \"O\",​ \"categories\": null​ &#125;,​ &#123;​ \"id\": 2033,​ \"name\": \"飞利浦（PHILIPS）\",​ \"image\": \"http://img12.360buyimg.com/popshop/jfs/t18361/122/1318410299/1870/36fe70c9/5ac43a4dNa44a0ce0.jpg\",​ \"letter\": \"F\",​ \"categories\": null​ &#125;,​ &#123;​ \"id\": 2034,​ \"name\": \"华为（HUAWEI）\",​ \"image\": \"http://img10.360buyimg.com/popshop/jfs/t5662/36/8888655583/7806/1c629c01/598033b4Nd6055897.jpg\",​ \"letter\": \"H\",​ \"categories\": null​ &#125;,​ &#123;​ \"id\": 2036,​ \"name\": \"酷派（Coolpad）\",​ \"image\": \"http://img10.360buyimg.com/popshop/jfs/t2521/347/883897149/3732/91c917ec/5670cf96Ncffa2ae6.jpg\",​ \"letter\": \"K\",​ \"categories\": null​ &#125;,​ &#123;​ \"id\": 2037,​ \"name\": \"魅族（MEIZU）\",​ \"image\": \"http://img13.360buyimg.com/popshop/jfs/t3511/131/31887105/4943/48f83fa9/57fdf4b8N6e95624d.jpg\",​ \"letter\": \"M\",​ \"categories\": null​ &#125;​ ];​ // 模拟延迟一段时间，随后进行赋值​ setTimeout(() =&gt; &#123;​ // 然后赋值给brands​ this.brands = brands;​ this.totalBrands = brands.length;​ // 完成赋值后，把加载状态赋值为false​ this.loading = false;​ &#125;,400)​ &#125;&#125;\\ 然后使用钩子函数，在Vue实例初始化完毕后调用这个方法，这里使用mounted（渲染后）函数： \\12345678910mounted()&#123; // 渲染后执行​ // 查询数据​ this.getDataFromServer();&#125;\\ #### 完整代码 \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194&lt;template&gt; &lt;div&gt;​ &lt;v-data-table​ :headers=&quot;headers&quot;​ :items=&quot;brands&quot;​ :search=&quot;search&quot;​ :pagination.sync=&quot;pagination&quot;​ :total-items=&quot;totalBrands&quot;​ :loading=&quot;loading&quot;​ class=&quot;elevation-1&quot;​ \\&gt;​ &lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;​ &lt;td&gt;&#123;&#123; props.item.id &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&lt;img :src=&quot;props.item.image&quot;&gt;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.letter &#125;&#125;&lt;/td&gt;​ &lt;/template&gt;​ &lt;/v-data-table&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123;​ name: &quot;my-brand&quot;,​ data() &#123;​ return &#123;​ search: &apos;&apos;, // 搜索过滤字段​ totalBrands: 0, // 总条数​ brands: [], // 当前页品牌数据​ loading: true, // 是否在加载中​ pagination: &#123;&#125;, // 分页信息​ headers: [​ &#123;text: &apos;id&apos;, align: &apos;center&apos;, value: &apos;id&apos;&#125;,​ &#123;text: &apos;名称&apos;, align: &apos;center&apos;, sortable: false, value: &apos;name&apos;&#125;,​ &#123;text: &apos;LOGO&apos;, align: &apos;center&apos;, sortable: false, value: &apos;image&apos;&#125;,​ &#123;text: &apos;首字母&apos;, align: &apos;center&apos;, value: &apos;letter&apos;, sortable: true,&#125;​ ]​ &#125;​ &#125;,​ mounted()&#123; // 渲染后执行​ // 查询数据​ this.getDataFromServer();​ &#125;,​ methods:&#123;​ getDataFromServer()&#123; // 从服务的加载数的方法。​ // 伪造假数据​ const brands = [​ &#123;​ &quot;id&quot;: 2032,​ &quot;name&quot;: &quot;OPPO&quot;,​ &quot;image&quot;: &quot;http://img10.360buyimg.com/popshop/jfs/t2119/133/2264148064/4303/b8ab3755/56b2f385N8e4eb051.jpg&quot;,​ &quot;letter&quot;: &quot;O&quot;,​ &quot;categories&quot;: null​ &#125;,​ &#123;​ &quot;id&quot;: 2033,​ &quot;name&quot;: &quot;飞利浦（PHILIPS）&quot;,​ &quot;image&quot;: &quot;http://img12.360buyimg.com/popshop/jfs/t18361/122/1318410299/1870/36fe70c9/5ac43a4dNa44a0ce0.jpg&quot;,​ &quot;letter&quot;: &quot;F&quot;,​ &quot;categories&quot;: null​ &#125;,​ &#123;​ &quot;id&quot;: 2034,​ &quot;name&quot;: &quot;华为（HUAWEI）&quot;,​ &quot;image&quot;: &quot;http://img10.360buyimg.com/popshop/jfs/t5662/36/8888655583/7806/1c629c01/598033b4Nd6055897.jpg&quot;,​ &quot;letter&quot;: &quot;H&quot;,​ &quot;categories&quot;: null​ &#125;,​ &#123;​ &quot;id&quot;: 2036,​ &quot;name&quot;: &quot;酷派（Coolpad）&quot;,​ &quot;image&quot;: &quot;http://img10.360buyimg.com/popshop/jfs/t2521/347/883897149/3732/91c917ec/5670cf96Ncffa2ae6.jpg&quot;,​ &quot;letter&quot;: &quot;K&quot;,​ &quot;categories&quot;: null​ &#125;,​ &#123;​ &quot;id&quot;: 2037,​ &quot;name&quot;: &quot;魅族（MEIZU）&quot;,​ &quot;image&quot;: &quot;http://img13.360buyimg.com/popshop/jfs/t3511/131/31887105/4943/48f83fa9/57fdf4b8N6e95624d.jpg&quot;,​ &quot;letter&quot;: &quot;M&quot;,​ &quot;categories&quot;: null​ &#125;​ ];​ // 模拟延迟一段时间，随后进行赋值​ setTimeout(() =&gt; &#123;​ // 然后赋值给brands​ this.brands = brands;​ this.totalBrands = brands.length;​ // 完成赋值后，把加载状态赋值为false​ this.loading = false;​ &#125;,400)​ &#125;​ &#125; &#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;\\ 刷新页面查看： ### 3.2.4.优化页面 #### 编辑和删除按钮 我们将来要对品牌进行增删改，需要给每一行数据添加 修改删除的按钮，一般放到改行的最后一列： 其实就是多了一列，只是这一列没有数据，而是两个按钮而已。 我们先在头（headers）中添加一列： \\12345678910111213141516headers: [​ &#123;text: 'id', align: 'center', value: 'id'&#125;,​ &#123;text: '名称', align: 'center', sortable: false, value: 'name'&#125;,​ &#123;text: 'LOGO', align: 'center', sortable: false, value: 'image'&#125;,​ &#123;text: '首字母', align: 'center', value: 'letter', sortable: true,&#125;,​ &#123;text: '操作', align: 'center', value: 'id', sortable: false&#125;]\\ 然后在模板中添加按钮： \\1234567891011121314151617181920&lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt; &lt;td&gt;&#123;&#123; props.item.id &#125;&#125;&lt;/td&gt; &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt; &lt;td class=&quot;text-xs-center&quot;&gt;&lt;img :src=&quot;props.item.image&quot;&gt;&lt;/td&gt; &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.letter &#125;&#125;&lt;/td&gt; &lt;td class=&quot;justify-center&quot;&gt;​ 编辑/删除 &lt;/td&gt;&lt;/template&gt;\\ 因为不知道按钮怎么写，先放个普通文本看看： 然后在官方文档中找到按钮的用法： 修改我们的模板： \\12345678910111213141516171819202122&lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;​ &lt;td&gt;&#123;&#123; props.item.id &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&lt;img :src=&quot;props.item.image&quot;&gt;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.letter &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;justify-center layout&quot;&gt;​ &lt;v-btn color=&quot;info&quot;&gt;编辑&lt;/v-btn&gt;​ &lt;v-btn color=&quot;warning&quot;&gt;删除&lt;/v-btn&gt;​ &lt;/td&gt;&lt;/template&gt;\\ #### 新增按钮 因为新增根某个品牌无关，是独立的，因此我们可以放到表格的外面： 效果： #### 卡片（card） 为了不让按钮显得过于孤立，我们可以将按新增按钮和表格放到一张卡片（card）中。 我们去官网查看卡片的用法： 卡片v-card包含四个基本组件： - v-card-media：一般放图片或视频 - v-card-title：卡片的标题，一般位于卡片顶部 - v-card-text：卡片的文本（主体内容），一般位于卡片正中 - v-card-action：卡片的按钮，一般位于卡片底部 我们可以把新增的按钮放到v-card-title位置，把table放到下面，这样就成一个上下关系。 \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960 &lt;v-card&gt;​ &lt;!-- 卡片的头部 --&gt;​ &lt;v-card-title&gt;​ &lt;v-btn color=&quot;primary&quot;&gt;新增&lt;/v-btn&gt;​ &lt;/v-card-title&gt;​ &lt;!-- 分割线 --&gt;​ &lt;v-divider/&gt;​ &lt;!--卡片的中部--&gt;​ &lt;v-data-table​ :headers=&quot;headers&quot;​ :items=&quot;brands&quot;​ :search=&quot;search&quot;​ :pagination.sync=&quot;pagination&quot;​ :total-items=&quot;totalBrands&quot;​ :loading=&quot;loading&quot;​ class=&quot;elevation-1&quot;​ \\&gt;​ &lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;​ &lt;td&gt;&#123;&#123; props.item.id &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&lt;img :src=&quot;props.item.image&quot;&gt;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.letter &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;justify-center layout&quot;&gt;​ &lt;v-btn color=&quot;info&quot;&gt;编辑&lt;/v-btn&gt;​ &lt;v-btn color=&quot;warning&quot;&gt;删除&lt;/v-btn&gt;​ &lt;/td&gt;​ &lt;/template&gt;​ &lt;/v-data-table&gt; &lt;/v-card&gt;\\ 效果： #### 添加搜索框 我们还可以在卡片头部添加一个搜索框，其实就是一个文本输入框。 查看官网中，文本框的用法： - name：字段名，表单中会用到 - label：提示文字 - value：值。可以用v-model代替，实现双向绑定 修改模板，添加输入框： \\123456789101112&lt;v-card-title&gt;​ &lt;v-btn color=\"primary\"&gt;新增品牌&lt;/v-btn&gt;​ &lt;!--搜索框，与search属性关联--&gt;​ &lt;v-text-field label=\"输入关键字搜索\" v-model=\"search\"/&gt;&lt;/v-card-title&gt;\\ 效果： 发现输入框变的超级长！！！ 这个时候，我们可以使用Vuetify提供的一个空间隔离工具： 修改代码： \\12345678910111213141516​ &lt;v-card-title&gt;​ &lt;v-btn color=\"primary\"&gt;新增品牌&lt;/v-btn&gt;​ &lt;!--空间隔离组件--&gt;​ &lt;v-spacer /&gt;​ &lt;!--搜索框，与search属性关联--&gt;​ &lt;v-text-field label=\"输入关键字搜索\" v-model=\"search\"/&gt;​ &lt;/v-card-title&gt;\\ #### 给搜索框添加搜索图标 查看textfiled的文档，发现： 通过append-icon属性可以为 输入框添加后置图标，所有可用图标名称可以到 material-icons官网去查看。 修改我们的代码： \\1234&lt;v-text-field label=\"输入关键字搜索\" v-model=\"search\" append-icon=\"search\"/&gt;\\ #### 把文本框变紧凑 搜索框看起来高度比较高，页面不够紧凑。这其实是因为默认在文本框下面预留有错误提示空间。通过下面的属性可以取消提示： 修改代码： \\1234&lt;v-text-field label=\"输入关键字搜索\" v-model=\"search\" append-icon=\"search\" hide-details/&gt;\\ 效果： 几乎已经达到了原来一样的效果了吧！ ## 3.3.后台提供查询接口 前台页面已经准备好，接下来就是后台提供数据接口了。 ### 3.3.1.数据库表 \\12345678910111213141516CREATE TABLE `tb_brand` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;品牌id&apos;, `name` varchar(50) NOT NULL COMMENT &apos;品牌名称&apos;, `image` varchar(200) DEFAULT &apos;&apos; COMMENT &apos;品牌图片地址&apos;, `letter` char(1) DEFAULT &apos;&apos; COMMENT &apos;品牌的首字母&apos;, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=325400 DEFAULT CHARSET=utf8 COMMENT=&apos;品牌表，一个品牌下有多个商品（spu），一对多关系&apos;;\\ 简单的四个字段，不多解释。 这里需要注意的是，品牌和商品分类之间是多对多关系。因此我们有一张中间表，来维护两者间关系： \\123456789101112CREATE TABLE `tb_category_brand` ( `category_id` bigint(20) NOT NULL COMMENT &apos;商品类目id&apos;, `brand_id` bigint(20) NOT NULL COMMENT &apos;品牌id&apos;, PRIMARY KEY (`category_id`,`brand_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;商品分类和品牌的中间表，两者是多对多关系&apos;;\\ 但是，你可能会发现，这张表中并没有设置外键约束，似乎与数据库的设计范式不符。为什么这么做？ - 外键会严重影响数据库读写的效率 - 数据删除时会比较麻烦 在电商行业，性能是非常重要的。我们宁可在代码中通过逻辑来维护表关系，也不设置外键。 ### 3.3.2.实体类 \\12345678910111213141516171819202122@Table(name = \"tb_brand\")public class Brand &#123;​ @Id​ @GeneratedValue(strategy = GenerationType.IDENTITY)​ private Long id;​ private String name;// 品牌名称​ private String image;// 品牌图片​ private Character letter;​ // getter setter 略&#125;\\ ### 3.3.3.mapper 通用mapper来简化开发： \\123456public interface BrandMapper extends Mapper&lt;Brand&gt; &#123;&#125;\\ ### 3.3.4.controller 编写controller先思考四个问题，这次没有前端代码，需要我们自己来设定 - 请求方式：查询，肯定是Get - 请求路径：分页查询，/brand/page - 请求参数：根据我们刚才编写的页面，有分页功能，有排序功能，有搜索过滤功能，因此至少要有5个参数： - page：当前页，int - rows：每页大小，int - sortBy：排序字段，String - desc：是否为降序，boolean - key：搜索关键词，String - 响应结果：分页结果一般至少需要两个数据 - total：总条数 - items：当前页数据 - totalPage：有些还需要总页数 这里我们封装一个类，来表示分页结果： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788 public class PageResult&lt;T&gt; &#123;​ private Long total;// 总条数​ private Long totalPage;// 总页数​ private List&lt;T&gt; items;// 当前页数据 ​ public PageResult() &#123;​ &#125; ​ public PageResult(Long total, List&lt;T&gt; items) &#123;​ this.total = total;​ this.items = items;​ &#125; ​ public PageResult(Long total, Long totalPage, List&lt;T&gt; items) &#123;​ this.total = total;​ this.totalPage = totalPage;​ this.items = items;​ &#125; ​ public Long getTotal() &#123;​ return total;​ &#125; ​ public void setTotal(Long total) &#123;​ this.total = total;​ &#125; ​ public List&lt;T&gt; getItems() &#123;​ return items;​ &#125; ​ public void setItems(List&lt;T&gt; items) &#123;​ this.items = items;​ &#125; ​ public Long getTotalPage() &#123;​ return totalPage;​ &#125; ​ public void setTotalPage(Long totalPage) &#123;​ this.totalPage = totalPage;​ &#125; &#125; \\ 另外，这个PageResult以后可能在其它项目中也有需求，因此我们将其抽取到ly-common中，提高复用性： 接下来，我们编写Controller \\12345678910111213141516171819202122232425262728293031323334353637383940@RestController@RequestMapping(\"brand\")public class BrandController &#123;​ @Autowired​ private BrandService brandService;​ @GetMapping(\"page\")​ public ResponseEntity&lt;PageResult&lt;Brand&gt;&gt; queryBrandByPage(​ @RequestParam(value = \"page\", defaultValue = \"1\") Integer page,​ @RequestParam(value = \"rows\", defaultValue = \"5\") Integer rows,​ @RequestParam(value = \"sortBy\", required = false) String sortBy,​ @RequestParam(value = \"desc\", defaultValue = \"false\") Boolean desc,​ @RequestParam(value = \"key\", required = false) String key) &#123;​ PageResult&lt;Brand&gt; result = this.brandService.queryBrandByPageAndSort(page,rows,sortBy,desc, key);​ if (result == null || result.getItems().size() == 0) &#123;​ return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);​ &#125;​ return ResponseEntity.ok(result);​ &#125;&#125;\\ ### 3.3.5.Service \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152@Servicepublic class BrandService &#123;​ @Autowired​ private BrandMapper brandMapper;​ public PageResult&lt;Brand&gt; queryBrandByPageAndSort(​ Integer page, Integer rows, String sortBy, Boolean desc, String key) &#123;​ // 开始分页​ PageHelper.startPage(page, rows);​ // 过滤​ Example example = new Example(Brand.class);​ if (StringUtils.isNotBlank(key)) &#123;​ example.createCriteria().andLike(\"name\", \"%\" + key + \"%\")​ .orEqualTo(\"letter\", key);​ &#125;​ if (StringUtils.isNotBlank(sortBy)) &#123;​ // 排序​ String orderByClause = sortBy + (desc ? \" DESC\" : \" ASC\");​ example.setOrderByClause(orderByClause);​ &#125;​ // 查询​ Page&lt;Brand&gt; pageInfo = (Page&lt;Brand&gt;) brandMapper.selectByExample(example);​ // 返回结果​ return new PageResult&lt;&gt;(pageInfo.getTotal(), pageInfo);​ &#125;&#125;\\ 完整结构： ### 3.3.6.测试 通过浏览器访问试试：http://api.leyou.com/api/item/brand/page 接下来，去页面请求数据并渲染 ## 4.4.异步查询工具axios 异步查询数据，自然是通过ajax查询，大家首先想起的肯定是jQuery。但jQuery与MVVM的思想不吻合，而且ajax只是jQuery的一小部分。因此不可能为了发起ajax请求而去引用这么大的一个库。 ### 4.3.1.axios入门 Vue官方推荐的ajax请求框架叫做：axios，看下demo： axios的Get请求语法： \\1234567891011121314151617181920212223242526272829303132axios.get(\"/item/category/list?pid=0\") // 请求路径和请求参数拼接​ .then(function(resp)&#123;​ // 成功回调函数 &#125;)​ .catch(function()&#123;​ // 失败回调函数 &#125;)// 参数较多时，可以通过params来传递参数axios.get(\"/item/category/list\", &#123;​ params:&#123;​ pid:0​ &#125; &#125;)​ .then(function(resp)&#123;&#125;)// 成功时的回调​ .catch(function(error)&#123;&#125;)// 失败时的回调\\ axios的POST请求语法： 比如新增一个用户 \\1234567891011121314axios.post(\"/user\",&#123;​ name:\"Jack\",​ age:21 &#125;)​ .then(function(resp)&#123;&#125;)​ .catch(function(error)&#123;&#125;)\\ - 注意，POST请求传参，不需要像GET请求那样定义一个对象，在对象的params参数中传参。post()方法的第二个参数对象，就是将来要传递的参数 PUT和DELETE请求与POST请求类似 ### 4.3.2.axios的全局配置 而在我们的项目中，已经引入了axios，并且进行了简单的封装，在src下的http.js中： http.js中对axios进行了一些默认配置： \\12345678910111213141516import Vue from 'vue'import axios from 'axios'import config from './config'// config中定义的基础路径是：http://api.leyou.com/apiaxios.defaults.baseURL = config.api; // 设置axios的基础请求路径axios.defaults.timeout = 2000; // 设置axios的请求时间Vue.prototype.$http = axios;// 将axios赋值给Vue原型的$http属性，这样所有vue实例都可使用该对象\\ - http.js中导入了config的配置，还记得吗？ ​ - http.js对axios进行了全局配置：baseURL=config.api，即http://api.leyou.com/api。因此以后所有用axios发起的请求，都会以这个地址作为前缀。 - 通过Vue.property.$http = axios，将axios赋值给了 Vue原型中的$http。这样以后所有的Vue实例都可以访问到$http，也就是访问到了axios了。 ### 4.3.3.测试一下： 我们在组件MyBrand.vue的getDataFromServer方法，通过$http发起get请求，测试查询品牌的接口，看是否能获取到数据： 网络监视： 控制台结果： 可以看到，在请求成功的返回结果response中，有一个data属性，里面就是真正的响应数据。 响应结果中与我们设计的一致，包含3个内容： - total：总条数，目前是165 - items：当前页数据 - totalPage：总页数，我们没有返回 ## 4.5.异步加载品牌数据 虽然已经通过ajax请求获取了品牌数据，但是刚才的请求没有携带任何参数，这样显然不对。我们后端接口需要5个参数： - page：当前页，int - rows：每页大小，int - sortBy：排序字段，String - desc：是否为降序，boolean - key：搜索关键词，String 而页面中分页信息应该是在pagination对象中，我们通过浏览器工具，查看pagination中有哪些属性： 分别是： - descending：是否是降序，对应请求参数的desc - page：当前页，对应参数的page - rowsPerpage：每页大小，对应参数中的rows - sortBy：排序字段，对应参数的sortBy 缺少一个搜索关键词，这个应该是通过v-model与输入框绑定的属性：search。这样，所有参数就都有了。 另外，不要忘了把查询的结果赋值给brands和totalBrands属性，Vuetify会帮我们渲染页面。 接下来，我们在getDataFromServer方法中完善请求参数： \\12345678910111213141516171819202122232425262728293031323334// 发起请求this.$http.get(\"/item/brand/page\",&#123;​ params:&#123;​ key: this.search, // 搜索条件​ page: this.pagination.page,// 当前页​ rows: this.pagination.rowsPerPage,// 每页大小​ sortBy: this.pagination.sortBy,// 排序字段​ desc: this.pagination.descending// 是否降序​ &#125;​ &#125;).then(resp =&gt; &#123; // 这里使用箭头函数​ // 将得到的数据赋值给本地属性​ this.brands = resp.data.items;​ this.totalBrands = resp.data.total;​ // 完成赋值后，把加载状态赋值为false​ this.loading = false;​ &#125;)\\ 查看网络请求： 效果： ## 4.6.完成分页和过滤 ### 4.6.1.分页 现在我们实现了页面加载时的第一次查询，你会发现你点击分页或搜索不会发起新的请求，怎么办？ 虽然点击分页，不会发起请求，但是通过浏览器工具查看，会发现pagination对象的属性一直在变化： 我们可以利用Vue的监视功能：watch，当pagination发生改变时，会调用我们的回调函数，我们在回调函数中进行数据的查询即可！ 具体实现： 成功实现分页功能： ### 4.6.2.过滤 分页实现了，过滤也很好实现了。过滤字段对应的是search属性，我们只要监视这个属性即可: 查看网络请求： 页面结果： ## 4.7.完整代码 \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186&lt;template&gt; &lt;v-card&gt;​ &lt;v-card-title&gt;​ &lt;v-btn color=&quot;primary&quot; @click=&quot;addBrand&quot;&gt;新增品牌&lt;/v-btn&gt;​ &lt;!--搜索框，与search属性关联--&gt;​ &lt;v-spacer/&gt;​ &lt;v-text-field label=&quot;输入关键字搜索&quot; v-model.lazy=&quot;search&quot; append-icon=&quot;search&quot; hide-details/&gt;​ &lt;/v-card-title&gt;​ &lt;v-divider/&gt;​ &lt;v-data-table​ :headers=&quot;headers&quot;​ :items=&quot;brands&quot;​ :search=&quot;search&quot;​ :pagination.sync=&quot;pagination&quot;​ :total-items=&quot;totalBrands&quot;​ :loading=&quot;loading&quot;​ class=&quot;elevation-1&quot;​ \\&gt;​ &lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;​ &lt;td&gt;&#123;&#123; props.item.id &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&lt;img :src=&quot;props.item.image&quot;&gt;&lt;/td&gt;​ &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.letter &#125;&#125;&lt;/td&gt;​ &lt;td class=&quot;justify-center layout&quot;&gt;​ &lt;v-btn color=&quot;info&quot;&gt;编辑&lt;/v-btn&gt;​ &lt;v-btn color=&quot;warning&quot;&gt;删除&lt;/v-btn&gt;​ &lt;/td&gt;​ &lt;/template&gt;​ &lt;/v-data-table&gt; &lt;/v-card&gt;&lt;/template&gt;&lt;script&gt; import MyBrandForm from &apos;./MyBrandForm&apos; export default &#123;​ name: &quot;my-brand&quot;,​ data() &#123;​ return &#123;​ search: &apos;&apos;, // 搜索过滤字段​ totalBrands: 0, // 总条数​ brands: [], // 当前页品牌数据​ loading: true, // 是否在加载中​ pagination: &#123;&#125;, // 分页信息​ headers: [​ &#123;text: &apos;id&apos;, align: &apos;center&apos;, value: &apos;id&apos;&#125;,​ &#123;text: &apos;名称&apos;, align: &apos;center&apos;, sortable: false, value: &apos;name&apos;&#125;,​ &#123;text: &apos;LOGO&apos;, align: &apos;center&apos;, sortable: false, value: &apos;image&apos;&#125;,​ &#123;text: &apos;首字母&apos;, align: &apos;center&apos;, value: &apos;letter&apos;, sortable: true,&#125;,​ &#123;text: &apos;操作&apos;, align: &apos;center&apos;, value: &apos;id&apos;, sortable: false&#125;​ ]​ &#125;​ &#125;,​ mounted() &#123; // 渲染后执行​ // 查询数据​ this.getDataFromServer();​ &#125;,​ watch: &#123;​ pagination: &#123; // 监视pagination属性的变化​ deep: true, // deep为true，会监视pagination的属性及属性中的对象属性变化​ handler() &#123;​ // 变化后的回调函数，这里我们再次调用getDataFromServer即可​ this.getDataFromServer();​ &#125;​ &#125;,​ search: &#123; // 监视搜索字段​ handler() &#123;​ this.getDataFromServer();​ &#125;​ &#125;​ &#125;,​ methods: &#123;​ getDataFromServer() &#123; // 从服务的加载数的方法。​ // 发起请求​ this.$http.get(&quot;/item/brand/page&quot;, &#123;​ params: &#123;​ key: this.search, // 搜索条件​ page: this.pagination.page,// 当前页​ rows: this.pagination.rowsPerPage,// 每页大小​ sortBy: this.pagination.sortBy,// 排序字段​ desc: this.pagination.descending// 是否降序​ &#125;​ &#125;).then(resp =&gt; &#123; // 这里使用箭头函数​ this.brands = resp.data.items;​ this.totalBrands = resp.data.total;​ // 完成赋值后，把加载状态赋值为false​ this.loading = false;​ &#125;)​ &#125;​ &#125; &#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;\\","categories":[],"tags":[],"keywords":[]},{"title":"项目第六天--vue前端架构的学习","slug":"项目第六天-vue前端架构的学习","date":"2019-05-03T02:53:03.000Z","updated":"2019-05-03T02:56:04.306Z","comments":true,"path":"2019/05/03/项目第六天-vue前端架构的学习/","link":"","permalink":"https://mr8649.github.io/2019/05/03/项目第六天-vue前端架构的学习/","excerpt":"","text":"# 0.学习目标 - 了解vue-router使用 - 了解webpack使用 - 会使用vue-cli搭建项目 - 独立搭建后台管理系统 - 了解系统基本结构 # 1.路由vue-router ## 1.1.场景模拟 现在我们来实现这样一个功能： 一个页面，包含登录和注册，点击不同按钮，实现登录和注册页切换： ### 1.1.1.编写父组件 为了让接下来的功能比较清晰，我们先新建一个文件夹：src: 然后新建一个HTML文件，作为入口：index.html 然后编写页面的基本结构： \\123456789101112131415161718192021222324252627282930&lt;div id=\"app\"&gt;​ &lt;span&gt;登录&lt;/span&gt;​ &lt;span&gt;注册&lt;/span&gt;​ &lt;hr/&gt; &lt;div&gt;​ 登录页/注册页​ &lt;/div&gt;&lt;/div&gt;&lt;script src=\"../node_modules/vue/dist/vue.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt;​ var vm = new Vue(&#123;​ el:\"#app\"​ &#125;)&lt;/script&gt;\\ 样式： ### 1.1.2.编写登录组件 接下来我们来实现登录组件，以前我们都是写在一个文件中，但是为了复用性，开发中都会把组件放如独立的JS文件中，我们新建一个login.js 编写组件，这里我们只写模板，不写功能： \\1234567891011121314151617181920const loginForm = &#123;​ template:'**\\** &lt;div&gt;\\​ &lt;h2&gt;登录页&lt;/h2&gt; **\\**​ 用户名：&lt;input type=\"text\"&gt;&lt;br/&gt;**\\**​ 密码：&lt;input type=\"password\"&gt;&lt;br/&gt;**\\**​ &lt;/div&gt;**\\**​ '&#125;\\ ### 1.1.3.编写注册组件 新建单文件组件：register.js 编写模板： \\12345678910111213141516171819202122const registerForm = &#123;​ template:'**\\** &lt;div&gt;\\​ &lt;h2&gt;注册页&lt;/h2&gt; **\\**​ 用户名：&lt;input type=\"text\"&gt;&lt;br/&gt;**\\**​ 密码：&lt;input type=\"password\"&gt;&lt;br/&gt;**\\**​ 确认密码：&lt;input type=\"password\"&gt;&lt;br/&gt;**\\**​ &lt;/div&gt;**\\**​ '&#125;\\ ### 1.1.4.在父组件中引用 在index.html中使用刚刚编写的两个组件 \\1234567891011121314151617181920212223242526272829303132333435363738394041424344 &lt;div id=\"app\"&gt;​ &lt;span&gt;登录&lt;/span&gt;​ &lt;span&gt;注册&lt;/span&gt;​ &lt;hr/&gt; &lt;div&gt;​ &lt;login-form&gt;&lt;/login-form&gt;​ &lt;register-form&gt;&lt;/register-form&gt;​ &lt;/div&gt;​ &lt;/div&gt; &lt;script src=\"../node_modules/vue/dist/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"js/login.js\"&gt;&lt;/script&gt; &lt;script src=\"js/register.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt;​ var vm = new Vue(&#123;​ el:\"#app\",​ components:&#123;// 引用登录和注册组件​ loginForm,​ registerForm​ &#125;​ &#125;)​ &lt;/script&gt;\\ 效果： ### 1.1.5.问题 我们期待的是，当点击登录或注册按钮，分别显示登录页或注册页，而不是一起显示。 但是，如何才能动态加载组件，实现组件切换呢？ 虽然使用原生的Html5和JS也能实现，但是官方推荐我们使用vue-router模块。 ## 1.2.vue-router简介和安装 使用vue-router和vue可以非常方便的实现 复杂单页应用的动态路由功能。 官网：https://router.vuejs.org/zh-cn/ 使用npm安装：npm install vue-router --save 在index.html中引入依赖： \\1234&lt;script src=\"../node_modules/vue-router/dist/vue-router.js\"&gt;&lt;/script&gt;\\ ## 1.3.快速入门 新建vue-router对象，并且指定路由规则： \\12345678910111213141516171819202122// 创建VueRouter对象const router = new VueRouter(&#123;​ routes:[ // 编写多个路由规则​ &#123;​ path:\"/login\", // 请求路径​ component:loginForm // 组件名称​ &#125;,​ &#123;path:\"/register\",component:registerForm&#125;,​ ]&#125;)\\ - 创建VueRouter对象，并指定路由参数 - routes：路由规则的数组，可以指定多个对象，每个对象是一条路由规则，包含以下属性： - path：路由的路径 - component：组件名称 在父组件中引入router对象： \\123456789101112131415161718var vm = new Vue(&#123;​ el:\"#app\",​ components:&#123;// 引用登录和注册组件​ loginForm,​ registerForm​ &#125;,​ router // 引用上面定义的router对象&#125;)\\ 页面跳转控制： \\12345678910111213141516171819202122&lt;div id=\"app\"&gt;​ &lt;!--router-link来指定跳转的路径--&gt;​ &lt;span&gt;&lt;router-link to=\"/login\"&gt;登录&lt;/router-link&gt;&lt;/span&gt;​ &lt;span&gt;&lt;router-link to=\"/register\"&gt;注册&lt;/router-link&gt;&lt;/span&gt;​ &lt;hr/&gt; &lt;div&gt;​ &lt;!--vue-router的锚点--&gt;​ &lt;router-view&gt;&lt;/router-view&gt;​ &lt;/div&gt;&lt;/div&gt;\\ - 通过&lt;router-view&gt;来指定一个锚点，当路由的路径匹配时，vue-router会自动把对应组件放到锚点位置进行渲染 - 通过&lt;router-link&gt;指定一个跳转链接，当点击时，会触发vue-router的路由功能，路径中的hash值会随之改变 效果： 注意：单页应用中，页面的切换并不是页面的跳转。仅仅是地址最后的hash值变化。 事实上，我们总共就一个HTML：index.html ## 1.4.父子组件 # 2.webpack ## 2.1.认识webpack Webpack 是一个前端资源的打包工具，它可以将js、image、css等资源当成一个模块进行打包。 中文官方网站：https://www.webpackjs.com/ 官网给出的解释： 为什么需要打包？ - 将许多碎小文件打包成一个整体，减少单页面内的衍生请求次数，提高网站效率。 - 将ES6的高级语法进行转换编译，以兼容老版本的浏览器。 - 将代码打包的同时进行混淆，提高代码的安全性。 ## 2.2.四个核心概念 学习Webpack，你需要先理解四个核心概念： - 入口(entry) webpack打包的启点，可以有一个或多个，一般是js文件。webpack会从启点文件开始，寻找启点直接或间接依赖的其它所有的依赖，包括JS、CSS、图片资源等，作为将来打包的原始数据 - 输出(output) 出口一般包含两个属性：path和filename。用来告诉webpack打包的目标文件夹，以及文件的名称。目的地也可以有多个。 - 加载器（loader） webpack本身只识别Js文件，如果要加载非JS文件，必须指定一些额外的加载器（loader），例如css-loader。然后将这些文件转为webpack能处理的有效模块，最后利用webpack的打包能力去处理。 - 插件(plugins) 插件可以扩展webpack的功能，让webpack不仅仅是完成打包，甚至各种更复杂的功能，或者是对打包功能进行优化、压缩，提高效率。 ## 2.3.安装 webpack支持全局安装和本地安装，官方推荐是本地安装，我们按照官方的来。 输入命令：npm install webpack webpack-cli --save-dev 此时，我们注意下项目中文件夹下，会有一个package.json文件。（其实早就有了） 打开文件，可以看到我们之前用npm安装过的文件都会出现在这里： ## 2.4.编写webpack配置 接下来，我们编写一个webpack的配置，来指定一些打包的配置项。配置文件的名称，默认就是webpack.config.js，我们放到hello-vue的根目录： 配置文件中就是要指定上面说的四个核心概念，入口、出口、加载器、插件。 不过，加载器和插件是可选的。我们先编写入口和出口 ### 2.4.1.入口entry webpack打包的启点，可以有一个或多个，一般是js文件。现在思考一下我们有没有一个入口？貌似没有，我们所有的东西都集中在index.html，不是一个js，那怎么办？ 我们新建一个js，把index.html中的部分内容进行集中，然后在index.html中引用这个js不就OK了！ 然后把原来index.html中的js代码全部移动到main.js中 \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// 使用es6的语法导入js模块import Vue from '../node_modules/vue/dist/vue';import VueRouter from '../node_modules/vue-router/dist/vue-router'import loginForm from './js/login'import registerForm from './js/register'Vue.use(VueRouter)// 创建VueRouter对象const router = new VueRouter(&#123;​ routes:[ // 编写多个路由规则​ &#123;​ path:\"/login\", // 请求路径​ component:loginForm // 组件名称​ &#125;,​ &#123;path:\"/register\",component:registerForm&#125;,​ ]&#125;)var vm = new Vue(&#123;​ el:\"#app\",​ components:&#123;// 引用登录和注册组件​ loginForm,​ registerForm​ &#125;,​ router&#125;)\\ - 原来的index.html中引入了很多其它js，在这里我们使用es6的import语法进行导入。 注意，要使用import，就需要在login.js和register.js中添加export导出语句： \\12345678910111213141516171819202122 const loginForm = &#123;​ template:` &lt;div&gt; ​ &lt;h2&gt;登录页&lt;/h2&gt; ​ 用户名：&lt;input type=\"text\"&gt;&lt;br/&gt;​ 密码：&lt;input type=\"password\"&gt;&lt;br/&gt;​ &lt;/div&gt;​ ` &#125; export default loginForm; \\ register.js: \\1234567891011121314151617181920212223242526 const registerForm = &#123;​ template:` &lt;div&gt;​ &lt;h2&gt;注册页&lt;/h2&gt; ​ 用户名：&lt;input type=\"text\"&gt;&lt;br/&gt;​ 密码：&lt;input type=\"password\"&gt;&lt;br/&gt;​ 确认密码：&lt;input type=\"password\"&gt;&lt;br/&gt;​ &lt;/div&gt;​ ` &#125; export default registerForm; \\ - vue-router使用模块话加载后，必须增加一句：Vue.use(VueRouter) 这样，main.js就成了我们整个配置的入口了。 我们在webpack.config.js中添加以下内容： \\12345678module.exports=&#123;​ entry:'./src/main.js', //指定打包的入口文件&#125;\\ ### 2.4.2.出口output 出口，就是输出的目的地。一般我们会用一个dist目录，作为打包输出的文件夹： 然后，编写webpack.config.js，添加出口配置： \\123456789101112131415161718module.exports=&#123;​ entry:'./src/main.js', //指定打包的入口文件​ output:&#123;​ // path: 输出的目录，__dirname是相对于webpack.config.js配置文件的绝对路径​ path : __dirname+'/dist', ​ filename:'build.js' //输出的js文件名​ &#125;&#125;\\ ## 2.5.执行打包 在控制台输入以下命令： \\1234npx webpack --config webpack.config.js\\ 随后，查看dist目录： 尝试打开build.js，你根本看不懂： 所有的js合并为1个，并且对变量名进行了随机打乱，这样就起到了 压缩、混淆的作用。 ## 2.6.测试运行 在index.html中引入刚刚生成的build.js文件， \\123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt;​ &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;​ &lt;!--router-link来指定跳转的路径--&gt;​ &lt;span&gt;&lt;router-link to=\"/login\"&gt;登录&lt;/router-link&gt;&lt;/span&gt;​ &lt;span&gt;&lt;router-link to=\"/register\"&gt;注册&lt;/router-link&gt;&lt;/span&gt;​ &lt;hr/&gt; &lt;div&gt;​ &lt;!--vue-router的锚点--&gt;​ &lt;router-view&gt;&lt;/router-view&gt;​ &lt;/div&gt;​ &lt;/div&gt; &lt;script src=\"../dist/build.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\\ 然后运行： ## 2.7.打包CSS ### 2.7.1.编写css文件 我们来编写一段CSS代码，对index的样式做一些美化： 内容： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344\\#app a&#123;​ display: inline-block;​ width: 150px;​ line-height: 30px;​ background-color: dodgerblue;​ color: white;​ font-size: 16px;​ text-decoration: none;&#125;\\#app a:hover&#123;​ background-color: whitesmoke;​ color: dodgerblue;&#125;\\#app div&#123;​ width: 300px;​ height: 150px;&#125;\\#app&#123;​ width: 305px;​ border: 1px solid dodgerblue;&#125;\\ ### 2.7.2.安装加载器 前面说过，webpack默认只支持js加载。要加载CSS文件，必须安装加载器： 命令： \\1234npm install style-loader css-loader --save-dev\\ 此时，在package.json中能看到新安装的： ### 2.7.3.在main.js引入css文件 因为入口在main.js，因此css文件也要在这里引入。依然使用ES6 的模块语法： \\1234import './css/main.css'\\ ### 2.7.4.在webpack.config.js添加加载器 \\1234567891011121314151617181920212223242526272829303132333435363738module.exports = &#123;​ entry: './src/main.js', //指定打包的入口文件​ output: &#123;​ path: __dirname + '/dist', // 注意：__dirname表示webpack.config.js所在目录的绝对路径​ filename: 'build.js' //输出文件​ &#125;,​ module: &#123;​ rules: [​ &#123;​ test: /**\\.**css$/, // 通过正则表达式匹配所有以.css后缀的文件​ use: [ // 要使用的加载器，这两个顺序一定不要乱​ 'style-loader',​ 'css-loader'​ ]​ &#125;​ ]​ &#125;&#125;\\ ### 2.7.5.重新打包 再次输入打包指令：npx webpack --config webpack.config.js 效果： ## 2.8.script脚本 我们每次使用npm安装，都会在package.json中留下痕迹，事实上，package.json中不仅可以记录安装的内容，还可编写脚本，让我们运行命令更加快捷。 我们可以把webpack的命令编入其中： 以后，如果要打包，就可以直接输入：npm run build即可。 - npm run ：执行npm脚本，后面跟的是脚本的名称build ## 2.9.打包HTML 之前的打包过程中，除了HTML文件外的其它文件都被打包了，当在线上部署时，我们还得自己复制HTML到dist，然后手动添加生成的js到HTML中，这非常不友好。 webpack中的一个插件：html-webpack-plugin，可以解决这个问题。 1）安装插件：npm install --save-dev html-webpack-plugin 需要在webpack.config.js中添加插件： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354const HtmlWebpackPlugin = require('html-webpack-plugin');module.exports = &#123;​ entry: './src/main.js', //指定打包的入口文件​ output: &#123;​ path: __dirname + '/dist', // 注意：__dirname表示webpack.config.js所在目录的绝对路径​ filename: 'build.js' //输出文件​ &#125;,​ module: &#123;​ rules: [​ &#123;​ test: /**\\.**css$/, // 通过正则表达式匹配所有以.css后缀的文件​ use: [ // 要使用的加载器，这两个顺序一定不要乱​ 'style-loader',​ 'css-loader'​ ]​ &#125;​ ]​ &#125;,​ plugins:[​ new HtmlWebpackPlugin(&#123;​ title: '首页', //生成的页面标题&lt;head&gt;&lt;title&gt;首页&lt;/title&gt;&lt;/head&gt;​ filename: 'index.html', // dist目录下生成的文件名​ template: './src/index.html' // 我们原来的index.html，作为模板​ &#125;)​ ]&#125;\\ 2）将原来HTML中的引入js代码删除： 3）再次打包：npm run build 4）查看dist目录： 打开index.html，发现已经自动添加了当前目录下的build.js \\1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt;​ &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;​ &lt;!--router-link来指定跳转的路径--&gt;​ &lt;span&gt;&lt;router-link to=\"/login\"&gt;登录&lt;/router-link&gt;&lt;/span&gt;​ &lt;span&gt;&lt;router-link to=\"/register\"&gt;注册&lt;/router-link&gt;&lt;/span&gt; &lt;div&gt;​ &lt;!--vue-router的锚点--&gt;​ &lt;router-view&gt;&lt;/router-view&gt;​ &lt;/div&gt;​ &lt;/div&gt;&lt;script type=\"text/javascript\" src=\"build.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\\ ## 2.10.热更新的web服务 刚才的案例中，每次修改任何js或css内容，都必须重新打包，非常麻烦。 webpack给我们提供了一个插件，可以帮我们运行一个web服务，加载页面内容，并且修改js后不需要重新加载就能看到最新结果： 1）安装插件： \\1234npm install webpack-dev-server --save-dev\\ 2）添加启动脚本 在package.json中配置script \\12345678 \"scripts\": &#123;​ \"dev\": \"webpack-dev-server --inline --hot --open --port 8080 --host 127.0.0.1\" &#125;,\\ –inline：自动刷新 –hot：热加载 –port：指定端口 –open：自动在默认浏览器打开 –host：可以指定服务器的 ip，不指定则为127.0.0.1 3）运行脚本： \\1234npm run dev\\ 4）效果： # 3.vue-cli ## 3.1.介绍和安装 在开发中，需要打包的东西不止是js、css、html。还有更多的东西要处理，这些插件和加载器如果我们一一去添加就会比较麻烦。 幸好，vue官方提供了一个快速搭建vue项目的脚手架：vue-cli 使用它能快速的构建一个web工程模板。 官网：https://github.com/vuejs/vue-cli 安装命令： \\1234npm install -g vue-cli\\ ## 3.2.快速上手 我们新建一个module： 打开终端并进入目录： 用vue-cli命令，快速搭建一个webpack的项目：vue init webpack 前面几项都走默认或yes 下面这些我们选no 最后，再选yes，使用 npm安装 ## 3.3.项目结构 安装好的项目结构： 入口文件： ## 3.4.单文件组件 需要注意的是，我们看到有一类后缀名为.vue的文件，我们称为单文件组件 每一个.vue文件，就是一个独立的vue组件。类似于我们刚才写的loginForm.js和registerForm.js 只不过，我们在js中编写 html模板和样式非常的不友好，而且没有语法提示和高亮。 而单文件组件中包含三部分内容： - template：模板，支持html语法高亮和提示 - script：js脚本，这里编写的就是vue的组件对象，看到上面的data(){}了吧 - style：样式，支持CSS语法高亮和提示 每个组件都有自己独立的html、JS、CSS，互不干扰，真正做到可独立复用。 ## 3.5.运行 看看生成的package.json： - 可以看到这引入了非常多的依赖，绝大多数都是开发期依赖，比如大量的加载器。 - 运行时依赖只有vue和vue-router - 脚本有三个： - dev：使用了webpack-dev-server命令，开发时热部署使用 - start：使用了npm run dev命令，与上面的dev效果完全一样 - build：等同于webpack的打包功能，会打包到dist目录下。 我们执行npm run dev 或者 npm start 都可以启动项目： 页面： # 4.搭建后台管理前端 ## 4.1.导入已有资源 后台项目相对复杂，为了有利于教学，我们不再从0搭建项目，而是直接使用课前资料中给大家准备好的源码： 我们解压缩，放到工作目录中： 然后在eclipse中导入新的工程： 选中我们的工程： 这正是一个用vue-cli构建的webpack工程，是不是与昨天的一样： ## 4.2.安装依赖 你应该注意到，这里并没有node_modules文件夹，方便给大家下发，已经把依赖都删除了。不过package.json中依然定义了我们所需的一切依赖： 我们只需要通过命令来安装所需依赖即可。打开终端，进入项目目录，输入：npm install 大概需要1分钟。 ## 4.3.运行一下看看 输入命令： \\1234npm run dev\\ 发现默认的端口是9001。访问：http://localhost:9001 会自动进行跳转： # 5.Vuetify框架 ## 5.1.为什么要学习UI框架 Vue负责的是虽然会帮我们进行视图的渲染，但是样式是有我们自己来完成。这显然不是我们的强项，因此后端开发人员一般都喜欢使用一些现成的UI组件，拿来即用，常见的例如： - BootStrap - LayUI - EasyUI - ZUI 然而这些UI组件的基因天生与Vue不合，因为他们更多的是利用DOM操作，借助于jQuery实现，而不是MVVM的思想。 而目前与Vue吻合的UI框架也非常的多，国内比较知名的如： - element-ui：饿了么出品 - i-view：某公司出品 然而我们都不用，我们今天推荐的是一款国外的框架：Vuetify 官方网站：https://vuetifyjs.com/zh-Hans/ ## 5.2.为什么是Vuetify 有中国的为什么还要用外国的？原因如下： - Vuetify几乎不需要任何CSS代码，而element-ui许多布局样式需要我们来编写 - Vuetify从底层构建起来的语义化组件。简单易学，容易记住。 - Vuetify基于Material Design（谷歌推出的多平台设计规范），更加美观，动画效果酷炫，且风格统一 这是官网的说明： 缺陷： - 目前官网虽然有中文文档，但因为翻译问题，几乎不太能看。 ## 5.3.怎么用？ 基于官方网站的文档进行学习： 我们重点关注UI components即可，里面有大量的UI组件，我们要用的时候再查看，不用现在学习，先看下有什么： 以后用到什么组件，就来查询即可。 # 6.项目结构 开始编码前，我们先了解下项目的结构： ## 6.1.目录结构 首先是目录结构图： ## 6.2.调用关系 我们最主要理清index.html、main.js、App.vue之间的关系： 理一下： - index.html中定义了空的div，其id为app。 - main.js中定义了Vue对象，并且绑定通过id选择器，绑定到index.html的div中，因此main.js的内容都将在index.html的div中显示。 - 而main.js中只有一行内容：&lt;App/&gt;,这是使用了App组件，即App.vue，也就是说index.html中最终展现的是App.vue中的内容。 - App.vue中也没有内容，而是定义了vue-router的锚点：&lt;router-view&gt;,我们之前讲过，vue-router路由后的组件将会在锚点展示。 - 最终的结论是：一切路由后的内容都将通过App.vue在index.html中显示。 ## 6.3.页面布局 接下来我们一起看下页面布局： Layout组件是我们的整个页面的布局组件： 一个典型的三块布局。包含左，上，中三部分： 里面使用了Vuetify中的2个组件和一个布局元素： - v-navigation-drawer ：导航抽屉，主要用于容纳应用程序中的页面的导航链接。 - v-toolbar：工具栏通常是网站导航的主要途径。可以与导航抽屉一起很好地工作，动态选择是否打开导航抽屉，实现可伸缩的侧边栏。 - v-content：并不是一个组件，而是标记页面布局的元素。可以根据您指定的app组件的结构动态调整大小，使得您可以创建高度可定制的组件。 那么问题来了：v-content中的内容来自哪里？ - Layout映射的路径是/ - 除了Login以为的所有组件，都是定义在Layout的children属性，并且路径都是/的下面 - 因此当路由到子组件时，会在Layout中定义的锚点中显示。 - 并且Layout中的其它部分不会变化，这就实现了布局的共享。","categories":[],"tags":[],"keywords":[]},{"title":"分布式微服务系统商城项目环境搭建","slug":"分布式微服务系统商城项目环境搭建","date":"2019-05-03T02:44:51.000Z","updated":"2019-05-03T02:47:43.904Z","comments":true,"path":"2019/05/03/分布式微服务系统商城项目环境搭建/","link":"","permalink":"https://mr8649.github.io/2019/05/03/分布式微服务系统商城项目环境搭建/","excerpt":"","text":"# 0.学习目标 - 了解电商行业 - 了解乐优商城项目结构 - 能独立搭建项目基本框架 - 能参考使用ES6的新语法 # 1.了解电商行业 学习电商项目，自然要先了解这个行业，所以我们首先来聊聊电商行业 ## 1.1.项目分类 主要从需求方、盈利模式、技术侧重点这三个方面来看它们的不同 ### 1.1.1.传统项目 各种企业里面用的管理系统（ERP、HR、OA、CRM、物流管理系统。。。。。。。） - 需求方：公司、企业内部 - 盈利模式：项目本身卖钱 - 技术侧重点：业务功能 ### 1.1.2.互联网项目 门户网站、电商网站：baidu.com、qq.com、taobao.com、jd.com …… - 需求方：广大用户群体 - 盈利模式：虚拟币、增值服务、广告收益…… - 技术侧重点：网站性能、业务功能 而我们今天要聊的就是互联网项目中的重要角色：电商 ## 1.2.电商行业的发展 ### 1.2.1.钱景 近年来，中国的电子商务快速发展，交易额连创新高，电子商务在各领域的应用不断拓展和深化、相关服务业蓬勃发展、支撑体系不断健全完善、创新的动力和能力不断增强。电子商务正在与实体经济深度融合，进入规模性发展阶段，对经济社会生活的影响不断增大，正成为我国经济发展的新引擎。 中国电子商务研究中心数据显示，截止到 2012 年底，中国电子商务市场交易规模达 7.85万亿人民币，同比增长 30.83%。其中，B2B 电子商务交易额达 6.25 万亿，同比增长 27%。而 2011 年全年，中国电子商务市场交易额达 6 万亿人民币，同比增长 33%，占 GDP 比重上升到 13%；2012 年，电子商务占 GDP 的比重已经高达 15%。 ​ ### 1.2.2.数据 来看看双十一的成交数据： 2016双11开场30分钟，创造每秒交易峰值17.5万笔，每秒支付峰值12万笔的新纪录。菜鸟单日物流订单量超过4.67亿，创历史新高。 ### 1.2.3.技术特点 从上面的数据我们不仅要看到钱，更要看到背后的技术实力。正是得益于电商行业的高强度并发压力，促使了BAT等巨头们的技术进步。电商行业有些什么特点呢？ - 技术范围广 - 技术新 - 高并发（分布式、静态化技术、缓存技术、异步并发、池化、队列） - 高可用（集群、负载均衡、限流、降级、熔断） - 数据量大 - 业务复杂 - 数据安全 ## 1.3.常见电商模式 电商行业的一些常见模式： - B2C：商家对个人，如：亚马逊、当当等 - C2C平台：个人对个人，如：咸鱼、拍拍网、ebay - B2B平台：商家对商家，如：阿里巴巴、八方资源网等 - O2O：线上和线下结合，如：饿了么、电影票、团购等 - P2P：在线金融，贷款，如：网贷之家、人人聚财等。 - B2C平台：天猫、京东、一号店等 ## 1.4.一些专业术语 - SaaS：软件即服务 - SOA：面向服务 - RPC：远程过程调用 - RMI：远程方法调用 - PV：(page view)，即页面浏览量； 用户每1次对网站中的每个网页访问均被记录1次。用户对同一页面的多次访问，访问量累计 - UV：(unique visitor)，独立访客 指访问某个站点或点击某条新闻的不同IP地址的人数。在同一天内，uv只记录第一次进入网站的具有独立IP的访问者，在同一天内再次访问该网站则不计数。 - PV与带宽： - 计算带宽大小需要关注两个指标：峰值流量和页面的平均大小。 - 计算公式是：网站带宽= ( PV 平均页面大小（单位MB） 8 )/统计时间（换算到秒） - 为什么要乘以8？ ​ - 网站大小为单位是字节(Byte)，而计算带宽的单位是bit，1Byte=8bit - 这个计算的是平均带宽，高峰期还需要扩大一定倍数 - PV、QPS、并发 - QPS：每秒处理的请求数量。8000/s - 比如你的程序处理一个请求平均需要0.1S，那么1秒就可以处理10个请求。QPS自然就是10，多线程情况下，这个数字可能就会有所增加。 - 由PV和QPS如何需要部署的服务器数量？ ​ - 根据二八原则，80%的请求集中在20%的时间来计算峰值压力： ​ - （每日PV 80%） / （3600s 24 20%） 每个页面的请求数 = 每个页面每秒的请求数量 - 然后除以服务器的QPS值，即可计算得出需要部署的服务器数量 ## 1.5.项目开发流程 项目经理：管人 产品经理：设计需求原型 测试： 前端：大前端。node 后端： 移动端： 项目开发流程图： 公司现状： # 2.乐优商城介绍 ## 2.1.项目介绍 - 乐优商城是一个全品类的电商购物网站（B2C）。 - 用户可以在线购买商品、加入购物车、下单、秒杀商品 - 可以品论已购买商品 - 管理员可以在后台管理商品的上下架、促销活动 - 管理员可以监控商品销售状况 - 客服可以在后台处理退款操作 - 希望未来3到5年可以支持千万用户的使用 ## 2.2.系统架构 ### 2.2.1.架构图 乐优商城架构缩略图，大图请参考课前资料： ### 2.2.2.系统架构解读 整个乐优商城可以分为两部分：后台管理系统、前台门户系统。 - 后台管理： - 后台系统主要包含以下功能： ​ - 商品管理，包括商品分类、品牌、商品规格等信息的管理 ​ - 销售管理，包括订单统计、订单退款处理、促销活动生成等 ​ - 用户管理，包括用户控制、冻结、解锁等 ​ - 权限管理，整个网站的权限控制，采用JWT鉴权方案，对用户及API进行权限控制 ​ - 统计，各种数据的统计分析展示 - 后台系统会采用前后端分离开发，而且整个后台管理系统会使用Vue.js框架搭建出单页应用（SPA）。 - 预览图： - 前台门户 - 前台门户面向的是客户，包含与客户交互的一切功能。例如： ​ - 搜索商品 ​ - 加入购物车 ​ - 下单 ​ - 评价商品等等 - 前台系统我们会使用Thymeleaf模板引擎技术来完成页面开发。出于SEO优化的考虑，我们将不采用单页应用。 无论是前台还是后台系统，都共享相同的微服务集群，包括： - 商品微服务：商品及商品分类、品牌、库存等的服务 - 搜索微服务：实现搜索功能 - 订单微服务：实现订单相关 - 购物车微服务：实现购物车相关功能 - 用户中心：用户的登录注册等功能 - Eureka注册中心 - Zuul网关服务 - Spring Cloud Config配置中心 - … # 3.项目搭建 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 ## 3.1.技术选型 前端技术： - 基础的HTML、CSS、JavaScript（基于ES6标准） - JQuery - Vue.js 2.0以及基于Vue的框架：Vuetify - 前端构建工具：WebPack - 前端安装包工具：NPM - Vue脚手架：Vue-cli - Vue路由：vue-router - ajax框架：axios - 基于Vue的富文本框架：quill-editor 后端技术： - 基础的SpringMVC、Spring 5.0和MyBatis3 - Spring Boot 2.0.1版本 - Spring Cloud 最新版 Finchley.RC1 - Redis-4.0 - RabbitMQ-3.4 - Elasticsearch-5.6.8 - nginx-1.10.2： - FastDFS - 5.0.8 - MyCat - Thymeleaf ## 3.2.开发环境 为了保证开发环境的统一，希望每个人都按照我的环境来配置： - IDE：我们使用Idea 2017.3 版本 - JDK：统一使用JDK1.8 - 项目构建：maven3.3.9以上版本即可 - 版本控制工具：git idea大家可以在我的课前资料中找到。另外，使用帮助大家可以参考课前资料的《idea使用指南.md》 ## 3.3.域名 我们在开发的过程中，为了保证以后的生产、测试环境统一。尽量都采用域名来访问项目。 一级域名：www.leyou.com 二级域名：manage.leyou.com , api.leyou.com 我们可以通过switchhost工具来修改自己的host对应的地址，只要把这些域名指向127.0.0.1，那么跟你用localhost的效果是完全一样的。 switchhost可以去课前资料寻找。 ## 3.4.创建父工程 创建统一的父工程：leyou，用来管理依赖及其版本，注意是创建project，而不是moudle 填写项目信息： 注意： 父工程不需要代码，只是管理依赖，因此我们不选择任何SpringCloud的依赖 跳过依赖选择。 填写保存的位置信息： 然后将pom文件修改成我这个样子： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"​ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;​ &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;​ &lt;groupId&gt;com.leyou.parent&lt;/groupId&gt;​ &lt;artifactId&gt;leyou&lt;/artifactId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;packaging&gt;pom&lt;/packaging&gt;​ &lt;name&gt;leyou&lt;/name&gt;​ &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;​ &lt;parent&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;​ &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;​ &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;​ &lt;/parent&gt;​ &lt;properties&gt;​ &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;​ &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;​ &lt;java.version&gt;1.8&lt;/java.version&gt;​ &lt;spring-cloud.version&gt;Finchley.RC1&lt;/spring-cloud.version&gt;​ &lt;mybatis.starter.version&gt;1.3.2&lt;/mybatis.starter.version&gt;​ &lt;mapper.starter.version&gt;2.0.2&lt;/mapper.starter.version&gt;​ &lt;druid.starter.version&gt;1.1.9&lt;/druid.starter.version&gt;​ &lt;mysql.version&gt;5.1.32&lt;/mysql.version&gt;​ &lt;pageHelper.starter.version&gt;1.2.3&lt;/pageHelper.starter.version&gt;​ &lt;leyou.latest.version&gt;1.0.0-SNAPSHOT&lt;/leyou.latest.version&gt;​ &lt;fastDFS.client.version&gt;1.26.1-RELEASE&lt;/fastDFS.client.version&gt;​ &lt;/properties&gt;​ &lt;dependencyManagement&gt;​ &lt;dependencies&gt;​ &lt;!-- springCloud --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;​ &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;​ &lt;type&gt;pom&lt;/type&gt;​ &lt;scope&gt;import&lt;/scope&gt;​ &lt;/dependency&gt;​ &lt;!-- mybatis启动器 --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;​ &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;​ &lt;version&gt;$&#123;mybatis.starter.version&#125;&lt;/version&gt;​ &lt;/dependency&gt;​ &lt;!-- 通用Mapper启动器 --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;​ &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;​ &lt;version&gt;$&#123;mapper.starter.version&#125;&lt;/version&gt;​ &lt;/dependency&gt;​ &lt;!-- 分页助手启动器 --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;​ &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;​ &lt;version&gt;$&#123;pageHelper.starter.version&#125;&lt;/version&gt;​ &lt;/dependency&gt;​ &lt;!-- mysql驱动 --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;mysql&lt;/groupId&gt;​ &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;​ &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;​ &lt;/dependency&gt;​ &lt;!--FastDFS客户端--&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;com.github.tobato&lt;/groupId&gt;​ &lt;artifactId&gt;fastdfs-client&lt;/artifactId&gt;​ &lt;version&gt;$&#123;fastDFS.client.version&#125;&lt;/version&gt;​ &lt;/dependency&gt;​ &lt;/dependencies&gt;​ &lt;/dependencyManagement&gt;​ &lt;build&gt;​ &lt;plugins&gt;​ &lt;plugin&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;​ &lt;/plugin&gt;​ &lt;/plugins&gt;​ &lt;/build&gt;​ &lt;repositories&gt;​ &lt;repository&gt;​ &lt;id&gt;spring-milestones&lt;/id&gt;​ &lt;name&gt;Spring Milestones&lt;/name&gt;​ &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;​ &lt;snapshots&gt;​ &lt;enabled&gt;false&lt;/enabled&gt;​ &lt;/snapshots&gt;​ &lt;/repository&gt;​ &lt;/repositories&gt;&lt;/project&gt;\\ 可以发现，我们在父工程中引入了SpringCloud等很多以后需要用到的依赖，以后创建的子工程就不需要自己引入了。 最后，删除自动生成的LeyouApplication启动类、测试类以及application.properties文件，我们不需要。 ## 3.5.创建EurekaServer ### 3.5.1.创建工程 这个大家应该比较熟悉了。 我们的注册中心，起名为：ly-registry 这次我们就不Spring使用提供的脚手架了。直接创建maven项目，自然会继承父类的依赖： 选择新建module： 选择maven安装，但是不要选择骨架： 然后填写项目坐标，我们的项目名称为ly-registry: 选择安装目录，因为是聚合项目，目录应该是在父工程leyou的下面： ### 3.5.2.添加依赖 添加EurekaServer的依赖： \\123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"​ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"​ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;​ &lt;parent&gt;​ &lt;artifactId&gt;leyou&lt;/artifactId&gt;​ &lt;groupId&gt;com.leyou.parent&lt;/groupId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;/parent&gt;​ &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;​ &lt;groupId&gt;com.leyou.common&lt;/groupId&gt;​ &lt;artifactId&gt;ly-registry&lt;/artifactId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;dependencies&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;/dependencies&gt;&lt;/project&gt;\\ ### 3.5.3.编写启动类 \\12345678910111213141516@SpringBootApplication@EnableEurekaServerpublic class LyRegistry &#123;​ public static void main(String[] args) &#123;​ SpringApplication.run(LyRegistry.class, args);​ &#125;&#125;\\ ### 3.5.4.配置文件 \\123456789101112131415161718192021222324252627282930server: port: 10086spring: application:​ name: ly-registryeureka: client:​ fetch-registry: false​ register-with-eureka: false​ service-url:​ defaultZone: http://127.0.0.1:$&#123;server.port&#125;/eureka server:​ enable-self-preservation: false # 关闭自我保护​ eviction-interval-timer-in-ms: 5000 # 每隔5秒进行一次服务列表清理\\ ### 3.5.5.项目的结构： 目前，整个项目的结构如图： ## 3.6.创建Zuul网关 ### 3.6.1.创建工程 与上面类似，选择maven方式创建Module，然后填写项目名称，我们命名为：ly-api-gateway 填写保存的目录： ### 3.6.2.添加依赖 这里我们需要添加Zuul和EurekaClient的依赖： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"​ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"​ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;​ &lt;parent&gt;​ &lt;artifactId&gt;leyou&lt;/artifactId&gt;​ &lt;groupId&gt;com.leyou.parent&lt;/groupId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;/parent&gt;​ &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;​ &lt;groupId&gt;com.leyou.common&lt;/groupId&gt;​ &lt;artifactId&gt;ly-api-gateway&lt;/artifactId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;dependencies&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;!--是springboot提供的微服务检测接口，默认对外提供几个接口：/info--&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;/dependencies&gt;&lt;/project&gt;\\ ### 3.6.3.编写启动类 \\123456789101112131415161718@SpringBootApplication@EnableDiscoveryClient@EnableZuulProxypublic class LyApiGateway &#123;​ public static void main(String[] args) &#123;​ SpringApplication.run(LyApiGateway.class, args);​ &#125;&#125;\\ ### 3.6.4.配置文件 \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162server: port: 10010spring: application:​ name: api-gatewayeureka: client:​ service-url:​ defaultZone: http://127.0.0.1:10086/eureka​ registry-fetch-interval-seconds: 5 instance:​ prefer-ip-address: true​ ip-address: 127.0.0.1​ instance-id: $&#123;spring.application.name&#125;:$&#123;server.port&#125;zuul: prefix: /api # 添加路由前缀 retryable: trueribbon: ConnectTimeout: 250 # 连接超时时间(ms) ReadTimeout: 2000 # 通信超时时间(ms) OkToRetryOnAllOperations: true # 是否对所有操作重试 MaxAutoRetriesNextServer: 1 # 同一服务不同实例的重试次数 MaxAutoRetries: 1 # 同一实例的重试次数hystrix: command:​ default:​ execution:​ isolation:​ thread:​ timeoutInMillisecond: 10000 # 熔断超时时长：10000ms\\ ### 3.6.5.项目结构 目前，leyou下有两个子模块： - ly-registry：服务的注册中心（EurekaServer） - ly-api-gateway：服务网关（Zuul） 目前，服务的结构如图所示： ​ 截止到这里，我们已经把基础服务搭建完毕，为了便于开发，统一配置中心（ConfigServer）我们留待以后添加。 ## 3.7.创建商品微服务 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 既然是一个全品类的电商购物平台，那么核心自然就是商品。因此我们要搭建的第一个服务，就是商品微服务。其中会包含对于商品相关的一系列内容的管理，包括： - 商品分类管理 - 品牌管理 - 商品规格参数管理 - 商品管理 - 库存管理 我们先完成项目的搭建： ### 3.7.1.微服务的结构 因为与商品的品类相关，我们的工程命名为ly-item. 需要注意的是，我们的ly-item是一个微服务，那么将来肯定会有其它系统需要来调用服务中提供的接口，因此肯定也会使用到接口中关联的实体类。 因此这里我们需要使用聚合工程，将要提供的接口及相关实体类放到独立子工程中，以后别人引用的时候，只需要知道坐标即可。 我们会在ly-item中创建两个子工程： - ly-item-interface：主要是对外暴露的接口及相关实体类 - ly-item-service：所有业务逻辑及内部使用接口 调用关系如图所示： ### 3.7.2.创建父工程ly-item 依然是使用maven构建： 保存的位置： 不需要任何依赖，我们可以把项目打包方式设置为pom \\12345678910111213141516171819202122232425262728293031323334&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"​ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"​ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;​ &lt;parent&gt;​ &lt;artifactId&gt;leyou&lt;/artifactId&gt;​ &lt;groupId&gt;com.leyou.parent&lt;/groupId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;/parent&gt;​ &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;​ &lt;groupId&gt;com.leyou.service&lt;/groupId&gt;​ &lt;artifactId&gt;ly-item&lt;/artifactId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;!-- 打包方式为pom --&gt;​ &lt;packaging&gt;pom&lt;/packaging&gt;&lt;/project&gt;\\ ### 3.7.3.创建ly-item-interface 在ly-item工程上点击右键，选择new &gt; module: 依然是使用maven构建，注意父工程是ly-item： 注意：接下来填写的目录结构需要自己手动完成，保存到ly-item下的ly-item-interface目录中： 点击Finish完成。 此时的项目结构： ### 3.7.4.创建ly-item-service 与ly-item-interface类似，我们选择在ly-item上右键，新建module，然后填写项目信息： 填写存储位置，是在/ly-item/ly-item-service目录 点击Finish完成。 ### 3.7.5.整个微服务结构 如图所示： 我们打开ly-item的pom查看，会发现ly-item-interface和ly-item-service都已经称为module了： ### 3.7.6.添加依赖 接下来我们给ly-item-service中添加依赖： 思考一下我们需要什么？ - Eureka客户端 - web启动器 - mybatis启动器 - 通用mapper启动器 - 分页助手启动器 - 连接池，我们用默认的Hykira - mysql驱动 - 千万不能忘了，我们自己也需要ly-item-interface中的实体类 这些依赖，我们在顶级父工程：leyou中已经添加好了。所以直接引入即可： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"​ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"​ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;​ &lt;parent&gt;​ &lt;artifactId&gt;ly-item&lt;/artifactId&gt;​ &lt;groupId&gt;com.leyou.service&lt;/groupId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;/parent&gt;​ &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;​ &lt;groupId&gt;com.leyou.service&lt;/groupId&gt;​ &lt;artifactId&gt;ly-item-service&lt;/artifactId&gt;​ &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;​ &lt;dependencies&gt;​ &lt;!--Eureka客户端--&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;!--web启动器--&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;!-- mybatis启动器 --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;​ &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;​ &lt;version&gt;$&#123;mybatis.starter.version&#125;&lt;/version&gt;​ &lt;/dependency&gt;​ &lt;!-- 通用Mapper启动器 --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;​ &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;​ &lt;version&gt;$&#123;mapper.starter.version&#125;&lt;/version&gt;​ &lt;/dependency&gt;​ &lt;!-- 分页助手启动器 --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;​ &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;​ &lt;version&gt;$&#123;pageHelper.starter.version&#125;&lt;/version&gt;​ &lt;/dependency&gt;​ &lt;!-- mysql驱动 --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;mysql&lt;/groupId&gt;​ &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;​ &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;​ &lt;/dependency&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;com.leyou.service&lt;/groupId&gt;​ &lt;artifactId&gt;ly-item-interface&lt;/artifactId&gt;​ &lt;version&gt;$&#123;leyou.latest.version&#125;&lt;/version&gt;​ &lt;/dependency&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;/dependencies&gt;&lt;/project&gt;\\ ly-item-interface中需要什么我们暂时不清楚，所以先不管。 整个结构： ### 3.7.7.编写启动和配置 在整个ly-item工程中，只有ly-item-service是需要启动的。因此在其中编写启动类即可： \\12345678910111213141516@SpringBootApplication@EnableDiscoveryClientpublic class LyItemService &#123;​ public static void main(String[] args) &#123;​ SpringApplication.run(LyItemService.class, args);​ &#125;&#125;\\ 然后是全局属性文件： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546server: port: 8081spring: application:​ name: item-service datasource:​ url: jdbc:mysql://localhost:3306/heima​ username: root​ password: 123​ hikari:​ maximum-pool-size: 30​ minimum-idle: 10eureka: client:​ service-url:​ defaultZone: http://127.0.0.1:10086/eureka instance:​ lease-renewal-interval-in-seconds: 5 # 每隔5秒发送一次心跳​ lease-expiration-duration-in-seconds: 10 # 10秒不发送就过期​ prefer-ip-address: true​ ip-address: 127.0.0.1​ instance-id: $&#123;spring.application.name&#125;:$&#123;server.port&#125;\\ ## 3.8.添加商品微服务的路由规则 既然商品微服务已经创建，接下来肯定要添加路由规则到Zuul中，我们不使用默认的路由规则。 \\123456789101112zuul: prefix: /api # 添加路由前缀 retryable: true routes:​ item-service: /item/** # 将商品微服务映射到/item/**\\ ## 3.9.启动测试 我们分别启动：ly-registry，ly-api-gateway，ly-item-service 查看Eureka面板： ## 3.10.测试路由规则 为了测试路由规则是否畅通，我们是不是需要在item-service中编写一个controller接口呢？ 其实不需要，Spring提供了一个依赖：actuator 只要我们添加了actuator的依赖，它就会为我们生成一系列的访问接口： - /info - /health - /refresh - … 添加依赖： \\12345678910&lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;\\ 重启后访问Eureka控制台： 鼠标悬停在item-service上，会显示一个地址： 这就是actuator提供的接口，我们点击访问： 因为我们没有添加信息，所以是一个空的json，但是可以肯定的是：我们能够访问到item-service了。 接下来我们通过路由访问试试，根据路由规则，我们需要访问的地址是： http://127.0.0.1:10010/api/item/actuator/info ## 3.11.通用工具模块 有些工具或通用的约定内容，我们希望各个服务共享，因此需要创建一个工具模块：ly-common 使用maven来构建module： 位置信息： 结构： 目前还不需要编码。 # 4、ES6 语法指南 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 后端项目搭建完毕，接下来就是前端页面了。不过在这之前需要一些准备工作。我们需要学习ES6的语法标准。 什么是ES6？就是ECMAScript第6版标准。 ## 4.1.什么是ECMAScript？ 来看下前端的发展历程： > web1.0时代： - 最初的网页以HTML为主，是纯静态的网页。网页是只读的，信息流只能从服务的到客户端单向流通。开发人员也只关心页面的样式和内容即可。 > web2.0时代： - 1995年，网景工程师Brendan Eich 花了10天时间设计了JavaScript语言。 - 1996年，微软发布了JScript，其实是JavaScript的逆向工程实现。 - 1997年，为了统一各种不同script脚本语言，ECMA（欧洲计算机制造商协会）以JavaScript为基础，制定了ECMAscript标准规范。JavaScript和JScript都是ECMAScript的标准实现者，随后各大浏览器厂商纷纷实现了ECMAScript标准。 所以，ECMAScript是浏览器脚本语言的规范，而各种我们熟知的js语言，如JavaScript则是规范的具体实现。 ## 4.2.ECMAScript的快速发展 而后，ECMAScript就进入了快速发展期。 - 1998年6月，ECMAScript 2.0 发布。 - 1999年12月，ECMAScript 3.0 发布。这时，ECMAScript 规范本身也相对比较完善和稳定了，但是接下来的事情，就比较悲剧了。 - 2007年10月。。。。ECMAScript 4.0 草案发布。 这次的新规范，历时颇久，规范的新内容也有了很多争议。在制定ES4的时候，是分成了两个工作组同时工作的。 - 一边是以 Adobe, Mozilla, Opera 和 Google为主的 ECMAScript 4 工作组。 - 一边是以 Microsoft 和 Yahoo 为主的 ECMAScript 3.1 工作组。 ECMAScript 4 的很多主张比较激进，改动较大。而 ECMAScript 3.1 则主张小幅更新。最终经过 TC39 的会议，决定将一部分不那么激进的改动保留发布为 ECMAScript 3.1，而ES4的内容，则延续到了后来的ECMAScript5和6版本中 - 2009年12月，ECMAScript 5 发布。 - 2011年6月，ECMAScript 5.1 发布。 - 2015年6月，ECMAScript 6，也就是 ECMAScript 2015 发布了。 并且从 ECMAScript 6 开始，开始采用年号来做版本。即 ECMAScript 2015，就是ECMAScript6。 ## 4.3.ES5和6的一些新特性 我们这里只把一些常用的进行学习，更详细的大家参考：阮一峰的ES6教程 ### 4.3.1.let 和 const 命令 > var 之前，js定义变量只有一个关键字：var var有一个问题，就是定义的变量有时会莫名奇妙的成为全局变量。 例如这样的一段代码： \\12345678910for(var i = 0; i &lt; 5; i++)&#123;​ console.log(i);&#125;console.log(\"循环外：\" + i)\\ 你猜下打印的结果是什么？ > let let所声明的变量，只在let命令所在的代码块内有效。 我们把刚才的var改成let试试： \\12345678910for(let i = 0; i &lt; 5; i++)&#123;​ console.log(i);&#125;console.log(\"循环外：\" + i)\\ 结果： > const const声明的变量是常量，不能被修改 ### 4.3.2.字符串扩展 > 新的API ES6为字符串扩展了几个新的API： - includes()：返回布尔值，表示是否找到了参数字符串。 - startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。 - endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。 实验一下： > 字符串模板 ES6中提供了`来作为字符串模板标记。我们可以这么玩： 在两个`之间的部分都会被作为字符串的值，不管你任意换行，甚至加入js脚本 键盘是的1的左侧，tab的上侧，esc的正下方 ### 4.3.3.解构表达式 > 数组解构 比如有一个数组： \\1234let arr = [1,2,3]\\ 我想获取其中的值，只能通过角标。ES6可以这样： \\12345678const [x,y,z] = arr;// x，y，z将与arr中的每个位置对应来取值// 然后打印console.log(x,y,z);\\ 结果： > 对象解构 例如有个person对象： \\123456789101112const person = &#123;​ name:\"jack\",​ age:21,​ language: ['java','js','css']&#125;\\ 我们可以这么做： \\1234567891011121314// 解构表达式获取值const &#123;name,age,language&#125; = person;// 打印console.log(name);console.log(age);console.log(language);\\ 结果： 如过想要用其它变量接收，需要额外指定别名： - {name:n}：name是person中的属性名，冒号后面的n是解构后要赋值给的变量。 ### 4.3.4.函数优化 > 函数参数默认值 在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法： \\12345678910111213141516​ function add(a , b) &#123;​ // 判断b是否为空，为空就给默认值1​ b = b || 1;​ return a + b;​ &#125;​ // 传一个参数​ console.log(add(10));\\ 现在可以这么写： \\123456789101112function add(a , b = 1) &#123;​ return a + b;&#125;// 传一个参数console.log(add(10));\\ > 箭头函数 ES6中定义函数的简写方式： 一个参数时： \\123456789101112var print = function (obj) &#123;​ console.log(obj);&#125;// 简写为：var print2 = obj =&gt; console.log(obj);\\ 多个参数： \\1234567891011121314// 两个参数的情况：var sum = function (a , b) &#123;​ return a + b;&#125;// 简写为：var sum2 = (a,b) =&gt; a+b;\\ 代码不止一行，可以用{}括起来 \\12345678var sum3 = (a,b) =&gt; &#123;​ return a + b;&#125;\\ > 对象的函数属性简写 比如一个Person对象，里面有eat方法： \\12345678910111213141516171819202122232425262728let person = &#123;​ name: \"jack\",​ // 以前：​ eat: function (food) &#123;​ console.log(this.name + \"在吃\" + food);​ &#125;,​ // 箭头函数版：​ eat2: food =&gt; console.log(person.name + \"在吃\" + food),// 这里拿不到this​ // 简写版：​ eat3(food)&#123;​ console.log(this.name + \"在吃\" + food);​ &#125;&#125;\\ > 箭头函数结合解构表达式 比如有一个函数： \\123456789101112131415161718const person = &#123;​ name:\"jack\",​ age:21,​ language: ['java','js','css']&#125;function hello(person) &#123;​ console.log(\"hello,\" + person.name)&#125;\\ 如果用箭头函数和解构表达式 \\1234var hi = (&#123;name&#125;) =&gt; console.log(\"hello,\" + name);\\ ### 4.3.5.map和reduce 数组中新增了map和reduce方法。 > map map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。 举例：有一个字符串数组，我们希望转为int数组 \\12345678910let arr = ['1','20','-5','3'];console.log(arr)arr = arr.map(s =&gt; parseInt(s));console.log(arr)\\ > reduce reduce()：接收一个函数（必须）和一个初始值（可选），该函数接收两个参数： - 第一个参数是上一次reduce处理的结果 - 第二个参数是数组中要处理的下一个元素 reduce()会从左到右依次把数组中的元素用reduce处理，并把处理的结果作为下次reduce的第一个参数。如果是第一次，会把前两个元素作为计算参数，或者把用户指定的初始值作为起始参数 举例： \\1234const arr = [1,20,-5,3]\\ 没有初始值： 指定初始值： ### 4.3.6.promise 所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。 感觉跟java的Future类很像啊，有木有！ 我们可以通过Promise的构造函数来创建Promise对象，并在内部封装一个异步执行的结果。 语法： \\123456789101112131415161718const promise = new Promise(function(resolve, reject) &#123; // ... 执行异步操作 if (/* 异步操作成功 */)&#123;​ resolve(value);// 调用resolve，代表Promise将返回成功的结果 &#125; else &#123;​ reject(error);// 调用reject，代表Promise会返回失败结果 &#125;&#125;);\\ 这样，在promise中就封装了一段异步执行的结果。 如果我们想要等待异步执行完成，做一些事情，我们可以通过promise的then方法来实现,语法： \\12345678promise.then(function(value)&#123;​ // 异步执行成功后的回调&#125;);\\ 如果想要处理promise异步执行失败的事件，还可以跟上catch： \\123456789101112promise.then(function(value)&#123;​ // 异步执行成功后的回调&#125;).catch(function(error)&#123;​ // 异步执行失败后的回调&#125;)\\ 示例： \\1234567891011121314151617181920212223242526272829303132333435363738const p = new Promise(function (resolve, reject) &#123;​ // 这里我们用定时任务模拟异步​ setTimeout(() =&gt; &#123;​ const num = Math.random();​ // 随机返回成功或失败​ if (num &lt; 0.5) &#123;​ resolve(&quot;成功！num:&quot; + num)​ &#125; else &#123;​ reject(&quot;出错了！num:&quot; + num)​ &#125;​ &#125;, 300)&#125;)// 调用promisep.then(function (msg) &#123;​ console.log(msg);&#125;).catch(function (msg) &#123;​ console.log(msg);&#125;)\\ 结果： ### 4.3.7.set和map（了解） ES6提供了Set和Map的数据结构。 Set，本质与数组类似。不同在于Set中只能保存不同元素，如果元素相同会被忽略。跟java很像吧。 构造函数： \\123456789101112// Set构造函数可以接收一个数组或空let set = new Set();set.add(1);// [1]// 接收数组let set2 = new Set([2,3,4,5,5]);// 得到[2,3,4,5]\\ 普通方法： \\1234567891011121314151617181920set.add(1);// 添加set.clear();// 清空set.delete(2);// 删除指定元素set.has(2); // 判断是否存在set.keys();// 返回所有keyset.values();// 返回所有值set.entries();// 返回键值对集合// 因为set没有键值对，所有其keys、values、entries方法返回值一样的。set.size; // 元素个数。是属性，不是方法。\\ map，本质是与Object类似的结构。不同在于，Object强制规定key只能是字符串。而Map结构的key可以是任意对象。即： - object是 &lt;string,object&gt;集合 - map是&lt;object,object&gt;集合 构造函数： \\12345678910111213141516171819202122232425262728// map接收一个数组，数组中的元素是键值对数组const map = new Map([​ ['key1','value1'],​ ['key2','value2'],])// 或者接收一个setconst set = new Set([​ ['key1','value1'],​ ['key2','value2'],])const map2 = new Map(set)// 或者其它mapconst map3 = new Map(map);\\ 方法： ### 4.3.8.模块化 #### 4.3.8.1.什么是模块化 模块化就是把代码进行拆分，方便重复利用。类似java中的导包：要使用一个包，必须先导包。 而JS中没有包的概念，换来的是 模块。 模块功能主要由两个命令构成：export和import。 - export命令用于规定模块的对外接口， - import命令用于导入其他模块提供的功能。 #### 4.3.8.2.export 比如我定义一个js文件:hello.js，里面有一个对象： \\123456789101112const util = &#123;​ sum(a,b)&#123;​ return a + b;​ &#125;&#125;\\ 我可以使用export将这个对象导出： \\1234567891011121314const util = &#123;​ sum(a,b)&#123;​ return a + b;​ &#125;&#125;export util;\\ 当然，也可以简写为： \\123456789101112export const util = &#123;​ sum(a,b)&#123;​ return a + b;​ &#125;&#125;\\ export不仅可以导出对象，一切JS变量都可以导出。比如：基本类型变量、函数、数组、对象。 当要导出多个值时，还可以简写。比如我有一个文件：user.js： \\12345678var name = \"jack\"var age = 21export &#123;name,age&#125;\\ > 省略名称 上面的导出代码中，都明确指定了导出的变量名，这样其它人在导入使用时就必须准确写出变量名，否则就会出错。 因此js提供了default关键字，可以对导出的变量名进行省略 例如： \\1234567891011121314// 无需声明对象的名字export default &#123;​ sum(a,b)&#123;​ return a + b;​ &#125;&#125;\\ 这样，当使用者导入时，可以任意起名字 #### 4.3.8.3.import 使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。 例如我要使用上面导出的util： \\12345678910// 导入utilimport util from 'hello.js'// 调用util中的属性util.sum(1,2)\\ 要批量导入前面导出的name和age： \\123456import &#123;name, age&#125; from 'user.js'console.log(name + \" , 今年\"+ age +\"岁了\")\\ 但是上面的代码暂时无法测试，因为浏览器目前还不支持ES6 的导入和导出功能。除非借助于工具，把ES6 的语法进行编译降级到ES5，比如Babel-cli工具 我们暂时不做测试，大家了解即可。 ### 4.3.9.对象扩展 ES6给Object拓展了许多新的方法，如： - keys(obj)：获取对象的所有key形成的数组 - values(obj)：获取对象的所有value形成的数组 - entries(obj)：获取对象的所有key和value形成的二维数组。格式：[[k1,v1],[k2,v2],...] - assian(dest, …src) ：将多个src对象的值 拷贝到 dest中（浅拷贝）。 ### 4.3.10.数组扩展 ES6给数组新增了许多方法： - find(callback)：把数组中的元素逐个传递给函数callback执行，如果返回true，则返回该元素 - findIndex(callback)：与find类似，不过返回的是品牌到的元素的索引 - includes（callback）：与find类似，如果匹配到元素，则返回true，代表找到了。","categories":[],"tags":[],"keywords":[]},{"title":"认识微服务二","slug":"认识微服务二","date":"2019-05-03T02:37:37.000Z","updated":"2019-05-03T02:47:43.900Z","comments":true,"path":"2019/05/03/认识微服务二/","link":"","permalink":"https://mr8649.github.io/2019/05/03/认识微服务二/","excerpt":"","text":"# 0.学习目标 - 会配置Hystix熔断 - 会使用Feign进行远程调用 - 能独立搭建Zuul网关 - 能编写Zuul的拦截器 # 1.Hystix 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 ## 1.1.简介 Hystix，即熔断器。 主页：https://github.com/Netflix/Hystrix/ Hystix是Netflix开源的一个延迟和容错库，用于隔离访问远程服务、第三方库，防止出现级联失败。 ## 1.2.熔断器的工作机制： 正常工作的情况下，客户端请求调用服务API接口： 当有服务出现异常时，直接进行失败回滚，服务降级处理： 当服务繁忙时，如果服务出现异常，不是粗暴的直接报错，而是返回一个友好的提示，虽然拒绝了用户的访问，但是会返回一个结果。 这就好比去买鱼，平常超市买鱼会额外赠送杀鱼的服务。等到逢年过节，超时繁忙时，可能就不提供杀鱼服务了，这就是服务的降级。 系统特别繁忙时，一些次要服务暂时中断，优先保证主要服务的畅通，一切资源优先让给主要服务来使用，在双十一、618时，京东天猫都会采用这样的策略。 ## 1.3.动手实践 ### 1.3.1.引入依赖 首先在user-consumer中引入Hystix依赖： \\12345678910&lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;&lt;/dependency&gt;\\ ### 1.3.2.开启熔断 ### 1.3.2.改造消费者 我们改造user-consumer，添加一个用来访问的user服务的DAO，并且声明一个失败时的回滚处理函数： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546@Componentpublic class UserDao &#123;​ @Autowired​ private RestTemplate restTemplate;​ private static final Logger logger = LoggerFactory.getLogger(UserDao.class);​ @HystrixCommand(fallbackMethod = \"queryUserByIdFallback\")​ public User queryUserById(Long id)&#123;​ long begin = System.currentTimeMillis();​ String url = \"http://user-service/user/\" + id;​ User user = this.restTemplate.getForObject(url, User.class);​ long end = System.currentTimeMillis();​ // 记录访问用时：​ logger.info(\"访问用时：&#123;&#125;\", end - begin);​ return user;​ &#125;​ public User queryUserByIdFallback(Long id)&#123;​ User user = new User();​ user.setId(id);​ user.setName(\"用户信息查询出现异常！\");​ return user;​ &#125;&#125;\\ - @HystrixCommand(fallbackMethod=&quot;queryUserByIdFallback&quot;)：声明一个失败回滚处理函数queryUserByIdFallback，当queryUserById执行超时（默认是1000毫秒），就会执行fallback函数，返回错误提示。 - 为了方便查看熔断的触发时机，我们记录请求访问时间。 在原来的业务逻辑中调用这个DAO： \\12345678910111213141516171819202122232425262728@Servicepublic class UserService &#123;​ @Autowired​ private UserDao userDao;​ public List&lt;User&gt; queryUserByIds(List&lt;Long&gt; ids) &#123;​ List&lt;User&gt; users = new ArrayList&lt;&gt;();​ ids.forEach(id -&gt; &#123;​ // 我们测试多次查询，​ users.add(this.userDao.queryUserById(id));​ &#125;);​ return users;​ &#125;&#125;\\ ### 1.3.3.改造服务提供者 改造服务提供者，随机休眠一段时间，以触发熔断： \\12345678910111213141516171819202122@Servicepublic class UserService &#123;​ @Autowired​ private UserMapper userMapper;​ public User queryById(Long id) throws InterruptedException &#123;​ // 为了演示超时现象，我们在这里然线程休眠,时间随机 0~2000毫秒​ Thread.sleep(new Random().nextInt(2000));​ return this.userMapper.selectByPrimaryKey(id);​ &#125;&#125;\\ ### 1.3.4.启动测试 然后运行并查看日志： id为9、10、11的访问时间分别是： id为12的访问时间： 因此，只有12是正常访问，其它都会触发熔断，我们来查看结果： ### 1.3.5.优化 虽然熔断实现了，但是我们的重试机制似乎没有生效，是这样吗？ 其实这里是因为我们的Ribbon超时时间设置的是1000ms: 而Hystix的超时时间默认也是1000ms，因此重试机制没有被触发，而是先触发了熔断。 所以，Ribbon的超时时间一定要小于Hystix的超时时间。 我们可以通过hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds来设置Hystrix超时时间。 \\12345678910111213141516hystrix: command:​ default:​ execution:​ isolation:​ thread:​ timeoutInMillisecond: 6000 # 设置hystrix的超时时间为6000ms\\ # 2.Feign 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 在前面的学习中，我们使用了Ribbon的负载均衡功能，大大简化了远程调用时的代码： \\123456String baseUrl = \"http://user-service/user/\";User user = this.restTemplate.getForObject(baseUrl + id, User.class)\\ 如果就学到这里，你可能以后需要编写类似的大量重复代码，格式基本相同，无非参数不一样。有没有更优雅的方式，来对这些代码再次优化呢？ 这就是我们接下来要学的Feign的功能了。 ## 2.1.简介 有道词典的英文解释： 为什么叫伪装？ Feign可以把Rest的请求进行隐藏，伪装成类似SpringMVC的Controller一样。你不用再自己拼接url，拼接参数等等操作，一切都交给Feign去做。 项目主页：https://github.com/OpenFeign/feign ## 2.2.快速入门 ### 2.2.1.导入依赖 \\12345678910&lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;&lt;/dependency&gt;\\ ### 2.2.2.Feign的客户端 \\123456789101112@FeignClient(\"user-service\")public interface UserFeignClient &#123;​ @GetMapping(\"/user/&#123;id&#125;\")​ User queryUserById(@PathVariable(\"id\") Long id);&#125;\\ - 首先这是一个接口，Feign会通过动态代理，帮我们生成实现类。这点跟mybatis的mapper很像 - @FeignClient，声明这是一个Feign客户端，类似@Mapper注解。同时通过value属性指定服务名称 - 接口中的定义方法，完全采用SpringMVC的注解，Feign会根据注解帮我们生成URL，并访问获取结果 改造原来的调用逻辑，不再调用UserDao： \\12345678910111213141516171819202122232425262728@Servicepublic class UserService &#123;​ @Autowired​ private UserFeignClient userFeignClient;​ public List&lt;User&gt; queryUserByIds(List&lt;Long&gt; ids) &#123;​ List&lt;User&gt; users = new ArrayList&lt;&gt;();​ ids.forEach(id -&gt; &#123;​ // 我们测试多次查询，​ users.add(this.userFeignClient.queryUserById(id));​ &#125;);​ return users;​ &#125;&#125;\\ ### 2.2.3.开启Feign功能 我们在启动类上，添加注解，开启Feign功能 \\1234567891011121314151617181920@SpringBootApplication@EnableDiscoveryClient@EnableHystrix@EnableFeignClients // 开启Feign功能public class UserConsumerDemoApplication &#123;​ public static void main(String[] args) &#123;​ SpringApplication.run(UserConsumerDemoApplication.class, args);​ &#125;&#125;\\ - 你会发现RestTemplate的注册被我删除了。Feign中已经自动集成了Ribbon负载均衡，因此我们不需要自己定义RestTemplate了 ### 2.2.4.启动测试： 访问接口： 正常获取到了结果。 ## 2.3.负载均衡 Feign中本身已经集成了Ribbon依赖和自动配置： 因此我们不需要额外引入依赖，也不需要再注册RestTemplate对象。 另外，我们可以像上节课中讲的那样去配置Ribbon，可以通过ribbon.xx来进行全局配置。也可以通过服务名.ribbon.xx来对指定服务配置： \\12345678910111213141516user-service: ribbon:​ ConnectTimeout: 250 # 连接超时时间(ms)​ ReadTimeout: 1000 # 通信超时时间(ms)​ OkToRetryOnAllOperations: true # 是否对所有操作重试​ MaxAutoRetriesNextServer: 1 # 同一服务不同实例的重试次数​ MaxAutoRetries: 1 # 同一实例的重试次数\\ ## 2.4.Hystix支持 Feign默认也有对Hystix的集成： 只不过，默认情况下是关闭的。我们需要通过下面的参数来开启： \\12345678feign: hystrix:​ enabled: true # 开启Feign的熔断功能\\ 但是，Feign中的Fallback配置不像Ribbon中那样简单了。 1）首先，我们要定义一个类，实现刚才编写的UserFeignClient，作为fallback的处理类 \\12345678910111213141516171819202122@Componentpublic class UserFeignClientFallback implements UserFeignClient &#123;​ @Override​ public User queryUserById(Long id) &#123;​ User user = new User();​ user.setId(id);​ user.setName(\"用户查询出现异常！\");​ return user;​ &#125;&#125;\\ 2）然后在UserFeignClient中，指定刚才编写的实现类 \\123456789101112@FeignClient(value = \"user-service\", fallback = UserFeignClientFallback.class)public interface UserFeignClient &#123;​ @GetMapping(\"/user/&#123;id&#125;\")​ User queryUserById(@PathVariable(\"id\") Long id);&#125;\\ 3）重启测试： 我们关闭user-service服务，然后在页面访问： ## 2.5.请求压缩(了解) Spring Cloud Feign 支持对请求和响应进行GZIP压缩，以减少通信过程中的性能损耗。通过下面的参数即可开启请求与响应的压缩功能： \\1234567891011121314feign: compression:​ request:​ enabled: true # 开启请求压缩​ response:​ enabled: true # 开启响应压缩\\ 同时，我们也可以对请求的数据类型，以及触发压缩的大小下限进行设置： \\1234567891011121314feign: compression:​ request:​ enabled: true # 开启请求压缩​ mime-types: text/html,application/xml,application/json # 设置压缩的数据类型​ min-request-size: 2048 # 设置触发压缩的大小下限\\ 注：上面的数据类型、压缩大小下限均为默认值。 ## 2.6.日志级别(了解) 前面讲过，通过logging.level.xx=debug来设置日志级别。然而这个对Fegin客户端而言不会产生效果。因为@FeignClient注解修改的客户端在被代理时，都会创建一个新的Fegin.Logger实例。我们需要额外指定这个日志的级别才可以。 1）设置com.leyou包下的日志级别都为debug \\12345678logging: level:​ com.leyou: debug\\ 2）编写配置类，定义日志级别 \\12345678910111213141516@Configurationpublic class FeignConfig &#123;​ @Bean​ Logger.Level feignLoggerLevel()&#123;​ return Logger.Level.FULL;​ &#125;&#125;\\ 这里指定的Level级别是FULL，Feign支持4种级别： - NONE：不记录任何日志信息，这是默认值。 - BASIC：仅记录请求的方法，URL以及响应状态码和执行时间 - HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息 - FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。 3）在FeignClient中指定配置类： \\123456789101112@FeignClient(value = \"user-service\", fallback = UserFeignClientFallback.class, configuration = FeignConfig.class)public interface UserFeignClient &#123;​ @GetMapping(\"/user/&#123;id&#125;\")​ User queryUserById(@PathVariable(\"id\") Long id);&#125;\\ 4）重启项目，即可看到每次访问的日志： # 3.Zuul网关 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 通过前面的学习，使用Spring Cloud实现微服务的架构基本成型，大致是这样的： 我们使用Spring Cloud Netflix中的Eureka实现了服务注册中心以及服务注册与发现；而服务间通过Ribbon或Feign实现服务的消费以及均衡负载；通过Spring Cloud Config实现了应用多环境的外部化配置以及版本管理。为了使得服务集群更为健壮，使用Hystrix的融断机制来避免在微服务架构中个别服务出现异常时引起的故障蔓延。 在该架构中，我们的服务集群包含：内部服务Service A和Service B，他们都会注册与订阅服务至Eureka Server，而Open Service是一个对外的服务，通过均衡负载公开至服务调用方。我们把焦点聚集在对外服务这块，直接暴露我们的服务地址，这样的实现是否合理，或者是否有更好的实现方式呢？ 先来说说这样架构需要做的一些事儿以及存在的不足： - 首先，破坏了服务无状态特点。 - 为了保证对外服务的安全性，我们需要实现对服务访问的权限控制，而开放服务的权限控制机制将会贯穿并污染整个开放服务的业务逻辑，这会带来的最直接问题是，破坏了服务集群中REST API无状态的特点。 - 从具体开发和测试的角度来说，在工作中除了要考虑实际的业务逻辑之外，还需要额外考虑对接口访问的控制处理。 - 其次，无法直接复用既有接口。 - 当我们需要对一个即有的集群内访问接口，实现外部服务访问时，我们不得不通过在原有接口上增加校验逻辑，或增加一个代理调用来实现权限控制，无法直接复用原有的接口。 面对类似上面的问题，我们要如何解决呢？答案是：服务网关！ 为了解决上面这些问题，我们需要将权限控制这样的东西从我们的服务单元中抽离出去，而最适合这些逻辑的地方就是处于对外访问最前端的地方，我们需要一个更强大一些的均衡负载器的 服务网关。 服务网关是微服务架构中一个不可或缺的部分。通过服务网关统一向外系统提供REST API的过程中，除了具备服务路由、均衡负载功能之外，它还具备了权限控制等功能。Spring Cloud Netflix中的Zuul就担任了这样的一个角色，为微服务架构提供了前门保护的作用，同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的可复用性和可测试性。 ## 3.1.简介 官网：https://github.com/Netflix/zuul Zuul：维基百科： 电影《捉鬼敢死队》中的怪兽，Zuul，在纽约引发了巨大骚乱。 事实上，在微服务架构中，Zuul就是守门的大Boss！一夫当关，万夫莫开！ ## 3.2.Zuul加入后的架构 - 不管是来自于客户端（PC或移动端）的请求，还是服务内部调用。一切对服务的请求都会经过Zuul这个网关，然后再由网关来实现 鉴权、动态路由等等操作。Zuul就是我们服务的统一入口。 ## 3.3.快速入门 ### 3.3.1.新建工程 填写基本信息： 添加Zuul依赖： ### 3.3.2.编写启动类 通过@EnableZuulProxy注解开启Zuul的功能： \\12345678910111213141516@SpringBootApplication@EnableZuulProxy // 开启Zuul的网关功能public class ZuulDemoApplication &#123; public static void main(String[] args) &#123;​ SpringApplication.run(ZuulDemoApplication.class, args); &#125;&#125;\\ ### 3.3.3.编写配置 \\123456789101112server: port: 10010 #服务端口spring: application: ​ name: api-gateway #指定服务名\\ ### 3.3.4.编写路由规则 我们需要用Zuul来代理user-service服务，先看一下控制面板中的服务状态： - ip为：127.0.0.1 - 端口为：8081 映射规则： \\123456789101112zuul: routes:​ user-service: # 这里是路由id，随意写​ path: /user-service/** # 这里是映射路径​ url: http://127.0.0.1:8081 # 映射路径对应的实际url地址\\ 我们将符合path 规则的一切请求，都代理到 url参数指定的地址 本例中，我们将 /user-service/**开头的请求，代理到http://127.0.0.1:8081 ### 3.3.5.启动测试： 访问的路径中需要加上配置规则的映射路径，我们访问：http://127.0.0.1:8081/user-service/user/10 ## 3.4.面向服务的路由 在刚才的路由规则中，我们把路径对应的服务地址写死了！如果同一服务有多个实例的话，这样做显然就不合理了。 我们应该根据服务的名称，去Eureka注册中心查找 服务对应的所有实例列表，然后进行动态路由才对！ ### 3.4.1.添加Eureka客户端依赖 \\12345678910&lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt;\\ ### 3.4.2.开启Eureka客户端发现功能 \\123456789101112131415161718@SpringBootApplication@EnableZuulProxy // 开启Zuul的网关功能@EnableDiscoveryClientpublic class ZuulDemoApplication &#123; public static void main(String[] args) &#123;​ SpringApplication.run(ZuulDemoApplication.class, args); &#125;&#125;\\ ### 3.4.3.添加Eureka配置，获取服务信息 \\123456789101112131415161718eureka: client:​ registry-fetch-interval-seconds: 5 # 获取服务列表的周期：5s​ service-url:​ defaultZone: http://127.0.0.1:10086/eureka instance:​ prefer-ip-address: true​ ip-address: 127.0.0.1\\ ### 3.4.4.修改映射配置，通过服务名称获取 因为已经有了Eureka客户端，我们可以从Eureka获取服务的地址信息，因此映射时无需指定IP地址，而是通过服务名称来访问，而且Zuul已经集成了Ribbon的负载均衡功能。 \\123456789101112zuul: routes:​ user-service: # 这里是路由id，随意写​ path: /user-service/** # 这里是映射路径​ serviceId: user-service # 指定服务名称\\ ### 3.4.5.启动测试 再次启动，这次Zuul进行代理时，会利用Ribbon进行负载均衡访问： 日志中可以看到使用了负载均衡器： ## 3.5.简化的路由配置 在刚才的配置中，我们的规则是这样的： - zuul.routes.&lt;route&gt;.path=/xxx/**： 来指定映射路径。&lt;route&gt;是自定义的路由名 - zuul.routes.&lt;route&gt;.serviceId=/user-service：来指定服务名。 而大多数情况下，我们的&lt;route&gt;路由名称往往和 服务名会写成一样的。因此Zuul就提供了一种简化的配置语法：zuul.routes.&lt;serviceId&gt;=&lt;path&gt; 比方说上面我们关于user-service的配置可以简化为一条： \\12345678zuul: routes:​ user-service: /user-service/** # 这里是映射路径\\ 省去了对服务名称的配置。 ## 3.6.默认的路由规则 在使用Zuul的过程中，上面讲述的规则已经大大的简化了配置项。但是当服务较多时，配置也是比较繁琐的。因此Zuul就指定了默认的路由规则： - 默认情况下，一切服务的映射路径就是服务名本身。 - 例如服务名为：user-service，则默认的映射路径就是：/user-service/** 也就是说，刚才的映射规则我们完全不配置也是OK的，不信就试试看。 ## 3.7.路由前缀 配置示例： \\1234567891011121314zuul: prefix: /api # 添加路由前缀 routes:​ user-service: # 这里是路由id，随意写​ path: /user-service/** # 这里是映射路径​ service-id: user-service # 指定服务名称\\ 我们通过zuul.prefix=/api来指定了路由的前缀，这样在发起请求时，路径就要以/api开头。 路径/api/user-service/user/1将会被代理到/user-service/user/1 ## 3.8.过滤器 Zuul作为网关的其中一个重要功能，就是实现请求的鉴权。而这个动作我们往往是通过Zuul提供的过滤器来实现的。 ### 3.8.1.ZuulFilter ZuulFilter是过滤器的顶级父类。在这里我们看一下其中定义的4个最重要的方法： \\12345678910111213141516public abstract ZuulFilter implements IZuulFilter&#123;​ abstract public String filterType();​ abstract public int filterOrder();​ ​ boolean shouldFilter();// 来自IZuulFilter​ Object run() throws ZuulException;// IZuulFilter&#125;\\ - shouldFilter：返回一个Boolean值，判断该过滤器是否需要执行。返回true执行，返回false不执行。 - run：过滤器的具体业务逻辑。 - filterType：返回字符串，代表过滤器的类型。包含以下4种： - pre：请求在被路由之前执行 - routing：在路由请求时调用 - post：在routing和errror过滤器之后调用 - error：处理请求时发生错误调用 - filterOrder：通过返回的int值来定义过滤器的执行顺序，数字越小优先级越高。 ### 3.8.2.过滤器执行生命周期： 这张是Zuul官网提供的请求生命周期图，清晰的表现了一个请求在各个过滤器的执行顺序。 - 正常流程： - 请求到达首先会经过pre类型过滤器，而后到达routing类型，进行路由，请求就到达真正的服务提供者，执行请求，返回结果后，会到达post过滤器。而后返回响应。 - 异常流程： - 整个过程中，pre或者routing过滤器出现异常，都会直接进入error过滤器，再error处理完毕后，会将请求交给POST过滤器，最后返回给用户。 - 如果是error过滤器自己出现异常，最终也会进入POST过滤器，而后返回。 - 如果是POST过滤器出现异常，会跳转到error过滤器，但是与pre和routing不同的时，请求不会再到达POST过滤器了。 所有内置过滤器列表： ### 3.8.3.使用场景 场景非常多： - 请求鉴权：一般放在pre类型，如果发现没有访问权限，直接就拦截了 - 异常处理：一般会在error类型和post类型过滤器中结合来处理。 - 服务调用时长统计：pre和post结合使用。 ## 3.9.自定义过滤器 接下来我们来自定义一个过滤器，模拟一个登录的校验。基本逻辑：如果请求中有access-token参数，则认为请求有效，放行。 ### 3.9.1.定义过滤器类 \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576@Componentpublic class LoginFilter extends ZuulFilter&#123;​ @Override​ public String filterType() &#123;​ // 登录校验，肯定是在前置拦截​ return \"pre\";​ &#125;​ @Override​ public int filterOrder() &#123;​ // 顺序设置为1​ return 1;​ &#125;​ @Override​ public boolean shouldFilter() &#123;​ // 返回true，代表过滤器生效。​ return true;​ &#125;​ @Override​ public Object run() throws ZuulException &#123;​ // 登录校验逻辑。​ // 1）获取Zuul提供的请求上下文对象​ RequestContext ctx = RequestContext.getCurrentContext();​ // 2) 从上下文中获取request对象​ HttpServletRequest req = ctx.getRequest();​ // 3) 从请求中获取token​ String token = req.getParameter(\"access-token\");​ // 4) 判断​ if(token == null || \"\".equals(token.trim()))&#123;​ // 没有token，登录校验失败，拦截​ ctx.setSendZuulResponse(false);​ // 返回401状态码。也可以考虑重定向到登录页。​ ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());​ &#125;​ // 校验通过，可以考虑把用户信息放入上下文，继续向后执行​ return null;​ &#125;&#125;\\ ### 3.9.2.测试 没有token参数时，访问失败： 添加token参数后： ## 3.10.负载均衡和熔断 Zuul中默认就已经集成了Ribbon负载均衡和Hystix熔断机制。但是所有的超时策略都是走的默认值，比如熔断超时时间只有1S，很容易就触发了。因此建议我们手动进行配置： \\1234567891011121314151617181920212223242526272829303132zuul: retryable: trueribbon: ConnectTimeout: 250 # 连接超时时间(ms) ReadTimeout: 2000 # 通信超时时间(ms) OkToRetryOnAllOperations: true # 是否对所有操作重试 MaxAutoRetriesNextServer: 2 # 同一服务不同实例的重试次数 MaxAutoRetries: 1 # 同一实例的重试次数hystrix: command:​ default:​ execution:​ isolation:​ thread:​ timeoutInMillisecond: 6000 # 熔断超时时长：6000ms\\","categories":[],"tags":[],"keywords":[]},{"title":"","slug":"day04-乐优商城项目搭建","date":"2019-05-03T02:33:41.726Z","updated":"2019-05-03T02:33:41.727Z","comments":true,"path":"2019/05/03/day04-乐优商城项目搭建/","link":"","permalink":"https://mr8649.github.io/2019/05/03/day04-乐优商城项目搭建/","excerpt":"","text":"0.学习目标 了解电商行业 了解乐优商城项目结构 能独立搭建项目基本框架 能参考使用ES6的新语法 1.了解电商行业学习电商项目，自然要先了解这个行业，所以我们首先来聊聊电商行业 1.1.项目分类主要从需求方、盈利模式、技术侧重点这三个方面来看它们的不同 1.1.1.传统项目各种企业里面用的管理系统（ERP、HR、OA、CRM、物流管理系统。。。。。。。） 需求方：公司、企业内部 盈利模式：项目本身卖钱 技术侧重点：业务功能 1.1.2.互联网项目门户网站、电商网站：baidu.com、qq.com、taobao.com、jd.com …… 需求方：广大用户群体 盈利模式：虚拟币、增值服务、广告收益…… 技术侧重点：网站性能、业务功能 而我们今天要聊的就是互联网项目中的重要角色：电商 1.2.电商行业的发展1.2.1.钱景近年来，中国的电子商务快速发展，交易额连创新高，电子商务在各领域的应用不断拓展和深化、相关服务业蓬勃发展、支撑体系不断健全完善、创新的动力和能力不断增强。电子商务正在与实体经济深度融合，进入规模性发展阶段，对经济社会生活的影响不断增大，正成为我国经济发展的新引擎。 中国电子商务研究中心数据显示，截止到 2012 年底，中国电子商务市场交易规模达 7.85万亿人民币，同比增长 30.83%。其中，B2B 电子商务交易额达 6.25 万亿，同比增长 27%。而 2011 年全年，中国电子商务市场交易额达 6 万亿人民币，同比增长 33%，占 GDP 比重上升到 13%；2012 年，电子商务占 GDP 的比重已经高达 15%。 ![1525686041466](assets/1525686041466.png) 1.2.2.数据来看看双十一的成交数据： 2016双11开场30分钟，创造每秒交易峰值17.5万笔，每秒支付峰值12万笔的新纪录。菜鸟单日物流订单量超过4.67亿，创历史新高。 1.2.3.技术特点从上面的数据我们不仅要看到钱，更要看到背后的技术实力。正是得益于电商行业的高强度并发压力，促使了BAT等巨头们的技术进步。电商行业有些什么特点呢？ 技术范围广 技术新 高并发（分布式、静态化技术、缓存技术、异步并发、池化、队列） 高可用（集群、负载均衡、限流、降级、熔断） 数据量大 业务复杂 数据安全 1.3.常见电商模式电商行业的一些常见模式： B2C：商家对个人，如：亚马逊、当当等 C2C平台：个人对个人，如：咸鱼、拍拍网、ebay B2B平台：商家对商家，如：阿里巴巴、八方资源网等 O2O：线上和线下结合，如：饿了么、电影票、团购等 P2P：在线金融，贷款，如：网贷之家、人人聚财等。 B2C平台：天猫、京东、一号店等 1.4.一些专业术语 SaaS：软件即服务 SOA：面向服务 RPC：远程过程调用 RMI：远程方法调用 PV：(page view)，即页面浏览量； 用户每1次对网站中的每个网页访问均被记录1次。用户对同一页面的多次访问，访问量累计 UV：(unique visitor)，独立访客 指访问某个站点或点击某条新闻的不同IP地址的人数。在同一天内，uv只记录第一次进入网站的具有独立IP的访问者，在同一天内再次访问该网站则不计数。 PV与带宽： 计算带宽大小需要关注两个指标：峰值流量和页面的平均大小。 计算公式是：网站带宽= ( PV 平均页面大小（单位MB） 8 )/统计时间（换算到秒） 为什么要乘以8？ 网站大小为单位是字节(Byte)，而计算带宽的单位是bit，1Byte=8bit 这个计算的是平均带宽，高峰期还需要扩大一定倍数 PV、QPS、并发 QPS：每秒处理的请求数量。8000/s 比如你的程序处理一个请求平均需要0.1S，那么1秒就可以处理10个请求。QPS自然就是10，多线程情况下，这个数字可能就会有所增加。 由PV和QPS如何需要部署的服务器数量？ 根据二八原则，80%的请求集中在20%的时间来计算峰值压力： （每日PV 80%） / （3600s 24 20%） 每个页面的请求数 = 每个页面每秒的请求数量 然后除以服务器的QPS值，即可计算得出需要部署的服务器数量 1.5.项目开发流程项目经理：管人 产品经理：设计需求原型 测试： 前端：大前端。node 后端： 移动端： 项目开发流程图： ​ 公司现状： ​ 2.乐优商城介绍吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 2.1.项目介绍 乐优商城是一个全品类的电商购物网站（B2C）。 用户可以在线购买商品、加入购物车、下单、秒杀商品 可以品论已购买商品 管理员可以在后台管理商品的上下架、促销活动 管理员可以监控商品销售状况 客服可以在后台处理退款操作 希望未来3到5年可以支持千万用户的使用 2.2.系统架构2.2.1.架构图乐优商城架构缩略图，大图请参考课前资料： 2.2.2.系统架构解读整个乐优商城可以分为两部分：后台管理系统、前台门户系统。 后台管理： 后台系统主要包含以下功能： 商品管理，包括商品分类、品牌、商品规格等信息的管理 销售管理，包括订单统计、订单退款处理、促销活动生成等 用户管理，包括用户控制、冻结、解锁等 权限管理，整个网站的权限控制，采用JWT鉴权方案，对用户及API进行权限控制 统计，各种数据的统计分析展示 后台系统会采用前后端分离开发，而且整个后台管理系统会使用Vue.js框架搭建出单页应用（SPA）。 预览图： 前台门户 前台门户面向的是客户，包含与客户交互的一切功能。例如： 搜索商品 加入购物车 下单 评价商品等等 前台系统我们会使用Thymeleaf模板引擎技术来完成页面开发。出于SEO优化的考虑，我们将不采用单页应用。 无论是前台还是后台系统，都共享相同的微服务集群，包括： 商品微服务：商品及商品分类、品牌、库存等的服务 搜索微服务：实现搜索功能 订单微服务：实现订单相关 购物车微服务：实现购物车相关功能 用户中心：用户的登录注册等功能 Eureka注册中心 Zuul网关服务 Spring Cloud Config配置中心 … 3.项目搭建吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 3.1.技术选型前端技术： 基础的HTML、CSS、JavaScript（基于ES6标准） JQuery Vue.js 2.0以及基于Vue的框架：Vuetify 前端构建工具：WebPack 前端安装包工具：NPM Vue脚手架：Vue-cli Vue路由：vue-router ajax框架：axios 基于Vue的富文本框架：quill-editor 后端技术： 基础的SpringMVC、Spring 5.0和MyBatis3 Spring Boot 2.0.1版本 Spring Cloud 最新版 Finchley.RC1 Redis-4.0 RabbitMQ-3.4 Elasticsearch-5.6.8 nginx-1.10.2： FastDFS - 5.0.8 MyCat Thymeleaf 3.2.开发环境为了保证开发环境的统一，希望每个人都按照我的环境来配置： IDE：我们使用Idea 2017.3 版本 JDK：统一使用JDK1.8 项目构建：maven3.3.9以上版本即可 版本控制工具：git idea大家可以在我的课前资料中找到。另外，使用帮助大家可以参考课前资料的《idea使用指南.md》 3.3.域名我们在开发的过程中，为了保证以后的生产、测试环境统一。尽量都采用域名来访问项目。 一级域名：www.leyou.com 二级域名：manage.leyou.com , api.leyou.com 我们可以通过switchhost工具来修改自己的host对应的地址，只要把这些域名指向127.0.0.1，那么跟你用localhost的效果是完全一样的。 switchhost可以去课前资料寻找。 3.4.创建父工程创建统一的父工程：leyou，用来管理依赖及其版本，注意是创建project，而不是moudle 填写项目信息： 注意： 父工程不需要代码，只是管理依赖，因此我们不选择任何SpringCloud的依赖 跳过依赖选择。 填写保存的位置信息： 然后将pom文件修改成我这个样子： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.leyou.parent&lt;/groupId&gt; &lt;artifactId&gt;leyou&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;name&gt;leyou&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.1.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Finchley.RC1&lt;/spring-cloud.version&gt; &lt;mybatis.starter.version&gt;1.3.2&lt;/mybatis.starter.version&gt; &lt;mapper.starter.version&gt;2.0.2&lt;/mapper.starter.version&gt; &lt;druid.starter.version&gt;1.1.9&lt;/druid.starter.version&gt; &lt;mysql.version&gt;5.1.32&lt;/mysql.version&gt; &lt;pageHelper.starter.version&gt;1.2.3&lt;/pageHelper.starter.version&gt; &lt;leyou.latest.version&gt;1.0.0-SNAPSHOT&lt;/leyou.latest.version&gt; &lt;fastDFS.client.version&gt;1.26.1-RELEASE&lt;/fastDFS.client.version&gt; &lt;/properties&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!-- springCloud --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- mybatis启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.starter.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 通用Mapper启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;mapper.starter.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 分页助手启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;pageHelper.starter.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- mysql驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--FastDFS客户端--&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.tobato&lt;/groupId&gt; &lt;artifactId&gt;fastdfs-client&lt;/artifactId&gt; &lt;version&gt;$&#123;fastDFS.client.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;spring-milestones&lt;/id&gt; &lt;name&gt;Spring Milestones&lt;/name&gt; &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt;&lt;/project&gt; 可以发现，我们在父工程中引入了SpringCloud等很多以后需要用到的依赖，以后创建的子工程就不需要自己引入了。 最后，删除自动生成的LeyouApplication启动类、测试类以及application.properties文件，我们不需要。 3.5.创建EurekaServer3.5.1.创建工程这个大家应该比较熟悉了。 我们的注册中心，起名为：ly-registry 这次我们就不Spring使用提供的脚手架了。直接创建maven项目，自然会继承父类的依赖： 选择新建module： ​ 选择maven安装，但是不要选择骨架： 然后填写项目坐标，我们的项目名称为ly-registry: 选择安装目录，因为是聚合项目，目录应该是在父工程leyou的下面： 3.5.2.添加依赖添加EurekaServer的依赖： 12345678910111213141516171819202122&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;leyou&lt;/artifactId&gt; &lt;groupId&gt;com.leyou.parent&lt;/groupId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.leyou.common&lt;/groupId&gt; &lt;artifactId&gt;ly-registry&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 3.5.3.编写启动类1234567@SpringBootApplication@EnableEurekaServerpublic class LyRegistry &#123; public static void main(String[] args) &#123; SpringApplication.run(LyRegistry.class, args); &#125;&#125; 3.5.4.配置文件1234567891011121314server: port: 10086spring: application: name: ly-registryeureka: client: fetch-registry: false register-with-eureka: false service-url: defaultZone: http://127.0.0.1:$&#123;server.port&#125;/eureka server: enable-self-preservation: false # 关闭自我保护 eviction-interval-timer-in-ms: 5000 # 每隔5秒进行一次服务列表清理 3.5.5.项目的结构：目前，整个项目的结构如图： 3.6.创建Zuul网关3.6.1.创建工程与上面类似，选择maven方式创建Module，然后填写项目名称，我们命名为：ly-api-gateway 填写保存的目录： 3.6.2.添加依赖这里我们需要添加Zuul和EurekaClient的依赖： 12345678910111213141516171819202122232425262728293031&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;leyou&lt;/artifactId&gt; &lt;groupId&gt;com.leyou.parent&lt;/groupId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.leyou.common&lt;/groupId&gt; &lt;artifactId&gt;ly-api-gateway&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--是springboot提供的微服务检测接口，默认对外提供几个接口：/info--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 3.6.3.编写启动类12345678@SpringBootApplication@EnableDiscoveryClient@EnableZuulProxypublic class LyApiGateway &#123; public static void main(String[] args) &#123; SpringApplication.run(LyApiGateway.class, args); &#125;&#125; 3.6.4.配置文件123456789101112131415161718192021222324252627282930server: port: 10010spring: application: name: api-gatewayeureka: client: service-url: defaultZone: http://127.0.0.1:10086/eureka registry-fetch-interval-seconds: 5 instance: prefer-ip-address: true ip-address: 127.0.0.1 instance-id: $&#123;spring.application.name&#125;:$&#123;server.port&#125;zuul: prefix: /api # 添加路由前缀 retryable: trueribbon: ConnectTimeout: 250 # 连接超时时间(ms) ReadTimeout: 2000 # 通信超时时间(ms) OkToRetryOnAllOperations: true # 是否对所有操作重试 MaxAutoRetriesNextServer: 1 # 同一服务不同实例的重试次数 MaxAutoRetries: 1 # 同一实例的重试次数hystrix: command: default: execution: isolation: thread: timeoutInMillisecond: 10000 # 熔断超时时长：10000ms 3.6.5.项目结构目前，leyou下有两个子模块： ly-registry：服务的注册中心（EurekaServer） ly-api-gateway：服务网关（Zuul） 目前，服务的结构如图所示： ![1525709241440](assets/1525709241440.png) 截止到这里，我们已经把基础服务搭建完毕，为了便于开发，统一配置中心（ConfigServer）我们留待以后添加。 3.7.创建商品微服务吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 既然是一个全品类的电商购物平台，那么核心自然就是商品。因此我们要搭建的第一个服务，就是商品微服务。其中会包含对于商品相关的一系列内容的管理，包括： 商品分类管理 品牌管理 商品规格参数管理 商品管理 库存管理 我们先完成项目的搭建： 3.7.1.微服务的结构因为与商品的品类相关，我们的工程命名为ly-item. 需要注意的是，我们的ly-item是一个微服务，那么将来肯定会有其它系统需要来调用服务中提供的接口，因此肯定也会使用到接口中关联的实体类。 因此这里我们需要使用聚合工程，将要提供的接口及相关实体类放到独立子工程中，以后别人引用的时候，只需要知道坐标即可。 我们会在ly-item中创建两个子工程： ly-item-interface：主要是对外暴露的接口及相关实体类 ly-item-service：所有业务逻辑及内部使用接口 调用关系如图所示： 3.7.2.创建父工程ly-item依然是使用maven构建： 保存的位置： 不需要任何依赖，我们可以把项目打包方式设置为pom 1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;leyou&lt;/artifactId&gt; &lt;groupId&gt;com.leyou.parent&lt;/groupId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.leyou.service&lt;/groupId&gt; &lt;artifactId&gt;ly-item&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;!-- 打包方式为pom --&gt; &lt;packaging&gt;pom&lt;/packaging&gt;&lt;/project&gt; 3.7.3.创建ly-item-interface在ly-item工程上点击右键，选择new &gt; module: 依然是使用maven构建，注意父工程是ly-item： 注意：接下来填写的目录结构需要自己手动完成，保存到ly-item下的ly-item-interface目录中： 点击Finish完成。 此时的项目结构： ​ 3.7.4.创建ly-item-service与ly-item-interface类似，我们选择在ly-item上右键，新建module，然后填写项目信息： 填写存储位置，是在/ly-item/ly-item-service目录 点击Finish完成。 3.7.5.整个微服务结构如图所示： ​ 我们打开ly-item的pom查看，会发现ly-item-interface和ly-item-service都已经称为module了： ​ 3.7.6.添加依赖接下来我们给ly-item-service中添加依赖： 思考一下我们需要什么？ Eureka客户端 web启动器 mybatis启动器 通用mapper启动器 分页助手启动器 连接池，我们用默认的Hykira mysql驱动 千万不能忘了，我们自己也需要ly-item-interface中的实体类 这些依赖，我们在顶级父工程：leyou中已经添加好了。所以直接引入即可： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;ly-item&lt;/artifactId&gt; &lt;groupId&gt;com.leyou.service&lt;/groupId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.leyou.service&lt;/groupId&gt; &lt;artifactId&gt;ly-item-service&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!--Eureka客户端--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--web启动器--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- mybatis启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.starter.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 通用Mapper启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;mapper.starter.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 分页助手启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;pageHelper.starter.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- mysql驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.leyou.service&lt;/groupId&gt; &lt;artifactId&gt;ly-item-interface&lt;/artifactId&gt; &lt;version&gt;$&#123;leyou.latest.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; ly-item-interface中需要什么我们暂时不清楚，所以先不管。 整个结构： 3.7.7.编写启动和配置在整个ly-item工程中，只有ly-item-service是需要启动的。因此在其中编写启动类即可： 1234567@SpringBootApplication@EnableDiscoveryClientpublic class LyItemService &#123; public static void main(String[] args) &#123; SpringApplication.run(LyItemService.class, args); &#125;&#125; 然后是全局属性文件： 12345678910111213141516171819202122server: port: 8081spring: application: name: item-service datasource: url: jdbc:mysql://localhost:3306/heima username: root password: 123 hikari: maximum-pool-size: 30 minimum-idle: 10eureka: client: service-url: defaultZone: http://127.0.0.1:10086/eureka instance: lease-renewal-interval-in-seconds: 5 # 每隔5秒发送一次心跳 lease-expiration-duration-in-seconds: 10 # 10秒不发送就过期 prefer-ip-address: true ip-address: 127.0.0.1 instance-id: $&#123;spring.application.name&#125;:$&#123;server.port&#125; 3.8.添加商品微服务的路由规则既然商品微服务已经创建，接下来肯定要添加路由规则到Zuul中，我们不使用默认的路由规则。 12345zuul: prefix: /api # 添加路由前缀 retryable: true routes: item-service: /item/** # 将商品微服务映射到/item/** 3.9.启动测试我们分别启动：ly-registry，ly-api-gateway，ly-item-service 查看Eureka面板： 3.10.测试路由规则为了测试路由规则是否畅通，我们是不是需要在item-service中编写一个controller接口呢？ 其实不需要，Spring提供了一个依赖：actuator 只要我们添加了actuator的依赖，它就会为我们生成一系列的访问接口： /info /health /refresh … 添加依赖： 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt; 重启后访问Eureka控制台： 鼠标悬停在item-service上，会显示一个地址： 这就是actuator提供的接口，我们点击访问： 因为我们没有添加信息，所以是一个空的json，但是可以肯定的是：我们能够访问到item-service了。 接下来我们通过路由访问试试，根据路由规则，我们需要访问的地址是： http://127.0.0.1:10010/api/item/actuator/info 3.11.通用工具模块有些工具或通用的约定内容，我们希望各个服务共享，因此需要创建一个工具模块：ly-common 使用maven来构建module： 位置信息： 结构： 目前还不需要编码。 4、ES6 语法指南吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 后端项目搭建完毕，接下来就是前端页面了。不过在这之前需要一些准备工作。我们需要学习ES6的语法标准。 什么是ES6？就是ECMAScript第6版标准。 4.1.什么是ECMAScript？来看下前端的发展历程： web1.0时代： 最初的网页以HTML为主，是纯静态的网页。网页是只读的，信息流只能从服务的到客户端单向流通。开发人员也只关心页面的样式和内容即可。 web2.0时代： 1995年，网景工程师Brendan Eich 花了10天时间设计了JavaScript语言。 1996年，微软发布了JScript，其实是JavaScript的逆向工程实现。 1997年，为了统一各种不同script脚本语言，ECMA（欧洲计算机制造商协会）以JavaScript为基础，制定了ECMAscript标准规范。JavaScript和JScript都是ECMAScript的标准实现者，随后各大浏览器厂商纷纷实现了ECMAScript标准。 所以，ECMAScript是浏览器脚本语言的规范，而各种我们熟知的js语言，如JavaScript则是规范的具体实现。 4.2.ECMAScript的快速发展而后，ECMAScript就进入了快速发展期。 1998年6月，ECMAScript 2.0 发布。 1999年12月，ECMAScript 3.0 发布。这时，ECMAScript 规范本身也相对比较完善和稳定了，但是接下来的事情，就比较悲剧了。 2007年10月。。。。ECMAScript 4.0 草案发布。 这次的新规范，历时颇久，规范的新内容也有了很多争议。在制定ES4的时候，是分成了两个工作组同时工作的。 一边是以 Adobe, Mozilla, Opera 和 Google为主的 ECMAScript 4 工作组。 一边是以 Microsoft 和 Yahoo 为主的 ECMAScript 3.1 工作组。 ECMAScript 4 的很多主张比较激进，改动较大。而 ECMAScript 3.1 则主张小幅更新。最终经过 TC39 的会议，决定将一部分不那么激进的改动保留发布为 ECMAScript 3.1，而ES4的内容，则延续到了后来的ECMAScript5和6版本中 2009年12月，ECMAScript 5 发布。 2011年6月，ECMAScript 5.1 发布。 2015年6月，ECMAScript 6，也就是 ECMAScript 2015 发布了。 并且从 ECMAScript 6 开始，开始采用年号来做版本。即 ECMAScript 2015，就是ECMAScript6。 4.3.ES5和6的一些新特性我们这里只把一些常用的进行学习，更详细的大家参考：阮一峰的ES6教程 4.3.1.let 和 const 命令 var 之前，js定义变量只有一个关键字：var var有一个问题，就是定义的变量有时会莫名奇妙的成为全局变量。 例如这样的一段代码： 1234for(var i = 0; i &lt; 5; i++)&#123; console.log(i);&#125;console.log(\"循环外：\" + i) 你猜下打印的结果是什么？ let let所声明的变量，只在let命令所在的代码块内有效。 我们把刚才的var改成let试试： 1234for(let i = 0; i &lt; 5; i++)&#123; console.log(i);&#125;console.log(\"循环外：\" + i) 结果： const const声明的变量是常量，不能被修改 4.3.2.字符串扩展 新的API ES6为字符串扩展了几个新的API： includes()：返回布尔值，表示是否找到了参数字符串。 startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。 endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。 实验一下： 字符串模板 ES6中提供了`来作为字符串模板标记。我们可以这么玩： 在两个`之间的部分都会被作为字符串的值，不管你任意换行，甚至加入js脚本 键盘是的1的左侧，tab的上侧，esc的正下方 4.3.3.解构表达式 数组解构 比如有一个数组： 1let arr = [1,2,3] 我想获取其中的值，只能通过角标。ES6可以这样： 123const [x,y,z] = arr;// x，y，z将与arr中的每个位置对应来取值// 然后打印console.log(x,y,z); 结果： 对象解构 例如有个person对象： 12345const person = &#123; name:\"jack\", age:21, language: ['java','js','css']&#125; 我们可以这么做： 123456// 解构表达式获取值const &#123;name,age,language&#125; = person;// 打印console.log(name);console.log(age);console.log(language); 结果： 如过想要用其它变量接收，需要额外指定别名： {name:n}：name是person中的属性名，冒号后面的n是解构后要赋值给的变量。 4.3.4.函数优化 函数参数默认值 在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法： 1234567function add(a , b) &#123; // 判断b是否为空，为空就给默认值1 b = b || 1; return a + b;&#125;// 传一个参数console.log(add(10)); 现在可以这么写： 12345function add(a , b = 1) &#123; return a + b;&#125;// 传一个参数console.log(add(10)); 箭头函数 ES6中定义函数的简写方式： 一个参数时： 12345var print = function (obj) &#123; console.log(obj);&#125;// 简写为：var print2 = obj =&gt; console.log(obj); 多个参数： 123456// 两个参数的情况：var sum = function (a , b) &#123; return a + b;&#125;// 简写为：var sum2 = (a,b) =&gt; a+b; 代码不止一行，可以用{}括起来 123var sum3 = (a,b) =&gt; &#123; return a + b;&#125; 对象的函数属性简写 比如一个Person对象，里面有eat方法： 12345678910111213let person = &#123; name: \"jack\", // 以前： eat: function (food) &#123; console.log(this.name + \"在吃\" + food); &#125;, // 箭头函数版： eat2: food =&gt; console.log(person.name + \"在吃\" + food),// 这里拿不到this // 简写版： eat3(food)&#123; console.log(this.name + \"在吃\" + food); &#125;&#125; 箭头函数结合解构表达式 比如有一个函数： 123456789const person = &#123; name:\"jack\", age:21, language: ['java','js','css']&#125;function hello(person) &#123; console.log(\"hello,\" + person.name)&#125; 如果用箭头函数和解构表达式 1var hi = (&#123;name&#125;) =&gt; console.log(\"hello,\" + name); 4.3.5.map和reduce数组中新增了map和reduce方法。 map map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。 举例：有一个字符串数组，我们希望转为int数组 123456let arr = ['1','20','-5','3'];console.log(arr)arr = arr.map(s =&gt; parseInt(s));console.log(arr) reduce reduce()：接收一个函数（必须）和一个初始值（可选），该函数接收两个参数： 第一个参数是上一次reduce处理的结果 第二个参数是数组中要处理的下一个元素 reduce()会从左到右依次把数组中的元素用reduce处理，并把处理的结果作为下次reduce的第一个参数。如果是第一次，会把前两个元素作为计算参数，或者把用户指定的初始值作为起始参数 举例： 1const arr = [1,20,-5,3] 没有初始值： 指定初始值： 4.3.6.promise所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。 感觉跟java的Future类很像啊，有木有！ 我们可以通过Promise的构造函数来创建Promise对象，并在内部封装一个异步执行的结果。 语法： 123456789const promise = new Promise(function(resolve, reject) &#123; // ... 执行异步操作 if (/* 异步操作成功 */)&#123; resolve(value);// 调用resolve，代表Promise将返回成功的结果 &#125; else &#123; reject(error);// 调用reject，代表Promise会返回失败结果 &#125;&#125;); 这样，在promise中就封装了一段异步执行的结果。 如果我们想要等待异步执行完成，做一些事情，我们可以通过promise的then方法来实现,语法： 123promise.then(function(value)&#123; // 异步执行成功后的回调&#125;); 如果想要处理promise异步执行失败的事件，还可以跟上catch： 12345promise.then(function(value)&#123; // 异步执行成功后的回调&#125;).catch(function(error)&#123; // 异步执行失败后的回调&#125;) 示例： 12345678910111213141516171819const p = new Promise(function (resolve, reject) &#123; // 这里我们用定时任务模拟异步 setTimeout(() =&gt; &#123; const num = Math.random(); // 随机返回成功或失败 if (num &lt; 0.5) &#123; resolve(&quot;成功！num:&quot; + num) &#125; else &#123; reject(&quot;出错了！num:&quot; + num) &#125; &#125;, 300)&#125;)// 调用promisep.then(function (msg) &#123; console.log(msg);&#125;).catch(function (msg) &#123; console.log(msg);&#125;) 结果： 4.3.7.set和map（了解）ES6提供了Set和Map的数据结构。 Set，本质与数组类似。不同在于Set中只能保存不同元素，如果元素相同会被忽略。跟java很像吧。 构造函数： 12345// Set构造函数可以接收一个数组或空let set = new Set();set.add(1);// [1]// 接收数组let set2 = new Set([2,3,4,5,5]);// 得到[2,3,4,5] 普通方法： 123456789set.add(1);// 添加set.clear();// 清空set.delete(2);// 删除指定元素set.has(2); // 判断是否存在set.keys();// 返回所有keyset.values();// 返回所有值set.entries();// 返回键值对集合// 因为set没有键值对，所有其keys、values、entries方法返回值一样的。set.size; // 元素个数。是属性，不是方法。 map，本质是与Object类似的结构。不同在于，Object强制规定key只能是字符串。而Map结构的key可以是任意对象。即： object是 &lt;string,object&gt;集合 map是&lt;object,object&gt;集合 构造函数： 12345678910111213// map接收一个数组，数组中的元素是键值对数组const map = new Map([ ['key1','value1'], ['key2','value2'],])// 或者接收一个setconst set = new Set([ ['key1','value1'], ['key2','value2'],])const map2 = new Map(set)// 或者其它mapconst map3 = new Map(map); 方法： 4.3.8.模块化4.3.8.1.什么是模块化模块化就是把代码进行拆分，方便重复利用。类似java中的导包：要使用一个包，必须先导包。 而JS中没有包的概念，换来的是 模块。 模块功能主要由两个命令构成：export和import。 export命令用于规定模块的对外接口， import命令用于导入其他模块提供的功能。 4.3.8.2.export比如我定义一个js文件:hello.js，里面有一个对象： 12345const util = &#123; sum(a,b)&#123; return a + b; &#125;&#125; 我可以使用export将这个对象导出： 123456const util = &#123; sum(a,b)&#123; return a + b; &#125;&#125;export util; 当然，也可以简写为： 12345export const util = &#123; sum(a,b)&#123; return a + b; &#125;&#125; export不仅可以导出对象，一切JS变量都可以导出。比如：基本类型变量、函数、数组、对象。 当要导出多个值时，还可以简写。比如我有一个文件：user.js： 123var name = \"jack\"var age = 21export &#123;name,age&#125; 省略名称 上面的导出代码中，都明确指定了导出的变量名，这样其它人在导入使用时就必须准确写出变量名，否则就会出错。 因此js提供了default关键字，可以对导出的变量名进行省略 例如： 123456// 无需声明对象的名字export default &#123; sum(a,b)&#123; return a + b; &#125;&#125; 这样，当使用者导入时，可以任意起名字 4.3.8.3.import使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。 例如我要使用上面导出的util： 1234// 导入utilimport util from 'hello.js'// 调用util中的属性util.sum(1,2) 要批量导入前面导出的name和age： 123import &#123;name, age&#125; from 'user.js'console.log(name + \" , 今年\"+ age +\"岁了\") 但是上面的代码暂时无法测试，因为浏览器目前还不支持ES6 的导入和导出功能。除非借助于工具，把ES6 的语法进行编译降级到ES5，比如Babel-cli工具 我们暂时不做测试，大家了解即可。 4.3.9.对象扩展ES6给Object拓展了许多新的方法，如： keys(obj)：获取对象的所有key形成的数组 values(obj)：获取对象的所有value形成的数组 entries(obj)：获取对象的所有key和value形成的二维数组。格式：[[k1,v1],[k2,v2],...] assian(dest, …src) ：将多个src对象的值 拷贝到 dest中（浅拷贝）。 4.3.10.数组扩展ES6给数组新增了许多方法： find(callback)：把数组中的元素逐个传递给函数callback执行，如果返回true，则返回该元素 findIndex(callback)：与find类似，不过返回的是品牌到的元素的索引 includes（callback）：与find类似，如果匹配到元素，则返回true，代表找到了。","categories":[],"tags":[],"keywords":[]},{"title":"SpringBoot基础学习入门","slug":"SpringBoot基础学习入门","date":"2019-05-03T02:18:41.000Z","updated":"2019-05-03T02:21:30.750Z","comments":true,"path":"2019/05/03/SpringBoot基础学习入门/","link":"","permalink":"https://mr8649.github.io/2019/05/03/SpringBoot基础学习入门/","excerpt":"","text":"# 0.学习目标 - 了解SpringBoot的作用 - 掌握java配置的方式 - 了解SpringBoot自动配置原理 - 掌握SpringBoot的基本使用 - 了解Thymeleaf的基本使用 # 1. 了解SpringBoot 在这一部分，我们主要了解以下3个问题： - 什么是SpringBoot - 为什么要学习SpringBoot - SpringBoot的特点 ## 1.1.什么是SpringBoot SpringBoot是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品: 我们可以看到下面的一段介绍： > Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible. 翻译一下： > 用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。 其实人们把Spring Boot 称为搭建程序的脚手架。其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。 ## 1.2.为什么要学习SpringBoot java一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能Python程序员已经把功能写好了，究其原因注意是两点： - 复杂的配置， 项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。 - 一个是混乱的依赖管理。 项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。 而SpringBoot让这一切成为过去！ > Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。 我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。 ## 1.3.SpringBoot的特点 Spring Boot 主要目标是： - 为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验 - 开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），但通过自己设置参数（.properties），即可快速摆脱这种方式。 - 提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等 - 绝对没有代码生成，也无需 XML 配置。 更多细节，大家可以到官网查看。 # 2.快速入门 接下来，我们就来利用SpringBoot搭建一个web工程，体会一下SpringBoot的魅力所在！ ## 2.1.创建工程 我们先新建一个空的工程： 工程名为demo： 新建一个model： 使用maven来构建： 然后填写项目坐标： 目录结构： 项目结构： ## 2.2.添加依赖 看到这里很多同学会有疑惑，前面说传统开发的问题之一就是依赖管理混乱，怎么这里我们还需要管理依赖呢？难道SpringBoot不帮我们管理吗？ 别着急，现在我们的项目与SpringBoot还没有什么关联。SpringBoot提供了一个名为spring-boot-starter-parent的工程，里面已经对各种常用依赖（并非全部）的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们就不用操心依赖的版本问题了，需要什么依赖，直接引入坐标即可！ ### 2.2.1.添加父工程坐标 \\123456789101112​ &lt;parent&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;​ &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;​ &lt;/parent&gt;\\ ### 2.2.2.添加web启动器 为了让SpringBoot帮我们完成各种自动配置，我们必须引入SpringBoot提供的自动配置依赖，我们称为启动器。因为我们是web项目，这里我们引入web启动器： \\1234567891011121314​ &lt;dependencies&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;/dependencies&gt;\\ 需要注意的是，我们并没有在这里指定版本信息。因为SpringBoot的父工程已经对版本进行了管理了。 这个时候，我们会发现项目中多出了大量的依赖： 这些都是SpringBoot根据spring-boot-starter-web这个依赖自动引入的，而且所有的版本都已经管理好，不会出现冲突。 ### 2.2.3.管理jdk版本 默认情况下，maven工程的jdk版本是1.5，而我们开发使用的是1.8，因此这里我们需要修改jdk版本，只需要简单的添加以下属性即可： \\12345678​ &lt;properties&gt;​ &lt;java.version&gt;1.8&lt;/java.version&gt;​ &lt;/properties&gt;\\ ### 2.2.4.完整pom \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"​ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"​ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;​ &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;​ &lt;groupId&gt;com.leyou.demo&lt;/groupId&gt;​ &lt;artifactId&gt;springboot-demo&lt;/artifactId&gt;​ &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;​ &lt;properties&gt;​ &lt;java.version&gt;1.8&lt;/java.version&gt;​ &lt;/properties&gt;​ &lt;parent&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;​ &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;​ &lt;/parent&gt;​ &lt;dependencies&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;/dependencies&gt;&lt;/project&gt;\\ ## 2.3.启动类 Spring Boot项目通过main函数即可启动，我们需要创建一个启动类： 然后编写main函数： \\1234567891011121314@SpringBootApplicationpublic class Application &#123;​ public static void main(String[] args) &#123;​ SpringApplication.run(Application.class, args);​ &#125;&#125;\\ ## 2.4.编写controller 接下来，我们就可以像以前那样开发SpringMVC的项目了！ 我们编写一个controller： 代码： \\12345678910111213141516@RestControllerpublic class HelloController &#123;​ @GetMapping(\"hello\")​ public String hello()&#123;​ return \"hello, spring boot!\";​ &#125;&#125;\\ ## 2.5.启动测试 接下来，我们运行main函数，查看控制台： 并且可以看到监听的端口信息： - 1）监听的端口是8080 - 2）SpringMVC的映射路径是：/ - 3）/hello路径已经映射到了HelloController中的hello()方法 打开页面访问：http://localhost:8080/hello 测试成功了！ # 3.Java配置 在入门案例中，我们没有任何的配置，就可以实现一个SpringMVC的项目了，快速、高效！ 但是有同学会有疑问，如果没有任何的xml，那么我们如果要配置一个Bean该怎么办？比如我们要配置一个数据库连接池，以前会这么玩： \\12345678910111213141516&lt;!-- 配置连接池 --&gt;&lt;bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"​ init-method=\"init\" destroy-method=\"close\"&gt;​ &lt;property name=\"url\" value=\"$&#123;jdbc.url&#125;\" /&gt;​ &lt;property name=\"username\" value=\"$&#123;jdbc.username&#125;\" /&gt;​ &lt;property name=\"password\" value=\"$&#123;jdbc.password&#125;\" /&gt;&lt;/bean&gt;\\ 现在该怎么做呢？ ## 3.1.回顾历史 事实上，在Spring3.0开始，Spring官方就已经开始推荐使用java配置来代替传统的xml配置了，我们不妨来回顾一下Spring的历史： - Spring1.0时代 在此时因为jdk1.5刚刚出来，注解开发并未盛行，因此一切Spring配置都是xml格式，想象一下所有的bean都用xml配置，细思极恐啊，心疼那个时候的程序员2秒 - Spring2.0时代 Spring引入了注解开发，但是因为并不完善，因此并未完全替代xml，此时的程序员往往是把xml与注解进行结合，貌似我们之前都是这种方式。 - Spring3.0及以后 3.0以后Spring的注解已经非常完善了，因此Spring推荐大家使用完全的java配置来代替以前的xml，不过似乎在国内并未推广盛行。然后当SpringBoot来临，人们才慢慢认识到java配置的优雅。 有句古话说的好：拥抱变化，拥抱未来。所以我们也应该顺应时代潮流，做时尚的弄潮儿，一起来学习下java配置的玩法。 ## 3.2.尝试java配置 java配置主要靠java类和一些注解，比较常用的注解有： - @Configuration：声明一个类作为配置类，代替xml文件 - @Bean：声明在方法上，将方法的返回值加入Bean容器，代替&lt;bean&gt;标签 - @value：属性注入 - @PropertySource：指定外部属性文件， 我们接下来用java配置来尝试实现连接池配置： 首先引入Druid连接池依赖： \\123456789101112&lt;dependency&gt;​ &lt;groupId&gt;com.alibaba&lt;/groupId&gt;​ &lt;artifactId&gt;druid&lt;/artifactId&gt;​ &lt;version&gt;1.1.6&lt;/version&gt;&lt;/dependency&gt;\\ 创建一个jdbc.properties文件，编写jdbc属性： \\12345678910jdbc.driverClassName=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://127.0.0.1:3306/leyoujdbc.username=rootjdbc.password=123\\ 然后编写代码： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344@Configuration@PropertySource(\"classpath:jdbc.properties\")public class JdbcConfig &#123;​ @Value(\"$&#123;jdbc.url&#125;\")​ String url;​ @Value(\"$&#123;jdbc.driverClassName&#125;\")​ String driverClassName;​ @Value(\"$&#123;jdbc.username&#125;\")​ String username;​ @Value(\"$&#123;jdbc.password&#125;\")​ String password;​ @Bean​ public DataSource dataSource() &#123;​ DruidDataSource dataSource = new DruidDataSource();​ dataSource.setUrl(url);​ dataSource.setDriverClassName(driverClassName);​ dataSource.setUsername(username);​ dataSource.setPassword(password);​ return dataSource;​ &#125;&#125;\\ 解读： - @Configuration：声明我们JdbcConfig是一个配置类 - @PropertySource：指定属性文件的路径是:classpath:jdbc.properties - 通过@Value为属性注入值 - 通过@Bean将 dataSource()方法声明为一个注册Bean的方法，Spring会自动调用该方法，将方法的返回值加入Spring容器中。 然后我们就可以在任意位置通过@Autowired注入DataSource了！ 我们在HelloController中测试： \\1234567891011121314151617181920@RestControllerpublic class HelloController &#123;​ @Autowired​ private DataSource dataSource;​ @GetMapping(\"hello\")​ public String hello() &#123;​ return \"hello, spring boot!\" + dataSource;​ &#125;&#125;\\ 然后Debug运行并查看： 属性注入成功了！ ## 3.3.SpringBoot的属性注入 在上面的案例中，我们实验了java配置方式。不过属性注入使用的是@Value注解。这种方式虽然可行，但是不够强大，因为它只能注入基本类型值。 在SpringBoot中，提供了一种新的属性注入方式，支持各种java基本数据类型及复杂类型的注入。 1）我们新建一个类，用来进行属性注入： \\1234567891011121314151617181920@ConfigurationProperties(prefix = \"jdbc\")public class JdbcProperties &#123;​ private String url;​ private String driverClassName;​ private String username;​ private String password;​ // ... 略​ // getters 和 setters&#125;\\ - 在类上通过@ConfigurationProperties注解声明当前类为属性读取类 - prefix=&quot;jdbc&quot;读取属性文件中，前缀为jdbc的值。 - 在类上定义各个属性，名称必须与属性文件中jdbc.后面部分一致 - 需要注意的是，这里我们并没有指定属性文件的地址，所以我们需要把jdbc.properties名称改为application.properties，这是SpringBoot默认读取的属性文件名： 2）在JdbcConfig中使用这个属性： \\12345678910111213141516171819202122232425262728@Configuration@EnableConfigurationProperties(JdbcProperties.class)public class JdbcConfig &#123;​ @Bean​ public DataSource dataSource(JdbcProperties jdbc) &#123;​ DruidDataSource dataSource = new DruidDataSource();​ dataSource.setUrl(jdbc.getUrl());​ dataSource.setDriverClassName(jdbc.getDriverClassName());​ dataSource.setUsername(jdbc.getUsername());​ dataSource.setPassword(jdbc.getPassword());​ return dataSource;​ &#125;&#125;\\ - 通过@EnableConfigurationProperties(JdbcProperties.class)来声明要使用JdbcProperties这个类的对象 - 然后你可以通过以下方式注入JdbcProperties： - @Autowired注入 ​ \\123456​ @Autowired​ private JdbcProperties prop;​ \\ - 构造函数注入 ​ \\12345678910​ private JdbcProperties prop;​ public JdbcConfig(Jdbcproperties prop)&#123;​ this.prop = prop;​ &#125;​ \\ - 声明有@Bean的方法参数注入 ​ \\12345678910​ @Bean​ public Datasource dataSource(JdbcProperties prop)&#123;​ // ...​ &#125;​ \\ 本例中，我们采用第三种方式。 3）测试结果： 大家会觉得这种方式似乎更麻烦了，事实上这种方式有更强大的功能，也是SpringBoot推荐的注入方式。两者对比关系： 优势： - Relaxed binding：松散绑定 - 不严格要求属性文件中的属性名与成员变量名一致。支持驼峰，中划线，下划线等等转换，甚至支持对象引导。比如：user.friend.name：代表的是user对象中的friend属性中的name属性，显然friend也是对象。@value注解就难以完成这样的注入方式。 - meta-data support：元数据支持，帮助IDE生成属性提示（写开源框架会用到）。 ​ ## 3.4、更优雅的注入 事实上，如果一段属性只有一个Bean需要使用，我们无需将其注入到一个类（JdbcProperties）中。而是直接在需要的地方声明即可： \\123456789101112131415161718192021222324@Configurationpublic class JdbcConfig &#123;​ ​ @Bean​ // 声明要注入的属性前缀，SpringBoot会自动把相关属性通过set方法注入到DataSource中​ @ConfigurationProperties(prefix = \"jdbc\")​ public DataSource dataSource() &#123;​ DruidDataSource dataSource = new DruidDataSource();​ return dataSource;​ &#125;&#125;\\ 我们直接把@ConfigurationProperties(prefix = &quot;jdbc&quot;)声明在需要使用的@Bean的方法上，然后SpringBoot就会自动调用这个Bean（此处是DataSource）的set方法，然后完成注入。使用的前提是：该类必须有对应属性的set方法！ 我们将jdbc的url改成：/heima，再次测试： 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 # 4.自动配置原理 使用SpringBoot之后，一个整合了SpringMVC的WEB工程开发，变的无比简单，那些繁杂的配置都消失不见了，这是如何做到的？ 一切魔力的开始，都是从我们的main函数来的，所以我们再次来看下启动类： 我们发现特别的地方有两个： - 注解：@SpringBootApplication - run方法：SpringApplication.run() 我们分别来研究这两个部分。 ## 4.1.了解@SpringBootApplication 点击进入，查看源码： 这里重点的注解有3个： - @SpringBootConfiguration - @EnableAutoConfiguration - @ComponentScan ### 4.1.1.@SpringBootConfiguration 我们继续点击查看源码： 通过这段我们可以看出，在这个注解上面，又有一个@Configuration注解。通过上面的注释阅读我们知道：这个注解的作用就是声明当前类是一个配置类，然后Spring会自动扫描到添加了@Configuration的类，并且读取其中的配置信息。而@SpringBootConfiguration是来声明当前类是SpringBoot应用的配置类，项目中只能有一个。所以一般我们无需自己添加。 ### 4.1.2.@EnableAutoConfiguration 关于这个注解，官网上有一段说明： > The second class-level annotation is @EnableAutoConfiguration. This annotation > tells Spring Boot to “guess” how you want to configure Spring, based on the jar > dependencies that you have added. Since spring-boot-starter-web added Tomcat > and Spring MVC, the auto-configuration assumes that you are developing a web > application and sets up Spring accordingly. 简单翻译以下： > 第二级的注解@EnableAutoConfiguration，告诉SpringBoot基于你所添加的依赖，去“猜测”你想要如何配置Spring。比如我们引入了spring-boot-starter-web，而这个启动器中帮我们添加了tomcat、SpringMVC的依赖。此时自动配置就知道你是要开发一个web应用，所以就帮你完成了web及SpringMVC的默认配置了！ 总结，SpringBoot内部对大量的第三方库或Spring内部库进行了默认配置，这些配置是否生效，取决于我们是否引入了对应库所需的依赖，如果有那么默认配置就会生效。 所以，我们使用SpringBoot构建一个项目，只需要引入所需框架的依赖，配置就可以交给SpringBoot处理了。除非你不希望使用SpringBoot的默认配置，它也提供了自定义配置的入口。 #### 4.1.3.@ComponentScan 我们跟进源码： 并没有看到什么特殊的地方。我们查看注释： 大概的意思： > 配置组件扫描的指令。提供了类似与&lt;context:component-scan&gt;标签的作用 > > 通过basePackageClasses或者basePackages属性来指定要扫描的包。如果没有指定这些属性，那么将从声明这个注解的类所在的包开始，扫描包及子包 而我们的@SpringBootApplication注解声明的类就是main函数所在的启动类，因此扫描的包是该类所在包及其子包。因此，一般启动类会放在一个比较前的包目录中。 ## 4.2.默认配置原理 ### 4.2.1默认配置类 通过刚才的学习，我们知道@EnableAutoConfiguration会开启SpringBoot的自动配置，并且根据你引入的依赖来生效对应的默认配置。那么问题来了： - 这些默认配置是在哪里定义的呢？ - 为何依赖引入就会触发配置呢？ 其实在我们的项目中，已经引入了一个依赖：spring-boot-autoconfigure，其中定义了大量自动配置类： 还有： 非常多，几乎涵盖了现在主流的开源框架，例如： - redis - jms - amqp - jdbc - jackson - mongodb - jpa - solr - elasticsearch … 等等 我们来看一个我们熟悉的，例如SpringMVC，查看mvc 的自动配置类： 打开WebMvcAutoConfiguration： 我们看到这个类上的4个注解： - @Configuration：声明这个类是一个配置类 - @ConditionalOnWebApplication(type = Type.SERVLET) ConditionalOn，翻译就是在某个条件下，此处就是满足项目的类是是Type.SERVLET类型，也就是一个普通web工程，显然我们就是 - @ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class }) 这里的条件是OnClass，也就是满足以下类存在：Servlet、DispatcherServlet、WebMvcConfigurer，其中Servlet只要引入了tomcat依赖自然会有，后两个需要引入SpringMVC才会有。这里就是判断你是否引入了相关依赖，引入依赖后该条件成立，当前类的配置才会生效！ - @ConditionalOnMissingBean(WebMvcConfigurationSupport.class) 这个条件与上面不同，OnMissingBean，是说环境中没有指定的Bean这个才生效。其实这就是自定义配置的入口，也就是说，如果我们自己配置了一个WebMVCConfigurationSupport的类，那么这个默认配置就会失效！ 接着，我们查看该类中定义了什么： 视图解析器： 处理器适配器（HandlerAdapter）： 还有很多，这里就不一一截图了。 ### 4.2.2.默认配置属性 另外，这些默认配置的属性来自哪里呢？ 我们看到，这里通过@EnableAutoConfiguration注解引入了两个属性：WebMvcProperties和ResourceProperties。这不正是SpringBoot的属性注入玩法嘛。 我们查看这两个属性类： 找到了内部资源视图解析器的prefix和suffix属性。 ResourceProperties中主要定义了静态资源（.js,.html,.css等)的路径： 如果我们要覆盖这些默认属性，只需要在application.properties中定义与其前缀prefix和字段名一致的属性即可。 ## 4.3.总结 SpringBoot为我们提供了默认配置，而默认配置生效的条件一般有两个： - 你引入了相关依赖 - 你自己没有配置 1）启动器 所以，我们如果不想配置，只需要引入依赖即可，而依赖版本我们也不用操心，因为只要引入了SpringBoot提供的stater（启动器），就会自动管理依赖及版本了。 因此，玩SpringBoot的第一件事情，就是找启动器，SpringBoot提供了大量的默认启动器，参考课前资料中提供的《SpringBoot启动器.txt》 2）全局配置 另外，SpringBoot的默认配置，都会读取默认属性，而这些属性可以通过自定义application.properties文件来进行覆盖。这样虽然使用的还是默认配置，但是配置中的值改成了我们自定义的。 因此，玩SpringBoot的第二件事情，就是通过application.properties来覆盖默认属性值，形成自定义配置。我们需要知道SpringBoot的默认属性key，非常多，参考课前资料提供的：《SpringBoot全局属性.md》 # 5.SpringBoot实践 接下来，我们来看看如何用SpringBoot来玩转以前的SSM,我们沿用之前讲解SSM用到的数据库tb_user和实体类User ## 5.1.整合SpringMVC 虽然默认配置已经可以使用SpringMVC了，不过我们有时候需要进行自定义配置。 ### 5.1.1.修改端口 查看SpringBoot的全局属性可知，端口通过以下方式配置： \\123456\\# 映射端口server.port=80\\ 重启服务后测试： ### 5.1.2.访问静态资源 现在，我们的项目是一个jar工程，那么就没有webapp，我们的静态资源该放哪里呢？ 回顾我们上面看的源码，有一个叫做ResourceProperties的类，里面就定义了静态资源的默认查找路径： 默认的静态资源路径为： - classpath:/META-INF/resources/ - classpath:/resources/ - classpath:/static/ - classpath:/public 只要静态资源放在这些目录中任何一个，SpringMVC都会帮我们处理。 我们习惯会把静态资源放在classpath:/static/目录下。我们创建目录，并且添加一些静态资源： 重启项目后测试： ### 5.1.3.添加拦截器 拦截器也是我们经常需要使用的，在SpringBoot中该如何配置呢？ 拦截器不是一个普通属性，而是一个类，所以就要用到java配置方式了。在SpringBoot官方文档中有这么一段说明： > If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components. > > If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc. 翻译： > 如果你想要保持Spring Boot 的一些默认MVC特征，同时又想自定义一些MVC配置（包括：拦截器，格式化器, 视图控制器、消息转换器 等等），你应该让一个类实现WebMvcConfigurer，并且添加@Configuration注解，但是千万不要加@EnableWebMvc注解。如果你想要自定义HandlerMapping、HandlerAdapter、ExceptionResolver等组件，你可以创建一个WebMvcRegistrationsAdapter实例 来提供以上组件。 > > 如果你想要完全自定义SpringMVC，不保留SpringBoot提供的一切特征，你可以自己定义类并且添加@Configuration注解和@EnableWebMvc注解 总结：通过实现WebMvcConfigurer并添加@Configuration注解来实现自定义部分SpringMvc配置。 首先我们定义一个拦截器： \\12345678910111213141516171819202122232425262728293031323334public class LoginInterceptor implements HandlerInterceptor &#123;​ private Logger logger = LoggerFactory.getLogger(LoginInterceptor.class);​ @Override​ public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) &#123;​ logger.debug(\"preHandle method is now running!\");​ return true;​ &#125;​ @Override​ public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) &#123;​ logger.debug(\"postHandle method is now running!\");​ &#125;​ @Override​ public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) &#123;​ logger.debug(\"afterCompletion method is now running!\");​ &#125;&#125;\\ 然后，我们定义配置类，注册拦截器： \\123456789101112131415161718192021222324252627282930313233343536373839404142@Configurationpublic class MvcConfig implements WebMvcConfigurer&#123;​ /**​ \\* 通过@Bean注解，将我们定义的拦截器注册到Spring容器​ \\* @return​ */​ @Bean​ public LoginInterceptor loginInterceptor()&#123;​ return new LoginInterceptor();​ &#125;​ /**​ \\* 重写接口中的addInterceptors方法，添加自定义拦截器​ \\* @param registry​ */​ @Override​ public void addInterceptors(InterceptorRegistry registry) &#123;​ // 通过registry来注册拦截器，通过addPathPatterns来添加拦截路径​ registry.addInterceptor(this.loginInterceptor()).addPathPatterns(\"/**\");​ &#125;&#125;\\ 结构如下： 接下来运行并查看日志： 你会发现日志中什么都没有，因为我们记录的log级别是debug，默认是显示info以上，我们需要进行配置。 SpringBoot通过logging.level.*=debug来配置日志级别，*填写包名 \\123456\\# 设置com.leyou包的日志级别为debuglogging.level.com.leyou=debug\\ 再次运行查看： \\123456782018-05-05 17:50:01.811 DEBUG 4548 --- [p-nio-80-exec-1] com.leyou.interceptor.LoginInterceptor : preHandle method is now running!2018-05-05 17:50:01.854 DEBUG 4548 --- [p-nio-80-exec-1] com.leyou.interceptor.LoginInterceptor : postHandle method is now running!2018-05-05 17:50:01.854 DEBUG 4548 --- [p-nio-80-exec-1] com.leyou.interceptor.LoginInterceptor : afterCompletion method is now running!\\ ## 5.2.整合jdbc和事务 spring中的jdbc连接和事务是配置中的重要一环，在SpringBoot中该如何处理呢？ 答案是不需要处理，我们只要找到SpringBoot提供的启动器即可： \\12345678910&lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;\\ 当然，不要忘了数据库驱动，SpringBoot并不知道我们用的什么数据库，这里我们选择MySQL： \\12345678910&lt;dependency&gt;​ &lt;groupId&gt;mysql&lt;/groupId&gt;​ &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;\\ 至于事务，SpringBoot中通过注解来控制。就是我们熟知的@Transactional \\1234567891011121314151617181920212223242526@Servicepublic class UserService &#123;​ @Autowired​ private UserMapper userMapper;​ public User queryById(Long id)&#123;​ return this.userMapper.selectByPrimaryKey(id);​ &#125;​ @Transactional​ public void deleteById(Long id)&#123;​ this.userMapper.deleteByPrimaryKey(id);​ &#125;&#125;\\ ## 5.3.整合连接池 其实，在刚才引入jdbc启动器的时候，SpringBoot已经自动帮我们引入了一个连接池： HikariCP应该是目前速度最快的连接池了，我们看看它与c3p0的对比： 因此，我们只需要指定连接池参数即可： \\1234567891011121314151617181920\\# 连接四大参数spring.datasource.url=jdbc:mysql://localhost:3306/heimaspring.datasource.username=rootspring.datasource.password=123\\# 可省略，SpringBoot自动推断spring.datasource.driverClassName=com.mysql.jdbc.Driverspring.datasource.hikari.idle-timeout=60000spring.datasource.hikari.maximum-pool-size=30spring.datasource.hikari.minimum-idle=10\\ 当然，如果你更喜欢Druid连接池，也可以使用Druid官方提供的启动器： \\1234567891011121314&lt;!-- Druid连接池 --&gt;&lt;dependency&gt;​ &lt;groupId&gt;com.alibaba&lt;/groupId&gt;​ &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;​ &lt;version&gt;1.1.6&lt;/version&gt;&lt;/dependency&gt;\\ 而连接信息的配置与上面是类似的，只不过在连接池特有属性上，方式略有不同： \\12345678910111213141516171819202122\\#初始化连接数spring.datasource.druid.initial-size=1\\#最小空闲连接spring.datasource.druid.min-idle=1\\#最大活动连接spring.datasource.druid.max-active=20\\#获取连接时测试是否可用spring.datasource.druid.test-on-borrow=true\\#监控页面启动spring.datasource.druid.stat-view-servlet.allow=true\\ ## 5.4.整合mybatis ### 5.4.1.mybatis SpringBoot官方并没有提供Mybatis的启动器，不过Mybatis官网自己实现了： \\1234567891011121314&lt;!--mybatis --&gt;&lt;dependency&gt;​ &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;​ &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;​ &lt;version&gt;1.3.2&lt;/version&gt;&lt;/dependency&gt;\\ 配置，基本没有需要配置的： \\12345678910\\# mybatis 别名扫描mybatis.type-aliases-package=com.heima.pojo\\# mapper.xml文件位置,如果没有映射文件，请注释掉mybatis.mapper-locations=classpath:mappers/*.xml\\ 需要注意，这里没有配置mapper接口扫描包，因此我们需要给每一个Mapper接口添加@Mapper注解，才能被识别。 \\12345678@Mapperpublic interface UserMapper &#123;&#125;\\ ### 5.4.2.通用mapper 通用Mapper的作者也为自己的插件编写了启动器，我们直接引入即可： \\1234567891011121314&lt;!-- 通用mapper --&gt;&lt;dependency&gt;​ &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;​ &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;​ &lt;version&gt;2.0.2&lt;/version&gt;&lt;/dependency&gt;\\ 不需要做任何配置就可以使用了。 \\12345678@Mapperpublic interface UserMapper extends tk.mybatis.mapper.common.Mapper&lt;User&gt;&#123;&#125;\\ ## 5.5.启动测试 将controller进行简单改造： \\12345678910111213141516171819202122@RestControllerpublic class HelloController &#123;​ @Autowired​ private UserService userService;​ @GetMapping(\"/hello\")​ public User hello() &#123;​ User user = this.userService.queryById(8L);​ return user;​ &#125;&#125;\\ 我们启动项目，查看： # 6.Thymeleaf快速入门 SpringBoot并不推荐使用jsp，但是支持一些模板引擎技术： 以前大家用的比较多的是Freemarker，但是我们今天的主角是Thymeleaf！ ## 6.1.为什么是Thymeleaf？ 简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点： - 动静结合：Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。 - 开箱即用：它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。 - 多方言支持：Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。 - 与SpringBoot完美整合，SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp一样来操作Thymeleaf。代码几乎没有任何区别，就是在模板语法上有区别。 接下来，我们就通过入门案例来体会Thymeleaf的魅力： ## 6.2.编写接口 编写一个controller，返回一些用户数据，放入模型中，等会在页面渲染 \\1234567891011121314151617181920@GetMapping(\"/all\")public String all(ModelMap model) &#123;​ // 查询用户​ List&lt;User&gt; users = this.userService.queryAll();​ // 放入模型​ model.addAttribute(\"users\", users);​ // 返回模板名称（就是classpath:/templates/目录下的html文件名）​ return \"users\";&#125;\\ ## 6.3.引入启动器 直接引入启动器： \\12345678910&lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt;\\ SpringBoot会自动为Thymeleaf注册一个视图解析器： 与解析JSP的InternalViewResolver类似，Thymeleaf也会根据前缀和后缀来确定模板文件的位置： - 默认前缀：classpath:/templates/ - 默认后缀：.html 所以如果我们返回视图：users，会指向到 classpath:/templates/users.html 一般我们无需进行修改，默认即可。 ## 6.4.静态页面 根据上面的文档介绍，模板默认放在classpath下的templates文件夹，我们新建一个html文件放入其中： 编写html模板，渲染模型中的数据： 注意，把html 的名称空间，改成：xmlns:th=&quot;http://www.thymeleaf.org&quot; 会有语法提示 \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;!DOCTYPE html&gt;&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt;​ &lt;title&gt;首页&lt;/title&gt; &lt;style type=\"text/css\"&gt;​ table &#123;border-collapse: collapse; font-size: 14px; width: 80%; margin: auto&#125;​ table, th, td &#123;border: 1px solid darkslategray;padding: 10px&#125;​ &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div style=\"text-align: center\"&gt;​ &lt;span style=\"color: darkslategray; font-size: 30px\"&gt;欢迎光临！&lt;/span&gt;​ &lt;hr/&gt; &lt;table class=\"list\"&gt;​ &lt;tr&gt;​ &lt;th&gt;id&lt;/th&gt;​ &lt;th&gt;姓名&lt;/th&gt;​ &lt;th&gt;用户名&lt;/th&gt;​ &lt;th&gt;年龄&lt;/th&gt;​ &lt;th&gt;性别&lt;/th&gt;​ &lt;th&gt;生日&lt;/th&gt;​ &lt;th&gt;备注&lt;/th&gt;​ &lt;/tr&gt;​ &lt;tr th:each=\"user : $&#123;users&#125;\"&gt;​ &lt;td th:text=\"$&#123;user.id&#125;\"&gt;1&lt;/td&gt;​ &lt;td th:text=\"$&#123;user.name&#125;\"&gt;张三&lt;/td&gt;​ &lt;td th:text=\"$&#123;user.userName&#125;\"&gt;zhangsan&lt;/td&gt;​ &lt;td th:text=\"$&#123;user.age&#125;\"&gt;20&lt;/td&gt;​ &lt;td th:text=\"$&#123;user.sex&#125; == 1 ? '男': '女'\"&gt;男&lt;/td&gt;​ &lt;td th:text=\"$&#123;#dates.format(user.birthday, 'yyyy-MM-dd')&#125;\"&gt;1980-02-30&lt;/td&gt;​ &lt;td th:text=\"$&#123;user.note&#125;\"&gt;1&lt;/td&gt;​ &lt;/tr&gt;​ &lt;/table&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\\ 我们看到这里使用了以下语法： - ${} ：这个类似与el表达式，但其实是ognl的语法，比el表达式更加强大 - th-指令：th-是利用了Html5中的自定义属性来实现的。如果不支持H5，可以用data-th-来代替 - th:each：类似于c:foreach 遍历集合，但是语法更加简洁 - th:text：声明标签中的文本 ​ - 例如&lt;td th-text=&#39;${user.id}&#39;&gt;1&lt;/td&gt;，如果user.id有值，会覆盖默认的1 ​ - 如果没有值，则会显示td中默认的1。这正是thymeleaf能够动静结合的原因，模板解析失败不影响页面的显示效果，因为会显示默认值！ ## 6.5.测试 接下来，我们打开页面测试一下： ## 6.6.模板缓存 Thymeleaf会在第一次对模板解析之后进行缓存，极大的提高了并发处理能力。但是这给我们开发带来了不便，修改页面后并不会立刻看到效果，我们开发阶段可以关掉缓存使用： \\123456\\# 开发阶段关闭thymeleaf的模板缓存spring.thymeleaf.cache=false\\ 注意： 在Idea中，我们需要在修改页面后按快捷键：Ctrl + Shift + F9 对项目进行rebuild才可以。 eclipse中没有测试过。 我们可以修改页面，测试一下。","categories":[],"tags":[],"keywords":[]},{"title":"认识微服务","slug":"认识微服务","date":"2019-05-03T02:05:54.000Z","updated":"2019-05-03T02:12:32.425Z","comments":true,"path":"2019/05/03/认识微服务/","link":"","permalink":"https://mr8649.github.io/2019/05/03/认识微服务/","excerpt":"","text":"# 0.学习目标 - 了解系统架构的演变 - 了解RPC与Http的区别 - 掌握HttpClient的简单使用 - 知道什么是SpringCloud - 独立搭建Eureka注册中心 - 独立配置Robbin负载均衡 -Xms128m -Xmx128m # 1.系统架构演变 随着互联网的发展，网站应用的规模不断扩大。需求的激增，带来的是技术上的压力。系统架构也因此也不断的演进、升级、迭代。从单一应用，到垂直拆分，到分布式服务，到SOA，以及现在火热的微服务架构，还有在Google带领下来势汹涌的Service Mesh。我们到底是该乘坐微服务的船只驶向远方，还是偏安一隅得过且过？ 其实生活不止眼前的苟且，还有诗和远方。所以我们今天就回顾历史，看一看系统架构演变的历程；把握现在，学习现在最火的技术架构；展望未来，争取成为一名优秀的Java工程师。 ## 1.1. 集中式架构 当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是影响项目开发的关键。 存在的问题： - 代码耦合，开发维护困难 - 无法针对不同模块进行针对性优化 - 无法水平扩展 - 单点容错率低，并发能力差 ## 1.2.垂直拆分 当访问量逐渐增大，单一应用无法满足需求，此时为了应对更高的并发和业务需求，我们根据业务功能对系统进行拆分： 优点： - 系统拆分实现了流量分担，解决了并发问题 - 可以针对不同模块进行优化 - 方便水平扩展，负载均衡，容错率提高 缺点： - 系统间相互独立，会有很多重复开发工作，影响开发效率 ## 1.3.分布式服务 当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式调用是关键。 优点： - 将基础服务进行了抽取，系统间相互调用，提高了代码复用和开发效率 缺点： - 系统间耦合度变高，调用关系错综复杂，难以维护 ## 1.4.服务治理（SOA） 当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键 以前出现了什么问题？ - 服务越来越多，需要管理每个服务的地址 - 调用关系错综复杂，难以理清依赖关系 - 服务过多，服务状态难以管理，无法根据服务情况动态管理 服务治理要做什么？ - 服务注册中心，实现服务自动注册和发现，无需人为记录服务地址 - 服务自动订阅，服务列表自动推送，服务调用透明化，无需关心依赖关系 - 动态监控服务状态监控报告，人为控制服务状态 缺点： - 服务间会有依赖关系，一旦某个环节出错会影响较大 - 服务关系复杂，运维、测试部署困难，不符合DevOps思想 ## 1.5.微服务 前面说的SOA，英文翻译过来是面向服务。微服务，似乎也是服务，都是对系统进行拆分。因此两者非常容易混淆，但其实缺有一些差别： 微服务的特点： - 单一职责：微服务中每一个服务都对应唯一的业务能力，做到单一职责 - 微：微服务的服务拆分粒度很小，例如一个用户管理就可以作为一个服务。每个服务虽小，但“五脏俱全”。 - 面向服务：面向服务是说每个服务都要对外暴露服务接口API。并不关心服务的技术实现，做到与平台和语言无关，也不限定用什么技术实现，只要提供Rest的接口即可。 - 自治：自治是说服务间互相独立，互不干扰 - 团队独立：每个服务都是一个独立的开发团队，人数不能过多。 - 技术独立：因为是面向服务，提供Rest接口，使用什么技术没有别人干涉 - 前后端分离：采用前后端分离开发，提供统一Rest接口，后端不用再为PC、移动段开发不同接口 - 数据库分离：每个服务都使用自己的数据源 - 部署独立，服务间虽然有调用，但要做到服务重启不影响其它服务。有利于持续集成和持续交付。每个服务都是独立的组件，可复用，可替换，降低耦合，易维护 微服务结构图： # 2.远程调用方式 无论是微服务还是SOA，都面临着服务间的远程调用。那么服务间的远程调用方式有哪些呢？ 常见的远程调用方式有以下几种： - RPC：Remote Produce Call远程过程调用，类似的还有RMI。自定义数据格式，基于原生TCP通信，速度快，效率高。早期的webservice，现在热门的dubbo，都是RPC的典型 - Http：http其实是一种网络传输协议，基于TCP，规定了数据传输的格式。现在客户端浏览器与服务端通信基本都是采用Http协议。也可以用来进行远程服务调用。缺点是消息封装臃肿。 现在热门的Rest风格，就可以通过http协议来实现。 ## 2.1.认识RPC RPC，即 Remote Procedure Call（远程过程调用），是一个计算机通信协议。 该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。说得通俗一点就是：A计算机提供一个服务，B计算机可以像调用本地服务那样调用A计算机的服务。 通过上面的概念，我们可以知道，实现RPC主要是做到两点： - 实现远程调用其他计算机的服务 - 要实现远程调用，肯定是通过网络传输数据。A程序提供服务，B程序通过网络将请求参数传递给A，A本地执行后得到结果，再将结果返回给B程序。这里需要关注的有两点： ​ - 1）采用何种网络通讯协议？ ​ - 现在比较流行的RPC框架，都会采用TCP作为底层传输协议 ​ - 2）数据传输的格式怎样？ ​ - 两个程序进行通讯，必须约定好数据传输格式。就好比两个人聊天，要用同一种语言，否则无法沟通。所以，我们必须定义好请求和响应的格式。另外，数据在网路中传输需要进行序列化，所以还需要约定统一的序列化的方式。 - 像调用本地服务一样调用远程服务 - 如果仅仅是远程调用，还不算是RPC，因为RPC强调的是过程调用，调用的过程对用户而言是应该是透明的，用户不应该关心调用的细节，可以像调用本地服务一样调用远程服务。所以RPC一定要对调用的过程进行封装 RPC调用流程图： 想要了解详细的RPC实现，给大家推荐一篇文章：自己动手实现RPC ## 2.2.认识Http Http协议：超文本传输协议，是一种应用层协议。规定了网络传输的请求格式、响应格式、资源定位和操作的方式等。但是底层采用什么网络传输协议，并没有规定，不过现在都是采用TCP协议作为底层传输协议。说到这里，大家可能觉得，Http与RPC的远程调用非常像，都是按照某种规定好的数据格式进行网络通信，有请求，有响应。没错，在这点来看，两者非常相似，但是还是有一些细微差别。 - RPC并没有规定数据传输格式，这个格式可以任意指定，不同的RPC协议，数据格式不一定相同。 - Http中还定义了资源定位的路径，RPC中并不需要 - 最重要的一点：RPC需要满足像调用本地服务一样调用远程服务，也就是对调用过程在API层面进行封装。Http协议没有这样的要求，因此请求、响应等细节需要我们自己去实现。 - 优点：RPC方式更加透明，对用户更方便。Http方式更灵活，没有规定API和语言，跨语言、跨平台 - 缺点：RPC方式需要在API层面进行封装，限制了开发的语言环境。 例如我们通过浏览器访问网站，就是通过Http协议。只不过浏览器把请求封装，发起请求以及接收响应，解析响应的事情都帮我们做了。如果是不通过浏览器，那么这些事情都需要自己去完成。 ## 2.3.如何选择？ 既然两种方式都可以实现远程调用，我们该如何选择呢？ - 速度来看，RPC要比http更快，虽然底层都是TCP，但是http协议的信息往往比较臃肿，不过可以采用gzip压缩。 - 难度来看，RPC实现较为复杂，http相对比较简单 - 灵活性来看，http更胜一筹，因为它不关心实现细节，跨平台、跨语言。 因此，两者都有不同的使用场景： - 如果对效率要求更高，并且开发过程使用统一的技术栈，那么用RPC还是不错的。 - 如果需要更加灵活，跨语言、跨平台，显然http更合适 那么我们该怎么选择呢？ 微服务，更加强调的是独立、自治、灵活。而RPC方式的限制较多，因此微服务框架中，一般都会采用基于Http的Rest风格服务。 # 3.Http客户端工具 既然微服务选择了Http，那么我们就需要考虑自己来实现对请求和响应的处理。不过开源世界已经有很多的http客户端工具，能够帮助我们做这些事情，例如： - HttpClient - OKHttp - URLConnection 接下来，我们就一起了解一款比较流行的客户端工具：HttpClient ## 3.1.HttpClient ### 3.1.1.介绍 HttpClient是Apache公司的产品，是Http Components下的一个组件。 官网地址：http://hc.apache.org/index.html 特点： - 基于标准、纯净的Java语言。实现了Http1.0和Http1.1 - 以可扩展的面向对象的结构实现了Http全部的方法（GET, POST, PUT, DELETE, HEAD, OPTIONS, and TRACE） - 支持HTTPS协议。 - 通过Http代理建立透明的连接。 - 自动处理Set-Cookie中的Cookie。 ### 3.1.2.使用 我们导入课前资料提供的demo工程：《http-demo》 发起get请求： \\1234567891011121314​ @Test​ public void testGet() throws IOException &#123;​ HttpGet request = new HttpGet(\"http://www.baidu.com\");​ String response = this.httpClient.execute(request, new BasicResponseHandler());​ System.out.println(response);​ &#125;\\ 发起Post请求： \\123456789101112131415161718@Testpublic void testPost() throws IOException &#123;​ HttpPost request = new HttpPost(\"http://www.oschina.net/\");​ request.setHeader(\"User-Agent\",​ \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\");​ String response = this.httpClient.execute(request, new BasicResponseHandler());​ System.out.println(response);&#125;\\ 尝试访问昨天编写的接口：http://localhost/hello 这个接口返回一个User对象 \\1234567891011121314@Testpublic void testGetPojo() throws IOException &#123;​ HttpGet request = new HttpGet(\"http://localhost/hello\");​ String response = this.httpClient.execute(request, new BasicResponseHandler());​ System.out.println(response);&#125;\\ 我们实际得到的是一个json字符串： \\1234567891011121314151617181920212223242526&#123;​ \"id\": 8,​ \"userName\": \"liuyan\",​ \"password\": \"123456\",​ \"name\": \"柳岩\",​ \"age\": 21,​ \"sex\": 2,​ \"birthday\": \"1995-08-07T16:00:00.000+0000\",​ \"created\": \"2014-09-20T03:41:15.000+0000\",​ \"updated\": \"2014-09-20T03:41:15.000+0000\",​ \"note\": \"柳岩同学在传智播客学表演\"&#125;\\ 如果想要得到对象，我们还需要手动进行Json反序列化，这一点比较麻烦。 ### 3.1.3.Json转换工具 HttpClient请求数据后是json字符串，需要我们自己把Json字符串反序列化为对象，我们会使用JacksonJson工具来实现。 JacksonJson是SpringMVC内置的json处理工具，其中有一个ObjectMapper类，可以方便的实现对json的处理： #### 对象转json \\12345678910111213141516171819202122232425262728// json处理工具​ private ObjectMapper mapper = new ObjectMapper();​ @Test​ public void testJson() throws JsonProcessingException &#123;​ User user = new User();​ user.setId(8L);​ user.setAge(21);​ user.setName(\"柳岩\");​ user.setUserName(\"liuyan\");​ // 序列化​ String json = mapper.writeValueAsString(user);​ System.out.println(\"json = \" + json);​ &#125;\\ 结果： #### json转普通对象 \\1234567891011121314151617181920212223242526272829303132// json处理工具private ObjectMapper mapper = new ObjectMapper();@Testpublic void testJson() throws IOException &#123;​ User user = new User();​ user.setId(8L);​ user.setAge(21);​ user.setName(\"柳岩\");​ user.setUserName(\"liuyan\");​ // 序列化​ String json = mapper.writeValueAsString(user);​ // 反序列化，接收两个参数：json数据，反序列化的目标类字节码​ User result = mapper.readValue(json, User.class);​ System.out.println(\"result = \" + result);&#125;\\ 结果： #### json转集合 json转集合比较麻烦，因为你无法同时把集合的class和元素的class同时传递到一个参数。 因此Jackson做了一个类型工厂，用来解决这个问题： \\123456789101112131415161718192021222324252627282930313233343536// json处理工具private ObjectMapper mapper = new ObjectMapper();@Testpublic void testJson() throws IOException &#123;​ User user = new User();​ user.setId(8L);​ user.setAge(21);​ user.setName(\"柳岩\");​ user.setUserName(\"liuyan\");​ // 序列化,得到对象集合的json字符串​ String json = mapper.writeValueAsString(Arrays.asList(user, user));​ // 反序列化，接收两个参数：json数据，反序列化的目标类字节码​ List&lt;User&gt; users = mapper.readValue(json, mapper.getTypeFactory().constructCollectionType(List.class, User.class));​ for (User u : users) &#123;​ System.out.println(\"u = \" + u);​ &#125;&#125;\\ 结果： #### json转任意复杂类型 当对象泛型关系复杂时，类型工厂也不好使了。这个时候Jackson提供了TypeReference来接收类型泛型，然后底层通过反射来获取泛型上的具体类型。实现数据转换。 \\123456789101112131415161718192021222324252627282930313233343536// json处理工具private ObjectMapper mapper = new ObjectMapper();@Testpublic void testJson() throws IOException &#123;​ User user = new User();​ user.setId(8L);​ user.setAge(21);​ user.setName(\"柳岩\");​ user.setUserName(\"liuyan\");​ // 序列化,得到对象集合的json字符串​ String json = mapper.writeValueAsString(Arrays.asList(user, user));​ // 反序列化，接收两个参数：json数据，反序列化的目标类字节码​ List&lt;User&gt; users = mapper.readValue(json, new TypeReference&lt;List&lt;User&gt;&gt;()&#123;&#125;);​ for (User u : users) &#123;​ System.out.println(\"u = \" + u);​ &#125;&#125;\\ 结果： ## 3.3.Spring的RestTemplate Spring提供了一个RestTemplate模板工具类，对基于Http的客户端进行了封装，并且实现了对象与json的序列化和反序列化，非常方便。RestTemplate并没有限定Http的客户端类型，而是进行了抽象，目前常用的3种都有支持： - HttpClient - OkHttp - JDK原生的URLConnection（默认的） 首先在项目中注册一个RestTemplate对象，可以在启动类位置注册： \\123456789101112131415161718192021222324@SpringBootApplicationpublic class HttpDemoApplication &#123; public static void main(String[] args) &#123;​ SpringApplication.run(HttpDemoApplication.class, args); &#125; @Bean public RestTemplate restTemplate() &#123;​ // 默认的RestTemplate，底层是走JDK的URLConnection方式。​ return new RestTemplate(); &#125;&#125;\\ 在测试类中直接@Autowired注入： \\123456789101112131415161718192021222324@RunWith(SpringRunner.class)@SpringBootTest(classes = HttpDemoApplication.class)public class HttpDemoApplicationTests &#123; @Autowired private RestTemplate restTemplate; @Test public void httpGet() &#123;​ User user = this.restTemplate.getForObject(\"http://localhost/hello\", User.class);​ System.out.println(user); &#125;&#125;\\ - 通过RestTemplate的getForObject()方法，传递url地址及实体类的字节码，RestTemplate会自动发起请求，接收响应，并且帮我们对响应结果进行反序列化。 学习完了Http客户端工具，接下来就可以正式学习微服务了。 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 # 4.初始SpringCloud 微服务是一种架构方式，最终肯定需要技术架构去实施。 微服务的实现方式很多，但是最火的莫过于Spring Cloud了。为什么？ - 后台硬：作为Spring家族的一员，有整个Spring全家桶靠山，背景十分强大。 - 技术强：Spring作为Java领域的前辈，可以说是功力深厚。有强力的技术团队支撑，一般人还真比不了 - 群众基础好：可以说大多数程序员的成长都伴随着Spring框架，试问：现在有几家公司开发不用Spring？SpringCloud与Spring的各个框架无缝整合，对大家来说一切都是熟悉的配方，熟悉的味道。 - 使用方便：相信大家都体会到了SpringBoot给我们开发带来的便利，而SpringCloud完全支持SpringBoot的开发，用很少的配置就能完成微服务框架的搭建 ## 4.1.简介 SpringCloud是Spring旗下的项目之一，官网地址：http://projects.spring.io/spring-cloud/ Spring最擅长的就是集成，把世界上最好的框架拿过来，集成到自己的项目中。 SpringCloud也是一样，它将现在非常流行的一些技术整合到一起，实现了诸如：配置管理，服务发现，智能路由，负载均衡，熔断器，控制总线，集群状态等等功能。其主要涉及的组件包括： netflix - Eureka：注册中心 - Zuul：服务网关 - Ribbon：负载均衡 - Feign：服务调用 - Hystix：熔断器 以上只是其中一部分，架构图： ## 4.2.版本 SpringCloud的版本命名比较特殊，因为它不是一个组件，而是许多组件的集合，它的命名是以A到Z的为首字母的一些单词组成： 我们在项目中，会是以Finchley的版本。 其中包含的组件，也都有各自的版本，如下表： | Component | Edgware.SR3 | Finchley.RC1 | Finchley.BUILD-SNAPSHOT | | ————————- | ————– | —————- | ———————– | | spring-cloud-aws | 1.2.2.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-bus | 1.3.2.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-cli | 1.4.1.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-commons | 1.3.3.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-contract | 1.2.4.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-config | 1.4.3.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-netflix | 1.4.4.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-security | 1.2.2.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-cloudfoundry | 1.1.1.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-consul | 1.3.3.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-sleuth | 1.3.3.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-stream | Ditmars.SR3 | Elmhurst.RELEASE | Elmhurst.BUILD-SNAPSHOT | | spring-cloud-zookeeper | 1.2.1.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-boot | 1.5.10.RELEASE | 2.0.1.RELEASE | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-task | 1.2.2.RELEASE | 2.0.0.RC1 | 2.0.0.RELEASE | | spring-cloud-vault | 1.1.0.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-gateway | 1.0.1.RELEASE | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | | spring-cloud-openfeign | | 2.0.0.RC1 | 2.0.0.BUILD-SNAPSHOT | 接下来，我们就一一学习SpringCloud中的重要组件。 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 # 5.微服务场景模拟 首先，我们需要模拟一个服务调用的场景。方便后面学习微服务架构 ## 5.1.服务提供者 我们新建一个项目，对外提供查询用户的服务。 ### 5.1.1.Spring脚手架创建工程 借助于Spring提供的快速搭建工具： 填写项目信息： 添加web依赖： 添加mybatis依赖： 填写项目位置： 生成的项目结构： 依赖也已经全部自动引入： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.leyou.demo&lt;/groupId&gt; &lt;artifactId&gt;user-service-demo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;user-service-demo&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;​ &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;​ &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt;​ &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;​ &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;​ &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;​ &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;​ &lt;version&gt;1.3.2&lt;/version&gt;​ &lt;/dependency&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;mysql&lt;/groupId&gt;​ &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;​ &lt;scope&gt;runtime&lt;/scope&gt;​ &lt;/dependency&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;​ &lt;scope&gt;test&lt;/scope&gt;​ &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt;​ &lt;plugins&gt;​ &lt;plugin&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;​ &lt;/plugin&gt;​ &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt;\\ 当然，因为要使用通用mapper，所以我们需要手动加一条依赖： \\123456789101112&lt;dependency&gt;​ &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;​ &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;​ &lt;version&gt;2.0.2&lt;/version&gt;&lt;/dependency&gt;\\ 非常快捷啊！ ### 5.1.2.编写代码 添加一个对外查询的接口： \\12345678910111213141516171819202122@RestController@RequestMapping(\"user\")public class UserController &#123;​ @Autowired​ private UserService userService;​ @GetMapping(\"/&#123;id&#125;\")​ public User queryById(@PathVariable(\"id\") Long id) &#123;​ return this.userService.queryById(id);​ &#125;&#125;\\ Service： \\123456789101112131415161718@Servicepublic class UserService &#123;​ @Autowired​ private UserMapper userMapper;​ public User queryById(Long id) &#123;​ return this.userMapper.selectByPrimaryKey(id);​ &#125;&#125;\\ mapper: \\12345678@Mapperpublic interface UserMapper extends tk.mybatis.mapper.common.Mapper&lt;User&gt;&#123;&#125;\\ 实体类： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354@Table(name = \"tb_user\")public class User implements Serializable &#123;​ private static final long serialVersionUID = 1L;​ @Id​ @GeneratedValue(strategy = GenerationType.IDENTITY)​ private Long id;​ // 用户名​ private String userName;​ // 密码​ private String password;​ // 姓名​ private String name;​ // 年龄​ private Integer age;​ // 性别，1男性，2女性​ private Integer sex;​ // 出生日期​ private Date birthday;​ // 创建时间​ private Date created;​ // 更新时间​ private Date updated;​ // 备注​ private String note; // 。。。省略getters和setters&#125;\\ 属性文件,这里我们采用了yaml语法，而不是properties： \\1234567891011121314151617181920212223242526server: port: 8081spring: datasource:​ url: jdbc:mysql://localhost:3306/mydb01​ username: root​ password: 123​ hikari:​ maximum-pool-size: 20​ minimum-idle: 10mybatis: type-aliases-package: com.leyou.userservice.pojo\\ 项目结构： ### 5.1.3.启动并测试： 启动项目，访问接口：http://localhost:8081/user/7 ## 5.2.服务调用者 ### 5.2.1.创建工程 与上面类似，这里不再赘述，需要注意的是，我们调用user-service的功能，因此不需要mybatis相关依赖了。 pom： \\1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.leyou.demo&lt;/groupId&gt; &lt;artifactId&gt;user-consumer-demo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;user-consumer-demo&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;​ &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;​ &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt;​ &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;​ &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;​ &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;​ &lt;/dependency&gt;​ &lt;!-- 添加OkHttp支持 --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;​ &lt;artifactId&gt;okhttp&lt;/artifactId&gt;​ &lt;version&gt;3.9.0&lt;/version&gt;​ &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt;​ &lt;plugins&gt;​ &lt;plugin&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;​ &lt;/plugin&gt;​ &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt;\\ ### 5.2.2.编写代码 首先在启动类中注册RestTemplate： \\123456789101112131415161718192021222324@SpringBootApplicationpublic class UserConsumerDemoApplication &#123;​ @Bean​ public RestTemplate restTemplate() &#123;​ // 这次我们使用了OkHttp客户端,只需要注入工厂即可​ return new RestTemplate(new OkHttp3ClientHttpRequestFactory());​ &#125;​ public static void main(String[] args) &#123;​ SpringApplication.run(UserConsumerDemoApplication.class, args);​ &#125;&#125;\\ 然后编写UserDao，注意，这里不是调用mapper查数据库，而是通过RestTemplate远程查询user-service-demo中的接口： \\1234567891011121314151617181920@Componentpublic class UserDao &#123;​ @Autowired​ private RestTemplate restTemplate;​ public User queryUserById(Long id)&#123;​ String url = \"http://localhost:8081/user/\" + id;​ return this.restTemplate.getForObject(url, User.class);​ &#125;&#125;\\ 然后编写user-service，循环查询UserDAO信息： \\12345678910111213141516171819202122232425262728@Servicepublic class UserService &#123;​ @Autowired​ private UserDao userDao;​ public List&lt;User&gt; querUserByIds(List&lt;Long&gt; ids)&#123;​ List&lt;User&gt; users = new ArrayList&lt;&gt;();​ for (Long id : ids) &#123;​ User user = this.userDao.queryUserById(id);​ users.add(user);​ &#125;​ return users;​ &#125;&#125;\\ 编写controller： \\12345678910111213141516171819202122@RestController@RequestMapping(\"consume\")public class ConsumerController &#123;​ @Autowired​ private UserService userService;​ @GetMapping​ public List&lt;User&gt; consume(@RequestParam(\"ids\") List&lt;Long&gt; ids) &#123;​ return this.userService.queryUserByIds(ids);​ &#125;&#125;\\ ### 5.2.3.启动测试： 因为我们没有配置端口，那么默认就是8080，我们访问：http://localhost:8080/consume?ids=6,7,8 一个简单的远程服务调用案例就实现了。 ## 5.3.有没有问题？ 简单回顾一下，刚才我们写了什么： - use-service-demo：一个提供根据id查询用户的微服务 - consumer-demo：一个服务调用者，通过RestTemplate远程调用user-service-demo 流程如下： 存在什么问题？ - 在consumer中，我们把url地址硬编码到了代码中，不方便后期维护 - consumer需要记忆user-service的地址，如果出现变更，可能得不到通知，地址将失效 - consumer不清楚user-service的状态，服务宕机也不知道 - user-service只有1台服务，不具备高可用性 - 即便user-service形成集群，consumer还需自己实现负载均衡 其实上面说的问题，概括一下就是分布式服务必然要面临的问题： - 服务管理 - 如何自动注册和发现 - 如何实现状态监管 - 如何实现动态路由 - 服务如何实现负载均衡 - 服务如何解决容灾问题 - 服务如何实现统一配置 以上的问题，我们都将在SpringCloud中得到答案。 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 # 6.Eureka注册中心 ## 6.1.认识Eureka 首先我们来解决第一问题，服务的管理。 > 问题分析 在刚才的案例中，user-service对外提供服务，需要对外暴露自己的地址。而consumer（调用者）需要记录服务提供者的地址。将来地址出现变更，还需要及时更新。这在服务较少的时候并不觉得有什么，但是在现在日益复杂的互联网环境，一个项目肯定会拆分出十几，甚至数十个微服务。此时如果还人为管理地址，不仅开发困难，将来测试、发布上线都会非常麻烦，这与DevOps的思想是背道而驰的。 > 网约车 这就好比是 网约车出现以前，人们出门叫车只能叫出租车。一些私家车想做出租却没有资格，被称为黑车。而很多人想要约车，但是无奈出租车太少，不方便。私家车很多却不敢拦，而且满大街的车，谁知道哪个才是愿意载人的。一个想要，一个愿意给，就是缺少引子，缺乏管理啊。 此时滴滴这样的网约车平台出现了，所有想载客的私家车全部到滴滴注册，记录你的车型（服务类型），身份信息（联系方式）。这样提供服务的私家车，在滴滴那里都能找到，一目了然。 此时要叫车的人，只需要打开APP，输入你的目的地，选择车型（服务类型），滴滴自动安排一个符合需求的车到你面前，为你服务，完美！ > Eureka做什么？ Eureka就好比是滴滴，负责管理、记录服务提供者的信息。服务调用者无需自己寻找服务，而是把自己的需求告诉Eureka，然后Eureka会把符合你需求的服务告诉你。 同时，服务提供方与Eureka之间通过“心跳”机制进行监控，当某个服务提供方出现问题，Eureka自然会把它从服务列表中剔除。 这就实现了服务的自动注册、发现、状态监控。 ## 6.2.原理图 > 基本架构： - Eureka：就是服务注册中心（可以是一个集群），对外暴露自己的地址 - 提供者：启动后向Eureka注册自己信息（地址，提供什么服务） - 消费者：向Eureka订阅服务，Eureka会将对应服务的所有提供者地址列表发送给消费者，并且定期更新 - 心跳(续约)：提供者定期通过http方式向Eureka刷新自己的状态 ## 6.3.入门案例 ### 6.3.1.编写EurekaServer 接下来我们创建一个项目，启动一个EurekaServer： 依然使用spring提供的快速搭建工具： 选择依赖： 完整的Pom文件： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.leyou.demo&lt;/groupId&gt; &lt;artifactId&gt;eureka-demo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;eureka-demo&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;​ &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;​ &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt;​ &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;​ &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;​ &lt;java.version&gt;1.8&lt;/java.version&gt;​ &lt;!-- SpringCloud版本，是最新的F系列 --&gt;​ &lt;spring-cloud.version&gt;Finchley.RC1&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt;​ &lt;!-- Eureka服务端 --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;​ &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt;​ &lt;dependencies&gt;​ &lt;!-- SpringCloud依赖，一定要放到dependencyManagement中，起到管理版本的作用即可 --&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;​ &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;​ &lt;type&gt;pom&lt;/type&gt;​ &lt;scope&gt;import&lt;/scope&gt;​ &lt;/dependency&gt;​ &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt;​ &lt;plugins&gt;​ &lt;plugin&gt;​ &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;​ &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;​ &lt;/plugin&gt;​ &lt;/plugins&gt; &lt;/build&gt; &lt;repositories&gt;​ &lt;repository&gt;​ &lt;id&gt;spring-milestones&lt;/id&gt;​ &lt;name&gt;Spring Milestones&lt;/name&gt;​ &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;​ &lt;snapshots&gt;​ &lt;enabled&gt;false&lt;/enabled&gt;​ &lt;/snapshots&gt;​ &lt;/repository&gt; &lt;/repositories&gt;&lt;/project&gt;\\ 编写启动类： \\12345678910111213141516@SpringBootApplication@EnableEurekaServer // 声明这个应用是一个EurekaServerpublic class EurekaDemoApplication &#123; public static void main(String[] args) &#123;​ SpringApplication.run(EurekaDemoApplication.class, args); &#125;&#125;\\ 编写配置： \\123456789101112131415161718192021222324server: port: 10086 # 端口spring: application:​ name: eureka-server # 应用名称，会在Eureka中显示eureka: client:​ register-with-eureka: false # 是否注册自己的信息到EurekaServer，默认是true​ fetch-registry: false # 是否拉取其它服务的信息，默认是true​ service-url: # EurekaServer的地址，现在是自己的地址，如果是集群，需要加上其它Server的地址。​ defaultZone: http://127.0.0.1:$&#123;server.port&#125;/eureka\\ 启动服务，并访问：http://127.0.0.1:10086/eureka ### 6.3.2.将user-service注册到Eureka 注册服务，就是在服务上添加Eureka的客户端依赖，客户端代码会自动把服务注册到EurekaServer中。 > 我们在user-service-demo中添加Eureka客户端依赖： 先添加SpringCloud依赖： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!-- SpringCloud的依赖 --&gt;&lt;dependencyManagement&gt;​ &lt;dependencies&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;​ &lt;version&gt;Finchley.RC1&lt;/version&gt;​ &lt;type&gt;pom&lt;/type&gt;​ &lt;scope&gt;import&lt;/scope&gt;​ &lt;/dependency&gt;​ &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;!-- Spring的仓库地址 --&gt;&lt;repositories&gt;​ &lt;repository&gt;​ &lt;id&gt;spring-milestones&lt;/id&gt;​ &lt;name&gt;Spring Milestones&lt;/name&gt;​ &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;​ &lt;snapshots&gt;​ &lt;enabled&gt;false&lt;/enabled&gt;​ &lt;/snapshots&gt;​ &lt;/repository&gt;&lt;/repositories&gt;\\ 然后是Eureka客户端： \\123456789101112&lt;!-- Eureka客户端 --&gt;&lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt;\\ > 在启动类上开启Eureka客户端功能 通过添加@EnableDiscoveryClient来开启Eureka客户端功能 \\12345678910111213141516@SpringBootApplication@EnableDiscoveryClient // 开启EurekaClient功能public class UserServiceDemoApplication &#123; public static void main(String[] args) &#123;​ SpringApplication.run(UserServiceDemoApplication.class, args); &#125;&#125;\\ > 编写配置 \\1234567891011121314151617181920212223242526272829303132333435363738394041424344server: port: 8081spring: datasource:​ url: jdbc:mysql://localhost:3306/mydb01​ username: root​ password: 123​ hikari:​ maximum-pool-size: 20​ minimum-idle: 10 application:​ name: user-service # 应用名称mybatis: type-aliases-package: com.leyou.userservice.pojoeureka: client:​ service-url: # EurekaServer地址​ defaultZone: http://127.0.0.1:10086/eureka instance:​ prefer-ip-address: true # 当调用getHostname获取实例的hostname时，返回ip而不是host名称​ ip-address: 127.0.0.1 # 指定自己的ip信息，不指定的话会自己寻找\\ 注意： - 这里我们添加了spring.application.name属性来指定应用名称，将来会作为应用的id使用。 - 不用指定register-with-eureka和fetch-registry，因为默认是true > 重启项目，访问Eureka监控页面查看 我们发现user-service服务已经注册成功了 ### 6.3.3.消费者从Eureka获取服务 接下来我们修改consumer-demo，尝试从EurekaServer获取服务。 方法与消费者类似，只需要在项目中添加EurekaClient依赖，就可以通过服务名称来获取信息了！ 1）添加依赖： 先添加SpringCloud依赖： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!-- SpringCloud的依赖 --&gt;&lt;dependencyManagement&gt;​ &lt;dependencies&gt;​ &lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;​ &lt;version&gt;Finchley.RC1&lt;/version&gt;​ &lt;type&gt;pom&lt;/type&gt;​ &lt;scope&gt;import&lt;/scope&gt;​ &lt;/dependency&gt;​ &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;!-- Spring的仓库地址 --&gt;&lt;repositories&gt;​ &lt;repository&gt;​ &lt;id&gt;spring-milestones&lt;/id&gt;​ &lt;name&gt;Spring Milestones&lt;/name&gt;​ &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;​ &lt;snapshots&gt;​ &lt;enabled&gt;false&lt;/enabled&gt;​ &lt;/snapshots&gt;​ &lt;/repository&gt;&lt;/repositories&gt;\\ 然后是Eureka客户端： \\123456789101112&lt;!-- Eureka客户端 --&gt;&lt;dependency&gt;​ &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;​ &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt;\\ 2）在启动类开启Eureka客户端 \\123456789101112131415161718192021222324@SpringBootApplication@EnableDiscoveryClient // 开启Eureka客户端public class UserConsumerDemoApplication &#123;​ @Bean​ public RestTemplate restTemplate() &#123;​ return new RestTemplate(new OkHttp3ClientHttpRequestFactory());​ &#125;​ public static void main(String[] args) &#123;​ SpringApplication.run(UserConsumerDemoApplication.class, args);​ &#125;&#125;\\ 3）修改配置： \\1234567891011121314151617181920212223242526server: port: 8080spring: application:​ name: consumer # 应用名称eureka: client:​ service-url: # EurekaServer地址​ defaultZone: http://127.0.0.1:10086/eureka instance:​ prefer-ip-address: true # 当其它服务获取地址时提供ip而不是hostname​ ip-address: 127.0.0.1 # 指定自己的ip信息，不指定的话会自己寻找\\ 4）修改代码，用DiscoveryClient类的方法，根据服务名称，获取服务实例： \\12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758@Servicepublic class UserService &#123;​ @Autowired​ private RestTemplate restTemplate;​ @Autowired​ private DiscoveryClient discoveryClient;// Eureka客户端，可以获取到服务实例信息​ public List&lt;User&gt; queryUserByIds(List&lt;Long&gt; ids) &#123;​ List&lt;User&gt; users = new ArrayList&lt;&gt;();​ // String baseUrl = \"http://localhost:8081/user/\";​ // 根据服务名称，获取服务实例​ List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(\"user-service\");​ // 因为只有一个UserService,因此我们直接get(0)获取​ ServiceInstance instance = instances.get(0);​ // 获取ip和端口信息​ String baseUrl = \"http://\"+instance.getHost() + \":\" + instance.getPort()+\"/user/\";​ ids.forEach(id -&gt; &#123;​ // 我们测试多次查询，​ users.add(this.restTemplate.getForObject(baseUrl + id, User.class));​ // 每次间隔500毫秒​ try &#123;​ Thread.sleep(500);​ &#125; catch (InterruptedException e) &#123;​ e.printStackTrace();​ &#125;​ &#125;);​ return users;​ &#125;&#125;\\ 5）Debug跟踪运行： 生成的URL： 访问结果： ## 6.4.Eureka详解 接下来我们详细讲解Eureka的原理及配置。 ### 6.4.1.基础架构 Eureka架构中的三个核心角色： - 服务注册中心 Eureka的服务端应用，提供服务注册和发现功能，就是刚刚我们建立的eureka-demo - 服务提供者 提供服务的应用，可以是SpringBoot应用，也可以是其它任意技术实现，只要对外提供的是Rest风格服务即可。本例中就是我们实现的user-service-demo - 服务消费者 消费应用从注册中心获取服务列表，从而得知每个服务方的信息，知道去哪里调用服务方。本例中就是我们实现的consumer-demo ### 6.4.2.高可用的Eureka Server Eureka Server即服务的注册中心，在刚才的案例中，我们只有一个EurekaServer，事实上EurekaServer也可以是一个集群，形成高可用的Eureka中心。 > 服务同步 多个Eureka Server之间也会互相注册为服务，当服务提供者注册到Eureka Server集群中的某个节点时，该节点会把服务的信息同步给集群中的每个节点，从而实现数据同步。因此，无论客户端访问到Eureka Server集群中的任意一个节点，都可以获取到完整的服务列表信息。 > 动手搭建高可用的EurekaServer 我们假设要搭建两条EurekaServer的集群，端口分别为：10086和10087 1）我们修改原来的EurekaServer配置： \\1234567891011121314151617181920server: port: 10086 # 端口spring: application:​ name: eureka-server # 应用名称，会在Eureka中显示eureka: client:​ service-url: # 配置其他Eureka服务的地址，而不是自己，比如10087​ defaultZone: http://127.0.0.1:10087/eureka\\ 所谓的高可用注册中心，其实就是把EurekaServer自己也作为一个服务进行注册，这样多个EurekaServer之间就能互相发现对方，从而形成集群。因此我们做了以下修改： - 删除了register-with-eureka=false和fetch-registry=false两个配置。因为默认值是true，这样就会吧自己注册到注册中心了。 - 把service-url的值改成了另外一台EurekaServer的地址，而不是自己 2）另外一台配置恰好相反： \\1234567891011121314151617181920server: port: 10087 # 端口spring: application:​ name: eureka-server # 应用名称，会在Eureka中显示eureka: client:​ service-url: # 配置其他Eureka服务的地址，而不是自己，比如10087​ defaultZone: http://127.0.0.1:10086/eureka\\ 注意：idea中一个应用不能启动两次，我们需要重新配置一个启动器： 然后启动即可。 3）启动测试： 4）客户端注册服务到集群 因为EurekaServer不止一个，因此注册服务的时候，service-url参数需要变化： \\12345678910eureka: client:​ service-url: # EurekaServer地址,多个地址以','隔开​ defaultZone: http://127.0.0.1:10086/eureka,http://127.0.0.1:10087/eureka\\ ### 6.4.3.服务提供者 服务提供者要向EurekaServer注册服务，并且完成服务续约等工作。 > 服务注册 服务提供者在启动时，会检测配置属性中的：eureka.client.register-with-erueka=true参数是否正确，事实上默认就是true。如果值确实为true，则会向EurekaServer发起一个Rest请求，并携带自己的元数据信息，Eureka Server会把这些信息保存到一个双层Map结构中。第一层Map的Key就是服务名称，第二层Map的key是服务的实例id。 > 服务续约 在注册服务完成以后，服务提供者会维持一个心跳（定时向EurekaServer发起Rest请求），告诉EurekaServer：“我还活着”。这个我们称为服务的续约（renew）； 有两个重要参数可以修改服务续约的行为： \\12345678910eureka: instance:​ lease-expiration-duration-in-seconds: 90​ lease-renewal-interval-in-seconds: 30\\ - lease-renewal-interval-in-seconds：服务续约(renew)的间隔，默认为30秒 - lease-expiration-duration-in-seconds：服务失效时间，默认值90秒 也就是说，默认情况下每个30秒服务会向注册中心发送一次心跳，证明自己还活着。如果超过90秒没有发送心跳，EurekaServer就会认为该服务宕机，会从服务列表中移除，这两个值在生产环境不要修改，默认即可。 但是在开发时，这个值有点太长了，经常我们关掉一个服务，会发现Eureka依然认为服务在活着。所以我们在开发阶段可以适当调小。 \\12345678910eureka: instance:​ lease-expiration-duration-in-seconds: 10 # 10秒即过期​ lease-renewal-interval-in-seconds: 5 # 5秒一次心跳\\ > 实例id 先来看一下服务状态信息： 在Eureka监控页面，查看服务注册信息： 在status一列中，显示以下信息： - UP(1)：代表现在是启动了1个示例，没有集群 - DESKTOP-2MVEC12:user-service:8081：是示例的名称（instance-id）， - 默认格式是：${hostname} + ${spring.application.name} + ${server.port} - instance-id是区分同一服务的不同实例的唯一标准，因此不能重复。 我们可以通过instance-id属性来修改它的构成： \\12345678eureka: instance:​ instance-id: $&#123;spring.application.name&#125;:$&#123;server.port&#125;\\ 重启服务再试试看： ### 6.4.4.服务消费者 > 获取服务列表 当服务消费者启动是，会检测eureka.client.fetch-registry=true参数的值，如果为true，则会从Eureka Server服务的列表只读备份，然后缓存在本地。并且每隔30秒会重新获取并更新数据。我们可以通过下面的参数来修改： \\12345678eureka: client:​ registry-fetch-interval-seconds: 5\\ 生产环境中，我们不需要修改这个值。 但是为了开发环境下，能够快速得到服务的最新状态，我们可以将其设置小一点。 ### 6.4.5.失效剔除和自我保护 > 失效剔除 有些时候，我们的服务提供方并不一定会正常下线，可能因为内存溢出、网络故障等原因导致服务无法正常工作。Eureka Server需要将这样的服务剔除出服务列表。因此它会开启一个定时任务，每隔60秒对所有失效的服务（超过90秒未响应）进行剔除。 可以通过eureka.server.eviction-interval-timer-in-ms参数对其进行修改，单位是毫秒，生成环境不要修改。 这个会对我们开发带来极大的不变，你对服务重启，隔了60秒Eureka才反应过来。开发阶段可以适当调整，比如10S > 自我保护 我们关停一个服务，就会在Eureka面板看到一条警告： 这是触发了Eureka的自我保护机制。当一个服务未按时进行心跳续约时，Eureka会统计最近15分钟心跳失败的服务实例的比例是否超过了85%。在生产环境下，因为网络延迟等原因，心跳失败实例的比例很有可能超标，但是此时就把服务剔除列表并不妥当，因为服务可能没有宕机。Eureka就会把当前实例的注册信息保护起来，不予剔除。生产环境下这很有效，保证了大多数服务依然可用。 但是这给我们的开发带来了麻烦， 因此开发阶段我们都会关闭自我保护模式： \\12345678910eureka: server:​ enable-self-preservation: false # 关闭自我保护模式（缺省为打开）​ eviction-interval-timer-in-ms: 1000 # 扫描失效服务的间隔时间（缺省为60*1000ms）\\ 吾爱程序猿（www.52programer.com）打造专业优质的IT教程分享社区 # 7.负载均衡Robbin 在刚才的案例中，我们启动了一个user-service，然后通过DiscoveryClient来获取服务实例信息，然后获取ip和端口来访问。 但是实际环境中，我们往往会开启很多个user-service的集群。此时我们获取的服务列表中就会有多个，到底该访问哪一个呢？ 一般这种情况下我们就需要编写负载均衡算法，在多个实例列表中进行选择。 不过Eureka中已经帮我们集成了负载均衡组件：Ribbon，简单修改代码即可使用。 什么是Ribbon： 接下来，我们就来使用Ribbon实现负载均衡。 ## 7.1.启动两个服务实例 首先我们启动两个user-service实例，一个8081，一个8082。 Eureka监控面板： ## 7.2.开启负载均衡 因为Eureka中已经集成了Ribbon，所以我们无需引入新的依赖。直接修改代码： 在RestTemplate的配置方法上添加@LoadBalanced注解： \\123456789101112@Bean@LoadBalancedpublic RestTemplate restTemplate() &#123;​ return new RestTemplate(new OkHttp3ClientHttpRequestFactory());&#125;\\ 修改调用方式，不再手动获取ip和端口，而是直接通过服务名称调用： \\123456789101112131415161718192021222324252627282930313233343536373839404142434445464748@Servicepublic class UserService &#123;​ @Autowired​ private RestTemplate restTemplate;​ @Autowired​ private DiscoveryClient discoveryClient;​ public List&lt;User&gt; queryUserByIds(List&lt;Long&gt; ids) &#123;​ List&lt;User&gt; users = new ArrayList&lt;&gt;();​ // 地址直接写服务名称即可​ String baseUrl = \"http://user-service/user/\";​ ids.forEach(id -&gt; &#123;​ // 我们测试多次查询，​ users.add(this.restTemplate.getForObject(baseUrl + id, User.class));​ // 每次间隔500毫秒​ try &#123;​ Thread.sleep(500);​ &#125; catch (InterruptedException e) &#123;​ e.printStackTrace();​ &#125;​ &#125;);​ return users;​ &#125;&#125;\\ 访问页面，查看结果： 完美！ ## 7.3.源码跟踪 为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。 显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是LoadBalancerInterceptor 我们进行源码跟踪： 继续跟入execute方法：发现获取了8082端口的服务 再跟下一次，发现获取的是8081： ## 7.4.负载均衡策略 Ribbon默认的负载均衡策略是简单的轮询，我们可以测试一下： 编写测试类，在刚才的源码中我们看到拦截中是使用RibbonLoadBalanceClient来进行负载均衡的，其中有一个choose方法，是这样介绍的： 现在这个就是负载均衡获取实例的方法。 我们对注入这个类的对象，然后对其测试： \\12345678910111213141516171819202122232425262728@RunWith(SpringRunner.class)@SpringBootTest(classes = UserConsumerDemoApplication.class)public class LoadBalanceTest &#123;​ @Autowired​ RibbonLoadBalancerClient client;​ @Test​ public void test()&#123;​ for (int i = 0; i &lt; 100; i++) &#123;​ ServiceInstance instance = this.client.choose(\"user-service\");​ System.out.println(instance.getHost() + \":\" + instance.getPort());​ &#125;​ &#125;&#125;\\ 结果： 符合了我们的预期推测，确实是轮询方式。 我们是否可以修改负载均衡的策略呢？ 继续跟踪源码，发现这么一段代码： 我们看看这个rule是谁： 这里的rule默认值是一个RoundRobinRule，看类的介绍： 这不就是轮询的意思嘛。 我们注意到，这个类其实是实现了接口IRule的，查看一下： 定义负载均衡的规则接口。 它有以下实现： SpringBoot也帮我们提供了修改负载均衡规则的配置入口： \\12345678user-service: ribbon:​ NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule\\ 格式是：{服务名称}.ribbon.NFLoadBalancerRuleClassName，值就是IRule的实现类。 再次测试，发现结果变成了随机： ## 7.5.重试机制 Eureka的服务治理强调了CAP原则中的AP，即可用性和可靠性。它与Zookeeper这一类强调CP（一致性，可靠性）的服务治理框架最大的区别在于：Eureka为了实现更高的服务可用性，牺牲了一定的一致性，极端情况下它宁愿接收故障实例也不愿丢掉健康实例，正如我们上面所说的自我保护机制。 但是，此时如果我们调用了这些不正常的服务，调用就会失败，从而导致其它服务不能正常工作！这显然不是我们愿意看到的。 我们现在关闭一个user-service实例： 因为服务剔除的延迟，consumer并不会立即得到最新的服务列表，此时再次访问你会得到错误提示： 但是此时，8081服务其实是正常的。 因此Spring Cloud 整合了Spring Retry 来增强RestTemplate的重试能力，当一次服务调用失败后，不会立即抛出一次，而是再次重试另一个服务。 只需要简单配置即可实现Ribbon的重试： \\1234567891011121314151617181920212223242526spring: cloud:​ loadbalancer:​ retry:​ enabled: true # 开启Spring Cloud的重试功能user-service: ribbon:​ ConnectTimeout: 250 # Ribbon的连接超时时间​ ReadTimeout: 1000 # Ribbon的数据读取超时时间​ OkToRetryOnAllOperations: true # 是否对所有操作都进行重试​ MaxAutoRetriesNextServer: 1 # 切换实例的重试次数​ MaxAutoRetries: 1 # 对当前实例的重试次数\\ 根据如上配置，当访问到某个服务超时后，它会再次尝试访问下一个服务实例，如果不行就再换一个实例，如果不行，则返回失败。切换次数取决于MaxAutoRetriesNextServer参数的值 引入spring-retry依赖 \\12345678910&lt;dependency&gt;​ &lt;groupId&gt;org.springframework.retry&lt;/groupId&gt;​ &lt;artifactId&gt;spring-retry&lt;/artifactId&gt;&lt;/dependency&gt;\\ 我们重启user-consumer-demo，测试，发现即使user-service2宕机，也能通过另一台服务实例获取到结果！","categories":[],"tags":[],"keywords":[]}]}